<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="oss.fosslight.repository.ApiVulnerabilityMapper">

    <sql id="limitPage">
        LIMIT #{offset}, #{countPerPage}
    </sql>
    <sql id="orderby">
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(sortColumn)">
            <choose>
                <when test="@oss.fosslight.util.StringUtil@equals('PRODUCT', sortColumn)">
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            ORDER BY<if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION =
                            'Fixed' THEN 1 ELSE 0 END,
                        </if> A.SEQ ASC
                            , A.MAJOR_VERSION ASC
                            , BINARY ( CASE WHEN A.VERSION REGEXP '^[a-zA-Z]+' THEN VERSION END ) ASC
                            , A.ASCII ASC
                            , A.MINOR_VERSION ASC
                            , A.PATCH_VERSION ASC
                            , A.VERSION_LEN ASC,
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            ORDER BY <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION =
                            'Fixed' THEN 1 ELSE 0 END,
                        </if> A.SEQ DESC
                            , A.MAJOR_VERSION DESC
                            , BINARY ( CASE WHEN A.VERSION REGEXP '^[a-zA-Z]+' THEN VERSION END ) DESC
                            , A.ASCII DESC
                            , A.MINOR_VERSION DESC
                            , A.PATCH_VERSION DESC
                            , A.VERSION_LEN DESC,
                        </when>
                    </choose>
                    <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION = 'Fixed' THEN 1 ELSE 0
                        END,
                    </if>
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            PRODUCT ASC
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            PRODUCT DESC
                        </when>
                    </choose>
                </when>
                <when test="@oss.fosslight.util.StringUtil@equals('OSS_NICKNAME', sortColumn)">
                    ORDER BY
                    <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION = 'Fixed' THEN 1 ELSE 0
                        END,
                    </if>
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            OSS_NICKNAME ASC
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            OSS_NICKNAME DESC
                        </when>
                    </choose>
                </when>
                <when test="@oss.fosslight.util.StringUtil@equals('CVSS_SCORE', sortColumn)">
                    ORDER BY
                    <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION = 'Fixed' THEN 1 ELSE 0
                        END,
                    </if>
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            CVSS_SCORE ASC
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            CVSS_SCORE DESC
                        </when>
                    </choose>
                </when>
                <when test="@oss.fosslight.util.StringUtil@equals('CVE_ID', sortColumn)">
                    ORDER BY
                    <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION = 'Fixed' THEN 1 ELSE 0
                        END,
                    </if>
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            CVE_ID ASC
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            CVE_ID DESC
                        </when>
                    </choose>
                </when>
                <when test="@oss.fosslight.util.StringUtil@equals('MODIFIED_AT', sortColumn)">
                    ORDER BY
                    <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION = 'Fixed' THEN 1 ELSE 0
                        END,
                    </if>
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            MODI_DATE ASC
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            MODI_DATE DESC
                        </when>
                    </choose>
                </when>
                <when test="@oss.fosslight.util.StringUtil@equals('VENDOR', sortColumn)">
                    ORDER BY
                    <if test="vulnerabilityCheckFlag != null">CASE WHEN VULNERABILITY_RESOLUTION = 'Fixed' THEN 1 ELSE 0
                        END,
                    </if>
                    <choose>
                        <when test="@oss.fosslight.util.StringUtil@equals('asc', sortDirection)">
                            VENDOR ASC
                        </when>
                        <when test="@oss.fosslight.util.StringUtil@equals('desc', sortDirection)">
                            VENDOR DESC
                        </when>
                    </choose>
                </when>
            </choose>
        </if>
    </sql>

    <select id="selectNvdList" parameterType="hashMap" resultType="oss.fosslight.domain.CamelMap">
        SELECT CVE.CVE_ID
        , CVE.CVSS_SCORE
        , <![CDATA[CONCAT('https://nvd.nist.gov/vuln/detail/', CVE.CVE_ID)]]> AS CVE_ID_LINK
        , CVE.VULN_SUMMARY AS Description
        FROM (
        SELECT PRODUCT
        , VERSION
        , CVE_ID
        FROM NVD_DATA_V3
        WHERE true
        <if test="@oss.fosslight.util.StringUtil@notEquals(null, ossName)">
            AND (
            PRODUCT = #{ossName}
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(underbarOssName)">
                OR PRODUCT = #{underbarOssName}
            </if>
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknames)">
                <foreach item="item" index="index" collection="ossNicknames">
                    OR PRODUCT = #{item}
                </foreach>
            </if>
            )
        </if>
        <if test="@oss.fosslight.util.StringUtil@notEquals('-', ossVersion)">
            AND VERSION = #{ossVersion}
        </if>
        <if test="@oss.fosslight.util.StringUtil@notEquals(null, cveId)">
            AND CVE_ID = #{cveId}
        </if>
        ) DATA
        INNER JOIN NVD_CVE_V3 CVE
        ON DATA.CVE_ID = CVE.CVE_ID
        ORDER BY CVE.CVE_ID DESC
    </select>

    <select id="selectMaxScoreNvdInfo" parameterType="hashMap" resultType="oss.fosslight.domain.CamelMap">
        SELECT CVSS_SCORE
        ,
        <![CDATA[CONCAT(#{host}, '/vulnerability/vulnpopup?ossName=', PRODUCT, '&ossVersion=', VERSION, '&vulnType=v&isPopup=Y')]]>
        AS VULNERABILITY_LINK
        FROM NVD_DATA_SCORE_V3
        WHERE (
        PRODUCT = #{ossName}
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(underbarOssName)">
            OR PRODUCT = #{underbarOssName}
        </if>
        )
        AND VERSION = #{ossVersion}
    </select>

    <sql id="filters">
        AND
        <foreach collection="filtersMap.rules" item="item" separator="AND">
            <choose>
                <when test='item.field == "product"'>
                    PRODUCT
                </when>
                <when test='item.field == "ossNickname"'>
                    OSS_NICKNAME
                </when>
                <when test='item.field == "version"'>
                    VERSION
                </when>
                <when test='item.field == "cvssScore"'>
                    CVSS_SCORE
                </when>
                <when test='item.field == "cveId"'>
                    CVE_ID
                </when>
                <when test='item.field == "modiDate"'>
                    MODI_DATE
                </when>
                <when test='item.field == "vendor"'>
                    VENDOR
                </when>
            </choose>
            <choose>
                <when test='item.op == "eq"'>
                    = #{item.data}
                </when>
                <when test='item.op == "ne"'>
                    <![CDATA[<>]]> #{item.data}
                </when>
                <when test='item.op == "bw"'>
                    LIKE CONCAT(#{item.data}, '%')
                </when>
                <when test='item.op == "bn"'>
                    NOT LIKE CONCAT(#{item.data}, '%')
                </when>
                <when test='item.op == "ew"'>
                    LIKE CONCAT('%', #{item.data})
                </when>
                <when test='item.op == "en"'>
                    NOT LIKE CONCAT('%', #{item.data})
                </when>
                <when test='item.op == "cn"'>
                    LIKE CONCAT('%', #{item.data}, '%')
                </when>
                <when test='item.op == "nc"'>
                    NOT LIKE CONCAT('%', #{item.data}, '%')
                </when>
                <when test='item.op == "lt"'>
                    <![CDATA[<]]> #{item.data}
                </when>
                <when test='item.op == "le"'>
                    <![CDATA[<=]]> #{item.data}
                </when>
                <when test='item.op == "gt"'>
                    <![CDATA[>]]> #{item.data}
                </when>
                <when test='item.op == "ge"'>
                    <![CDATA[>=]]> #{item.data}
                </when>
                <otherwise></otherwise>
            </choose>
        </foreach>
    </sql>

    <resultMap id="VulnerabilityDtoMap" type="oss.fosslight.api.dto.VulnerabilityDto">
        <result property="ossName" column="product"/>
        <result property="ossVersion" column="version"/>
        <result property="summary" column="vuln_summary"/>
    </resultMap>
    <select id="selectVulnerabilityList" parameterType="oss.fosslight.api.dto.ListVulnerabilityDto$Request"
            resultMap="VulnerabilityDtoMap">
        SELECT
        A.PRODUCT,
        A.VERSION,
        IFNULL(GROUP_CONCAT(DISTINCT A.OSS_NICKNAME ORDER BY A.OSS_NICKNAME), '') AS OSS_NICKNAME,
        A.CVE_ID,
        CVSS_SCORE,
        GROUP_CONCAT(DISTINCT(A.VENDOR), ',') AS VENDOR,
        A.VULN_SUMMARY,
        A.MODI_DATE as MODIFIED
        FROM (
        SELECT CASE WHEN NICK.OSS_NICKNAME IS NOT NULL THEN REPLACE(NICK.OSS_NAME, ' ', '_') ELSE REPLACE(SCORE.PRODUCT,
        ' ', '_') END PRODUCT
        , SCORE.VERSION
        , NICK.OSS_NICKNAME
        , SCORE.CVE_ID
        , SCORE.CVSS_SCORE
        , SCORE.VENDOR
        , SCORE.MODI_DATE
        , SCORE.VULN_SUMMARY
        <if test="@oss.fosslight.util.StringUtil@equals('PRODUCT', sortColumn)">
            , (CASE WHEN SCORE.VERSION = '' THEN 1 WHEN SCORE.VERSION REGEXP '^[0-9\.]+' THEN 2 WHEN SCORE.VERSION
            REGEXP '^[a-z]+' THEN 3 ELSE 4 END) AS SEQ
            , SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP '^[0-9]+' THEN SCORE.VERSION END), '.', 1)+0 AS
            MAJOR_VERSION
            , IF(SCORE.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP
            '^[0-9]+' THEN SCORE.VERSION END), '.', 2), '.', -1)+0 , NULL) AS MINOR_VERSION
            , IF(SCORE.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP
            '^[0-9]+' THEN SCORE.VERSION END), '.', 3), '.', -1)+0 , NULL) AS PATCH_VERSION
            , LENGTH(SCORE.VERSION) AS VERSION_LEN
            , ASCII(SUBSTRING(SCORE.VERSION, 1)) AS ASCII
        </if>
        FROM NVD_DATA_SCORE_V3 SCORE
        LEFT JOIN OSS_NICKNAME NICK
        ON (SCORE.PRODUCT = NICK.OSS_NICKNAME
        OR SCORE.PRODUCT = REPLACE(NICK.OSS_NICKNAME, ' ', '_')
        OR (SCORE.VENDORPRODUCT IS NOT NULL AND SCORE.VENDORPRODUCT = NICK.OSS_NICKNAME))
        WHERE (EXISTS (SELECT 1 FROM NVD_DATA_V3 WHERE PRODUCT = SCORE.PRODUCT) OR EXISTS (SELECT 1 FROM NVD_DATA_V3
        WHERE VENDORPRODUCT IS NOT NULL AND VENDORPRODUCT = SCORE.VENDORPRODUCT))
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName)">
            <choose>
                <when test="ossNameExact">
                    AND (SCORE.PRODUCT = #{ossName}
                    <if test="ossNicknames != null">
                        <foreach item="item" index="index" collection="ossNicknames">
                            OR SCORE.PRODUCT = #{item}
                        </foreach>
                    </if>
                    <!--					<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknameArr)">-->
                    <!--						<foreach item="item" index="index" collection="ossNicknameArr">-->
                    <!--							OR SCORE.VENDORPRODUCT = #{item}-->
                    <!--						</foreach>-->
                    <!--					</if>-->
                    )
                </when>
                <otherwise>
                    AND (SCORE.PRODUCT LIKE CONCAT('%',#{ossName},'%')
                    <if test="!@oss.fosslight.util.StringUtil@isEmpty(regexOssName)">
                        OR SCORE.PRODUCT RLIKE #{regexOssName}
                    </if>
                    <if test="ossNicknames != null">
                        <foreach item="item" index="index" collection="ossNicknames">
                            OR SCORE.PRODUCT = #{item}
                        </foreach>
                    </if>
                    <!--					<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknameArr)">-->
                    <!--						<foreach item="item" index="index" collection="ossNicknameArr">-->
                    <!--							OR SCORE.VENDORPRODUCT = #{item}-->
                    <!--						</foreach>-->
                    <!--					</if>-->
                    )
                </otherwise>
            </choose>
        </if>
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
            <choose>
                <when test="cveIdExact">
                    AND SCORE.CVE_ID = #{cveId}
                </when>
                <otherwise>
                    AND SCORE.CVE_ID LIKE CONCAT ('%', #{cveId}, '%')
                </otherwise>
            </choose>
        </if>
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(ossVersion)">
            <choose>
                <when test="ossVersionExact">
                    AND VERSION = #{ossVersion}
                </when>
                <otherwise>
                    AND VERSION LIKE CONCAT (#{ossVersion},'%')
                </otherwise>
            </choose>
        </if>
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(vendor)">
            <choose>
                <when test="vendorExact">
                    AND VENDOR = #{vendor}
                </when>
                <otherwise>
                    AND VENDOR LIKE CONCAT ('%',#{vendor},'%')
                </otherwise>
            </choose>
        </if>
        ) A
        WHERE 1=1
        <if test="!@oss.fosslight.util.StringUtil@isEmpty(maxScoreGreaterThan)">
            AND CVSS_SCORE <![CDATA[>=]]> #{maxScoreGreaterThan}
        </if>
        GROUP BY A.PRODUCT, A.VERSION, A.CVE_ID
        <include refid="orderby"/>
        <include refid="limitPage"/>
    </select>

    <select id="selectVulnerabilityTotalCount" parameterType="oss.fosslight.api.dto.ListVulnerabilityDto$Request"
            resultType="int">
        SELECT COUNT(1)
        FROM (
            SELECT A.PRODUCT, A.VERSION, A.CVE_ID
            FROM (
            SELECT CASE WHEN NICK.OSS_NICKNAME IS NOT NULL THEN REPLACE(NICK.OSS_NAME, ' ', '_') ELSE REPLACE(SCORE.PRODUCT,
            ' ', '_') END PRODUCT
            , SCORE.VERSION
            , NICK.OSS_NICKNAME
            , SCORE.CVE_ID
            , SCORE.CVSS_SCORE
            , SCORE.VENDOR
            , SCORE.MODI_DATE
            , SCORE.VULN_SUMMARY
            <if test="@oss.fosslight.util.StringUtil@equals('PRODUCT', sortColumn)">
                , (CASE WHEN SCORE.VERSION = '' THEN 1 WHEN SCORE.VERSION REGEXP '^[0-9\.]+' THEN 2 WHEN SCORE.VERSION
                REGEXP '^[a-z]+' THEN 3 ELSE 4 END) AS SEQ
                , SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP '^[0-9]+' THEN SCORE.VERSION END), '.', 1)+0 AS
                MAJOR_VERSION
                , IF(SCORE.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP
                '^[0-9]+' THEN SCORE.VERSION END), '.', 2), '.', -1)+0 , NULL) AS MINOR_VERSION
                , IF(SCORE.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP
                '^[0-9]+' THEN SCORE.VERSION END), '.', 3), '.', -1)+0 , NULL) AS PATCH_VERSION
                , LENGTH(SCORE.VERSION) AS VERSION_LEN
                , ASCII(SUBSTRING(SCORE.VERSION, 1)) AS ASCII
            </if>
            FROM NVD_DATA_SCORE_V3 SCORE
            LEFT JOIN OSS_NICKNAME NICK
            ON (
                SCORE.PRODUCT = NICK.OSS_NICKNAME
                OR SCORE.PRODUCT = REPLACE(NICK.OSS_NICKNAME, ' ', '_')
                OR (SCORE.VENDORPRODUCT IS NOT NULL AND SCORE.VENDORPRODUCT = NICK.OSS_NICKNAME)
            )
            WHERE (EXISTS (SELECT 1 FROM NVD_DATA_V3 WHERE PRODUCT = SCORE.PRODUCT) OR EXISTS (SELECT 1 FROM NVD_DATA_V3
            WHERE VENDORPRODUCT IS NOT NULL AND VENDORPRODUCT = SCORE.VENDORPRODUCT))
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName)">
                <choose>
                    <when test="ossNameExact">
                        AND (SCORE.PRODUCT = #{ossName}
                        <if test="ossNicknames != null">
                            <foreach item="item" index="index" collection="ossNicknames">
                                OR SCORE.PRODUCT = #{item}
                            </foreach>
                        </if>
                        <!--					<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknameArr)">-->
                        <!--						<foreach item="item" index="index" collection="ossNicknameArr">-->
                        <!--							OR SCORE.VENDORPRODUCT = #{item}-->
                        <!--						</foreach>-->
                        <!--					</if>-->
                        )
                    </when>
                    <otherwise>
                        AND (SCORE.PRODUCT LIKE CONCAT('%',#{ossName},'%')
                        <if test="!@oss.fosslight.util.StringUtil@isEmpty(regexOssName)">
                            OR SCORE.PRODUCT RLIKE #{regexOssName}
                        </if>
                        <if test="ossNicknames != null">
                            <foreach item="item" index="index" collection="ossNicknames">
                                OR SCORE.PRODUCT = #{item}
                            </foreach>
                        </if>
                        <!--					<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknameArr)">-->
                        <!--						<foreach item="item" index="index" collection="ossNicknameArr">-->
                        <!--							OR SCORE.VENDORPRODUCT = #{item}-->
                        <!--						</foreach>-->
                        <!--					</if>-->
                        )
                    </otherwise>
                </choose>
            </if>
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
                <choose>
                    <when test="cveIdExact">
                        AND SCORE.CVE_ID = #{cveId}
                    </when>
                    <otherwise>
                        AND SCORE.CVE_ID LIKE CONCAT ('%', #{cveId}, '%')
                    </otherwise>
                </choose>
            </if>
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(ossVersion)">
                <choose>
                    <when test="ossVersionExact">
                        AND VERSION = #{ossVersion}
                    </when>
                    <otherwise>
                        AND VERSION LIKE CONCAT (#{ossVersion},'%')
                    </otherwise>
                </choose>
            </if>
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(vendor)">
                <choose>
                    <when test="vendorExact">
                        AND VENDOR = #{vendor}
                    </when>
                    <otherwise>
                        AND VENDOR LIKE CONCAT ('%',#{vendor},'%')
                    </otherwise>
                </choose>
            </if>
            ) A
            WHERE 1=1
            <if test="!@oss.fosslight.util.StringUtil@isEmpty(maxScoreGreaterThan)">
                AND CVSS_SCORE <![CDATA[>=]]> #{maxScoreGreaterThan}
            </if>
            GROUP BY A.PRODUCT, A.VERSION, A.CVE_ID
        ) B
    </select>


    <resultMap id="VulnerabilityDetailsDtoMap" type="oss.fosslight.api.dto.VulnerabilityDetailsDto">
        <result property="ossName" column="product"/>
        <result property="ossVersion" column="version"/>
        <result property="summary" column="vuln_summary"/>
        <result property="modified" column="modi_date"/>
    </resultMap>
    <select id="selectVulnerabilityById" resultMap="VulnerabilityDetailsDtoMap">
        SELECT SCORE.CVE_ID,
               SCORE.CVSS_SCORE,
               SCORE.VULN_SUMMARY,
               SCORE.MODI_DATE
        FROM NVD_DATA_SCORE_V3 SCORE WHERE SCORE.CVE_ID = #{cve_id}
        LIMIT 1
    </select>

    <select id="selectOssByCveId" resultType="oss.fosslight.api.dto.OssDto">
        SELECT VULN.OSS_NAME, VULN.OSS_VERSION, IFNULL(OSS.OSS_ID, NICK.OSS_ID) as OSS_ID
        FROM (SELECT PRODUCT AS OSS_NAME,
                     VERSION AS OSS_VERSION
              FROM NVD_DATA_SCORE_V3
              WHERE CVE_ID = #{cve_id}) VULN
                 left JOIN (SELECT M1.OSS_ID,
                                   M1.OSS_NAME,
                                   CASE
                                       WHEN M1.OSS_VERSION IS NULL THEN '-'
                                       WHEN M1.OSS_VERSION = '' THEN '-'
                                       ELSE M1.OSS_VERSION
                                       END OSS_VERSION
                            FROM (
					        		SELECT
					    				OV.OSS_ID,
					    				OC.OSS_COMMON_ID,
					    				OC.OSS_NAME,
					    				OV.OSS_VERSION
									FROM OSS_COMMON OC
									LEFT OUTER JOIN OSS_VERSION OV
									ON OC.OSS_COMMON_ID = OV.OSS_COMMON_ID
                            ) M1) OSS ON OSS.OSS_NAME = VULN.OSS_NAME
            AND OSS.OSS_VERSION = VULN.OSS_VERSION
                 left JOIN (SELECT M21.OSS_ID,
                                   M22.OSS_NICKNAME as OSS_NAME,
                                   CASE
                                       WHEN M21.OSS_VERSION IS NULL THEN '-'
                                       WHEN M21.OSS_VERSION = '' THEN '-'
                                       ELSE M21.OSS_VERSION
                                       END             OSS_VERSION
                            FROM (
					        		SELECT
					    				OV.OSS_ID,
					    				OC.OSS_COMMON_ID,
					    				OC.OSS_NAME,
					    				OV.OSS_VERSION
									FROM OSS_COMMON OC
									LEFT OUTER JOIN OSS_VERSION OV
									ON OC.OSS_COMMON_ID = OV.OSS_COMMON_ID
                            ) M21
                                     INNER JOIN OSS_NICKNAME M22 ON M21.OSS_NAME = M22.OSS_NAME) NICK
                           ON NICK.OSS_NAME = VULN.OSS_NAME
                               AND NICK.OSS_VERSION = VULN.OSS_VERSION;
    </select>
    <select id="selectRecentVulnerabilities" resultMap="VulnerabilityDtoMap">
        SELECT
        A.PRODUCT,
        A.VERSION,
        IFNULL(GROUP_CONCAT(DISTINCT A.OSS_NICKNAME ORDER BY A.OSS_NICKNAME), '') AS OSS_NICKNAME,
        A.CVE_ID,
        CVSS_SCORE,
        GROUP_CONCAT(DISTINCT(A.VENDOR), ',') AS VENDOR,
        A.VULN_SUMMARY,
        A.MODI_DATE as MODIFIED
        FROM (
            SELECT
                CASE WHEN NICK.OSS_NICKNAME IS NOT NULL
                    THEN REPLACE(NICK.OSS_NAME, ' ', '_')
                    ELSE REPLACE(SCORE.PRODUCT, ' ', '_')
                END PRODUCT
                , SCORE.VERSION
                , NICK.OSS_NICKNAME
                , SCORE.CVE_ID
                , SCORE.CVSS_SCORE
                , SCORE.VENDOR
                , SCORE.MODI_DATE
                , SCORE.VULN_SUMMARY
            FROM NVD_DATA_SCORE_V3 SCORE
            LEFT JOIN OSS_NICKNAME NICK
            ON (SCORE.PRODUCT = NICK.OSS_NICKNAME
            OR SCORE.PRODUCT = REPLACE(NICK.OSS_NICKNAME, ' ', '_')
            OR (SCORE.VENDORPRODUCT IS NOT NULL AND SCORE.VENDORPRODUCT = NICK.OSS_NICKNAME))
        ) A
        GROUP BY A.PRODUCT, A.VERSION, A.CVE_ID
        ORDER BY MODIFIED DESC
        LIMIT ${limit}
    </select>
</mapper>
