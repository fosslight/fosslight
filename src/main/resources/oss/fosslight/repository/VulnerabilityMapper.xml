<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="oss.fosslight.repository.VulnerabilityMapper">

	<sql id="limitPage">
		LIMIT #{startIndex}, #{pageListSize}
	</sql>
    <sql id="orderby">
    	<choose>
    		<when test="@oss.fosslight.util.StringUtil@equals('VERSION', sidx)">
				<choose>
					<when test="@oss.fosslight.util.StringUtil@equals('asc', sord)">
						ORDER BY A.SEQ asc 
							, A.MAJOR_VERSION asc
							, BINARY ( CASE WHEN A.VERSION REGEXP '^[a-zA-Z]+' THEN VERSION END ) asc
							, A.ASCII asc
							, A.MINOR_VERSION asc
							, A.PATCH_VERSION asc
							, A.VERSION_LEN asc
					</when>
					<when test="@oss.fosslight.util.StringUtil@equals('desc', sord)">
						ORDER BY A.SEQ desc
							, A.MAJOR_VERSION desc
							, BINARY ( CASE WHEN A.VERSION REGEXP '^[a-zA-Z]+' THEN VERSION END ) desc
							, A.ASCII desc
							, A.MINOR_VERSION desc
							, A.PATCH_VERSION desc
							, A.VERSION_LEN desc
					</when>
				</choose>
    		</when>
			<otherwise>
				<choose>
					<!--TODO: why is it "product" not "ossName". Need to check the domain of vulnerability.-->
					<when test="@oss.fosslight.util.StringUtil@equals('PRODUCT', sidx)">
						ORDER BY PRODUCT
					</when>
					<when test="@oss.fosslight.util.StringUtil@equals('OSS_NICKNAME', sidx)">
						ORDER BY OSS_NICKNAME
					</when>
					<when test="@oss.fosslight.util.StringUtil@equals('CVSS_SCORE', sidx)">
						ORDER BY CVSS_SCORE
					</when>
				</choose>
				<choose>
					<when test="@oss.fosslight.util.StringUtil@equals('asc', sord)">
						ASC
					</when>
					<when test="@oss.fosslight.util.StringUtil@equals('desc', sord)">
						DESC
					</when>
				</choose>
			</otherwise>
    	</choose>
    </sql>
	
	<select id="selectVulnerabilityTotalCount" parameterType="oss.fosslight.domain.Vulnerability" resultType="int">
		SELECT 
			COUNT(1)
		  FROM NVD_DATA_SCORE_V3 SCORE
		 WHERE 1 = 1
	 	<if test="!@oss.fosslight.util.StringUtil@isEmpty(product)">
	 		<choose>
				<when test="@oss.fosslight.util.StringUtil@equalsIgnoreCase(ossNameAllSearchFlag,'Y')">
					AND SCORE.PRODUCT = #{product}
				</when>
				<otherwise>
					AND SCORE.PRODUCT LIKE CONCAT('%',#{product},'%')
				</otherwise>
			 </choose>
	 	</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
		   AND CONCAT(PRODUCT, '||', VERSION) IN (SELECT CONCAT(PRODUCT, '||', VERSION) FROM NVD_DATA_V3 WHERE CVE_ID = #{cveId})
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(version)">
		   AND VERSION LIKE CONCAT (#{version},'%')
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(filterCondition)">
			${filterCondition}
		</if>
	</select>
	
	<select id="selectVulnerabilityList" parameterType="oss.fosslight.domain.Vulnerability" resultType="oss.fosslight.domain.Vulnerability">
		SELECT A.* 
		  FROM (SELECT SCORE.PRODUCT
				     , SCORE.VERSION
				     , IFNULL(
				     			(SELECT GROUP_CONCAT(PRODUCT) 
								   FROM NVD_DATA_SCORE_V3 
								  WHERE PRODUCT IN (SELECT OSS_NICKNAME 
									  				  FROM OSS_NICKNAME 
													 WHERE OSS_NAME = SCORE.PRODUCT) 
								    AND VERSION = SCORE.VERSION)
						  	 , '') AS OSS_NICKNAME
					 , SCORE.CVE_ID
					 , SCORE.CVSS_SCORE
				 <if test="@oss.fosslight.util.StringUtil@equals('VERSION', sidx)">
					 , (CASE WHEN SCORE.VERSION = '' THEN 1 WHEN SCORE.VERSION REGEXP '^[0-9\.]+' THEN 2 WHEN SCORE.VERSION REGEXP '^[a-z]+' THEN 3 ELSE 4 END) AS SEQ 
					 , SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP '^[0-9]+' THEN SCORE.VERSION END), '.', 1)+0 AS MAJOR_VERSION 
					 , IF(SCORE.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP '^[0-9]+' THEN SCORE.VERSION END), '.', 2), '.', -1)+0 , NULL) AS MINOR_VERSION 
					 , IF(SCORE.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN SCORE.VERSION REGEXP '^[0-9]+' THEN SCORE.VERSION END), '.', 3), '.', -1)+0 , NULL) AS PATCH_VERSION
					 , LENGTH(SCORE.VERSION) AS VERSION_LEN
					 , ASCII(SUBSTRING(SCORE.VERSION, 1)) AS ASCII
				 </if>
				  FROM NVD_DATA_SCORE_V3 SCORE
				 WHERE 1 = 1
			 	<if test="!@oss.fosslight.util.StringUtil@isEmpty(product)">
			 		<choose>
						<when test="@oss.fosslight.util.StringUtil@equalsIgnoreCase(ossNameAllSearchFlag,'Y')">
							AND SCORE.PRODUCT = #{product}
						</when>
						<otherwise>
							AND SCORE.PRODUCT LIKE CONCAT('%',#{product},'%')
						</otherwise>
					 </choose>
			 	</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
				   AND CONCAT(PRODUCT, '||', VERSION) IN (SELECT CONCAT(PRODUCT, '||', VERSION) FROM NVD_DATA_V3 WHERE CVE_ID = #{cveId})
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(version)">
				   AND VERSION LIKE CONCAT (#{version},'%')
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(filterCondition)">
					${filterCondition}
				</if>
		) A
		<include refid="orderby"/>
		<include refid="limitPage"/>
	</select>
	
	<select id="checkVulnDataCnt" parameterType="oss.fosslight.domain.Vulnerability" resultType="int">
		SELECT 
			COUNT(1) 
		FROM NVD_DATA_V3 T1 
			INNER JOIN NVD_CVE_V3 T2 ON T1.CVE_ID = T2.CVE_ID
		WHERE 1=1
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
			AND T1.CVE_ID = #{cveId}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(vulnSummary)">
			<if test="!@oss.fosslight.util.StringUtil@equalsIgnoreCase(ossNameAllSearchFlag,'Y')">
				AND T2.VULN_SUMMARY LIKE CONCAT('%',#{vulnSummary},'%')
			</if>
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(product)">
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equalsIgnoreCase(ossNameAllSearchFlag,'Y')">
					AND (
						T1.PRODUCT = #{product}
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknames)">
			  			    <foreach item="item" index="index" collection="ossNicknames">
								OR T1.PRODUCT = #{item}
							</foreach>
						</if>
					)
				</when>
				<otherwise>
					AND T1.PRODUCT LIKE CONCAT('%',#{product},'%')
				</otherwise>
			</choose>
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(version)">
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equalsIgnoreCase(ossNameAllSearchFlag,'Y')">
					AND T1.VERSION = #{version}
				</when>
				<otherwise>
					AND T1.VERSION LIKE CONCAT (#{version},'%')
				</otherwise>
			</choose>
		</if>
		/* 2018-07-25 choye 추가 */
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(filterCondition)">
			${filterCondition}
		</if>
	</select>
	
	<!-- OSS Name 자동완성 -->
	<select id="selectVulnerabilityOSSNameAutoComplete" resultType="String">
		SELECT PRODUCT FROM NVD_DATA_V3 GROUP BY PRODUCT ORDER BY PRODUCT ASC
	</select>
	
	<!-- OSS Version 자동완성 -->
	<select id="selectVulnerabilityOSSVersionAutoComplete" parameterType="String" resultType="String">
		SELECT VERSION 
		FROM NVD_DATA_V3 
		WHERE PRODUCT= #{name}
		GROUP BY VERSION 
		ORDER BY VERSION ASC
	</select>
	
	<!-- CVE_ID 자동완성 -->
	<select id="selectVulnerabilityCveIdAutoComplete" resultType="String">
		SELECT CVE_ID 
		FROM NVD_CVE_V3 
		ORDER BY CVE_ID ASC
	</select>
	
	<select id="getVulnListByOssNameCnt" parameterType="oss.fosslight.domain.OssMaster" resultType="int">
		SELECT COUNT(*) AS CNT
		  FROM (
			<!-- exact match -->
				SELECT DATA.PRODUCT
					 , DATA.VERSION
					 , CVE.CVSS_SCORE
					 , CVE.CVE_ID
					 , CVE.VULN_SUMMARY
					 , CVE.MODI_DATE
					 <if test="@oss.fosslight.util.StringUtil@equals('VERSION', sidx)">
						, (CASE WHEN DATA.VERSION = '' THEN 1 WHEN DATA.VERSION REGEXP '^[0-9\.]+' THEN 2 WHEN DATA.VERSION REGEXP '^[a-z]+' THEN 3 ELSE 4 END) AS SEQ 
						, SUBSTRING_INDEX((CASE WHEN DATA.VERSION REGEXP '^[0-9]+' THEN DATA.VERSION END), '.', 1)+0 AS MAJOR_VERSION 
						, IF(DATA.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN DATA.VERSION REGEXP '^[0-9]+' THEN DATA.VERSION END), '.', 2), '.', -1)+0 , NULL) AS MINOR_VERSION 
						, IF(DATA.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN DATA.VERSION REGEXP '^[0-9]+' THEN DATA.VERSION END), '.', 3), '.', -1)+0 , NULL) AS PATCH_VERSION
						, LENGTH(DATA.VERSION) AS VERSION_LEN
						, ASCII(SUBSTRING(DATA.VERSION, 1)) AS ASCII
					 </if>
				  FROM (
				  		SELECT PRODUCT
				 			 , VERSION
				 			 , CVE_ID
				  		  FROM NVD_DATA_V3
				  		 WHERE (
				  		 		PRODUCT = #{ossName}
				  		 		<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknames)">
					  			    <foreach item="item" index="index" collection="ossNicknames">
										OR PRODUCT = #{item}
									</foreach>
								</if>
				 				)
				 		 <if test="@oss.fosslight.util.StringUtil@notEquals('-', ossVersion)">
				 		   AND VERSION = #{ossVersion}
				 		 </if>
				 	   ) DATA
				 INNER JOIN NVD_CVE_V3 CVE
				    ON DATA.CVE_ID = CVE.CVE_ID
		  ) A
		  WHERE 1 = 1
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(filterCondition)">
			${filterCondition}
		</if> 
	</select>
	
	<select id="getVulnListByOssName" parameterType="oss.fosslight.domain.OssMaster" resultType="oss.fosslight.domain.Vulnerability">
		SELECT A.*
		  FROM (
				SELECT DATA.PRODUCT
					 , DATA.VERSION
					 , CVE.CVSS_SCORE
					 , CVE.CVE_ID
					 , CVE.VULN_SUMMARY
					 , CVE.MODI_DATE
					 <if test="@oss.fosslight.util.StringUtil@equals('VERSION', sidx)">
						, (CASE WHEN DATA.VERSION = '' THEN 1 WHEN DATA.VERSION REGEXP '^[0-9\.]+' THEN 2 WHEN DATA.VERSION REGEXP '^[a-z]+' THEN 3 ELSE 4 END) AS SEQ 
						, SUBSTRING_INDEX((CASE WHEN DATA.VERSION REGEXP '^[0-9]+' THEN DATA.VERSION END), '.', 1)+0 AS MAJOR_VERSION 
						, IF(DATA.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN DATA.VERSION REGEXP '^[0-9]+' THEN DATA.VERSION END), '.', 2), '.', -1)+0 , NULL) AS MINOR_VERSION 
						, IF(DATA.VERSION REGEXP '[\.]{1}' , SUBSTRING_INDEX(SUBSTRING_INDEX((CASE WHEN DATA.VERSION REGEXP '^[0-9]+' THEN DATA.VERSION END), '.', 3), '.', -1)+0 , NULL) AS PATCH_VERSION
						, LENGTH(DATA.VERSION) AS VERSION_LEN
						, ASCII(SUBSTRING(DATA.VERSION, 1)) AS ASCII
					 </if>
				  FROM (
				  		SELECT PRODUCT
				 			 , VERSION
				 			 , CVE_ID
				  		  FROM NVD_DATA_V3
				  		 WHERE (
				  		 		PRODUCT = #{ossName}
				  		 		<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossNicknames)">
					  			    <foreach item="item" index="index" collection="ossNicknames">
										OR PRODUCT = #{item}
									</foreach>
								</if>
				 				)
				 		 <if test="@oss.fosslight.util.StringUtil@notEquals('-', ossVersion)">
				 		   AND VERSION = #{ossVersion}
				 		 </if>
				 	   ) DATA
				 INNER JOIN NVD_CVE_V3 CVE
				    ON DATA.CVE_ID = CVE.CVE_ID
		  ) A
		  WHERE 1 = 1
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(filterCondition)">
			${filterCondition}
		</if> 
		<include refid="orderby"/>
		<include refid="limitPage"/>
	</select>
	
	<update id="updateOssRecheckVulnFlag">
		UPDATE OSS_MASTER SET VULN_CPE_NM = NULL, CVSS_SCORE = NULL, CVE_ID = NULL, VULN_YN = NULL, VULN_RECHECK = 'N', VULN_DATE = NULL WHERE VULN_RECHECK = 'Y'
	</update>
	<select id="selectNvdTotalCount" resultType="int">SELECT COUNT(1) FROM NVD_DATA_SCORE_V3</select>
   <select id="selectNvdInfo" parameterType="oss.fosslight.domain.OssMaster" resultType="HashMap">
    	SELECT PRODUCT, VERSION, CVE_ID, CVSS_SCORE, MODI_DATE 
    	FROM NVD_DATA_SCORE_V3 
    	WHERE VERSION = #{ossVersion} AND ( PRODUCT = #{ossName}
		<if test="ossNicknames != null">
			<foreach item="item" collection="ossNicknames">
				OR PRODUCT = #{item}
			</foreach>
		</if>
		)
		ORDER BY CVSS_SCORE DESC LIMIT 1
    </select>
    
    <insert id="insertNvdOssHis" parameterType="oss.fosslight.domain.OssMaster">
    	INSERT INTO NVD_OSS_HIS (OSS_ID, OSS_NAME, OSS_VERSION, CVE_ID, CVSS_SCORE, CVE_ID_TO, CVSS_SCORE_TO) VALUES (#{ossId}, #{ossName}, #{ossVersion}, #{cveId}, #{cvssScore}, #{cveIdTo}, ${cvssScoreTo});
    </insert>
    <update id="deleteOssVulnInfo" parameterType="String">
		UPDATE OSS_MASTER SET VULN_CPE_NM = NULL, CVSS_SCORE = NULL, CVE_ID = NULL, VULN_YN = 'N', VULN_DATE = NULL WHERE OSS_ID = #{ossId}
    </update>
    <update id="updateOssVulnInfoNew" parameterType="oss.fosslight.domain.OssMaster">
    	UPDATE OSS_MASTER SET CVSS_SCORE = #{cvssScore}, VULN_YN = 'Y', VULN_DATE = NOW(), CVE_ID = #{cveId} WHERE OSS_ID = #{ossId}
    </update>
    
	<select id="selectUsedVulnerabilityOssProject" parameterType="oss.fosslight.domain.OssMaster" resultType="String">
		SELECT 
			T1.PRJ_ID 
		FROM PROJECT_MASTER T1
		WHERE
			T1.USE_YN = 'Y'
			AND T1.IDENTIFICATION_STATUS = 'CONF'
			AND EXISTS (
					SELECT 1 
					FROM OSS_COMPONENTS T2 
					WHERE 
						T1.PRJ_ID = T2.REFERENCE_ID 
						AND T2.REFERENCE_DIV = '50' 
						AND ( OSS_NAME = #{ossName}
						<foreach collection="ossNames" item="item" open="OR " close="" separator="OR">
							OSS_NAME = #{item}
						</foreach>
						)
						AND OSS_VERSION = #{ossVersion}
			)
	</select>
	
    <!-- CVE ID 가 자주 변경되지 않도록 CVE_ID 순으로 정렬한다. -->
    <select id="selectNvdInfoWithOutVer" parameterType="oss.fosslight.domain.OssMaster" resultType="HashMap">
		SELECT T2.PRODUCT, T2.VERSION, T2.CVE_ID, T2.CVSS_SCORE, T2.MODI_DATE FROM (
	    	SELECT PRODUCT, MAX(CVSS_SCORE) AS CVSS_SCORE
	    	FROM NVD_DATA_SCORE_V3 
	    	WHERE PRODUCT = #{ossName}
			  AND VERSION = '-'
	    	GROUP BY PRODUCT
    	)  T1
    	INNER JOIN NVD_DATA_SCORE_V3 T2 ON T1.PRODUCT = T2.PRODUCT AND T1.CVSS_SCORE = T2.CVSS_SCORE
    	ORDER BY CVE_ID
    	LIMIT 1
    </select>
</mapper>