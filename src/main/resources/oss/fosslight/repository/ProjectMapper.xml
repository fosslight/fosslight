<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="oss.fosslight.repository.ProjectMapper">

	<sql id="limitPage">
		LIMIT #{startIndex}, #{pageListSize}
	</sql>
    <sql id="orderby">
    	<if test="@oss.fosslight.util.StringUtil@isEmpty(sidx)">ORDER BY PRJ_ID desc</if>
    	<if test="!@oss.fosslight.util.StringUtil@isEmpty(sidx) and !@oss.fosslight.util.StringUtil@isEmpty(sord)">
    		<choose>
	    		<when test="@oss.fosslight.util.StringUtil@equals('PRJ_ID', sidx)">
   	 				ORDER BY PRJ_ID
   	 			</when>
   	 			<when test="@oss.fosslight.util.StringUtil@equals('STATUS', sidx)">
   	 				ORDER BY STATUS
   	 			</when>
   	 			<when test="@oss.fosslight.util.StringUtil@equals('PRJ_NAME', sidx) and @oss.fosslight.util.StringUtil@equals('asc', sord)">
    				ORDER BY (
    				  CASE 
    					WHEN PRJ_NAME REGEXP '^[a-zA-Z].+$' then 1 
						WHEN PRJ_NAME REGEXP '^[가-힣].+$' then 2 
						WHEN PRJ_NAME REGEXP '^[0-9].+$' then 3 
						ELSE 4 
				      END), PRJ_NAME
    			</when>
				<when test="@oss.fosslight.util.StringUtil@equals('PRJ_NAME', sidx) and @oss.fosslight.util.StringUtil@equals('desc', sord)">
    				ORDER BY (
    				  CASE 
    					WHEN PRJ_NAME REGEXP '^[a-zA-Z].+$' then 4 
						WHEN PRJ_NAME REGEXP '^[가-힣].+$' then 3 
						WHEN PRJ_NAME REGEXP '^[0-9].+$' then 2 
						ELSE 1 
				      END), PRJ_NAME
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('IDENTIFICATION_STATUS', sidx)">
    				ORDER BY (
    					CASE IDENTIFICATION_STATUS
    						WHEN '' THEN 1
	    					WHEN 'NA' THEN 2
	    					WHEN 'PROG' THEN 3
	    					WHEN 'REQ' THEN 4
	    					WHEN 'REV' THEN 5
	    					WHEN 'CONF' THEN 6
	    				END
    				)
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('VERIFICATION_STATUS', sidx)">
    				ORDER BY (
    					CASE 
    						WHEN IDENTIFICATION_STATUS != 'CONF' THEN 1
    						WHEN VERIFICATION_STATUS = '' AND IDENTIFICATION_STATUS = 'CONF' AND IFNULL(A.COMPLETE_YN, 'N') != 'Y' THEN 2
    						WHEN VERIFICATION_STATUS = '' AND A.COMPLETE_YN = 'Y' THEN 3
    						WHEN VERIFICATION_STATUS = 'NA' THEN 4
	    					WHEN VERIFICATION_STATUS = 'PROG' THEN 5
	    					WHEN VERIFICATION_STATUS = 'REQ' THEN 6
	    					WHEN VERIFICATION_STATUS = 'REV' THEN 7
	    						WHEN VERIFICATION_STATUS = 'CONF' THEN 8
	    				END
    				)
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('DESTRIBUTION_STATUS', sidx)">
    				ORDER BY (
    					CASE
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'ERROR' THEN 7
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'DONE' THEN 6
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'RSV' THEN 5
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'PROG' THEN 4
							WHEN (IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'NA' AND DESTRIBUTION_STATUS = 'NA') OR (IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND DISTRIBUTE_TARGET = 'NA' AND IFNULL(A.COMPLETE_YN, 'N') = 'Y') THEN 3
							WHEN (IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND DESTRIBUTION_STATUS = 'NA')  OR (VERIFICATION_STATUS != '' AND VERIFICATION_STATUS != 'CONF' AND IFNULL(A.COMPLETE_YN, 'N') = 'Y') OR (DESTRIBUTION_STATUS = '' AND IFNULL(A.COMPLETE_YN, 'N') = 'Y') THEN 3
							WHEN VERIFICATION_STATUS = 'CONF' AND IDENTIFICATION_STATUS = 'CONF' AND DESTRIBUTION_STATUS = '' AND IFNULL(A.COMPLETE_YN, 'N') != 'Y' THEN 2
							ELSE 1
						END
    				) 
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('DISTRIBUTION_TYPE', sidx)">
    				ORDER BY (SELECT CD.CD_DTL_NM FROM T2_CODE_DTL CD WHERE CD.CD_NO = '207' AND CD.CD_DTL_NO =  DISTRIBUTION_TYPE)
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('DIVISION', sidx)">
    				ORDER BY (SELECT CD.CD_DTL_NM FROM T2_CODE_DTL CD WHERE CD.CD_NO = '200' AND CD.CD_DTL_NO =  DIVISION)
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('CREATOR', sidx)">
    				ORDER BY CREATOR
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('CREATED_DATE', sidx)">
    				ORDER BY DATE_FORMAT(CREATED_DATE, '%Y%m%d')
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('MODIFIED_DATE', sidx)">
    				ORDER BY DATE_FORMAT(MODIFIED_DATE, '%Y%m%d')
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('REVIEWER', sidx)">
    				ORDER BY (SELECT USER_NAME FROM T2_USERS WHERE USER_ID = REVIEWER) IS NULL ASC, (SELECT USER_NAME FROM T2_USERS WHERE USER_ID = REVIEWER)
    			</when>
    			<when test="@oss.fosslight.util.StringUtil@equals('COMMENT', sidx)">
    				ORDER BY COMMENT
    			</when>
    		</choose>
    		<if test="!@oss.fosslight.util.StringUtil@isEmpty(sord)">
    			<choose>
  	  				<when test="@oss.fosslight.util.StringUtil@equals('asc', sord)">
    					ASC
    				</when>
    				<when test="@oss.fosslight.util.StringUtil@equals('desc', sord)">
    					DESC
    				</when>
    			</choose>
    		</if>
    	</if>
    </sql>
	
	<select id="selectProjectTotalCount" parameterType="oss.fosslight.domain.Project" resultType="int">
		/* ProjectMapper.selectProjectTotalCount */
		SELECT COUNT(*) FROM (
			SELECT 
					  T1.PRJ_ID
					, T1.PRJ_NAME
					, T1.PRJ_VERSION
					, T1.DISTRIBUTION_TYPE
					, T1.OSS_NOTICE_DUE_DATE
					, T1.COMMENT
					, T1.OS_TYPE
					, T1.OS_TYPE_ETC
					, CASE 
							WHEN T1.COMPLETE_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'COMP' 
							WHEN T1.DROP_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'DROP'
							WHEN T1.IDENTIFICATION_STATUS = 'REV' OR T1.VERIFICATION_STATUS = 'REV'	THEN 'REV' 
							WHEN T1.IDENTIFICATION_STATUS = 'REQ' OR T1.VERIFICATION_STATUS = 'REQ' OR STATUS_REQUEST_YN = 'Y'	THEN 'REQ' 
							WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'DONE' THEN 'REV'
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'NA' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
							ELSE 'PROG' 
						END STATUS
					, T1.PRIORITY
					, IFNULL(T1.IDENTIFICATION_STATUS, '') AS IDENTIFICATION_STATUS
					, IFNULL(T1.VERIFICATION_STATUS, '') AS VERIFICATION_STATUS
					, IFNULL(T1.DESTRIBUTION_STATUS, '') AS DESTRIBUTION_STATUS
					, T1.IDENTIFICATION_SUB_STATUS_PARTNER 
					, T1.IDENTIFICATION_SUB_STATUS_SRC
					, T1.IDENTIFICATION_SUB_STATUS_BAT
					, T1.IDENTIFICATION_SUB_STATUS_BIN
					, T1.IDENTIFICATION_SUB_STATUS_ANDROID
					, IFNULL(T1.SRC_CSV_FILE_ID, '') SRC_CSV_FILE_ID
					, IFNULL(T1.SRC_ANDROID_CSV_FILE_ID, '') SRC_ANDROID_CSV_FILE_ID 
					, IFNULL(T1.SRC_ANDROID_NOTICE_FILE_ID, '') SRC_ANDROID_NOTICE_FILE_ID
					, IFNULL(T1.SRC_ANDROID_NOTICE_XML_ID, '') SRC_ANDROID_NOTICE_XML_ID
					, IFNULL(T1.PACKAGE_FILE_ID, '') PACKAGE_FILE_ID
					, IFNULL(T1.NOTICE_FILE_ID, '') NOTICE_FILE_ID
					, T1.REVIEWER
					, T1.DIVISION
					, IFNULL((SELECT USER_NAME FROM T2_USERS WHERE T1.CREATOR  = USER_ID), T1.CREATOR) AS CREATOR
					, T1.CREATED_DATE
					, IFNULL((SELECT USER_NAME FROM T2_USERS WHERE T1.MODIFIER  = USER_ID), T1.MODIFIER) AS MODIFIER
					, T1.MODIFIED_DATE
			FROM PROJECT_MASTER T1
	    WHERE T1.USE_YN = 'Y'
			<if test="@oss.fosslight.util.StringUtil@equals('10', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_PARTNER = 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('11', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_SRC= 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('12', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_BAT = 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('15', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_BIN = 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('14', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_ANDROID = 'Y'
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationStatus)">
			AND T1.IDENTIFICATION_STATUS = #{identificationStatus}
			</if>
<!--		<if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
				AND (
					T1.CREATOR = #{loginUserName} 
						OR EXISTS (
						SELECT 1
						  FROM PROJECT_WATCHER A1 -->
						 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{loginUserName} -->
<!--					 WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{loginUserName} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
						)
					<if test="!@oss.fosslight.util.StringUtil@isEmpty(publicYn) and @oss.fosslight.util.StringUtil@equals('Y', publicYn)">
						OR PUBLIC_YN = 'Y'
					</if>
				)
			</if> -->
			<if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(publicYn) and @oss.fosslight.util.StringUtil@equals('N', publicYn)">
					AND (
						T1.CREATOR = #{loginUserName} 
						OR EXISTS (
						SELECT 1
						  FROM PROJECT_WATCHER A1
					     WHERE A1.PRJ_ID = T1.PRJ_ID AND A1.USER_ID = #{loginUserName}
						)
					)
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
				AND T1.PRJ_ID = #{prjId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjName)">
				AND T1.PRJ_NAME LIKE CONCAT('%', REGEXP_REPLACE(#{prjName}, '_', '\\\\_'),'%') 
		 	</if>	
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjVersion)">
				AND T1.PRJ_VERSION LIKE CONCAT(REGEXP_REPLACE(#{prjVersion}, '_', '\\\\_'),'%')
		 	</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributionType)">
				AND T1.DISTRIBUTION_TYPE = #{distributionType}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schStartDate)">
				AND DATE_FORMAT(T1.CREATED_DATE,'%Y%m%d') <![CDATA[>=]]> #{schStartDate}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schEndDate)">
				AND DATE_FORMAT(T1.CREATED_DATE,'%Y%m%d') <![CDATA[<=]]> #{schEndDate}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(creator)">
				AND T1.CREATOR IN (SELECT X.USER_ID FROM T2_USERS X WHERE X.USER_NAME LIKE CONCAT('%',#{creator},'%'))
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(reviewer)">
				<if test='reviewer.equals("N/A")'>
				AND T1.REVIEWER IS NULL
				</if>
				<if test='!reviewer.equals("N/A")'>
				AND T1.REVIEWER IN (SELECT X.USER_ID FROM T2_USERS X WHERE X.USER_NAME LIKE CONCAT('%',#{reviewer},'%')) 
				</if>
			</if>			
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName) 
					  or !@oss.fosslight.util.StringUtil@isEmpty(licenseName)
			          or !@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
				AND EXISTS(SELECT 1 
		                            FROM OSS_COMPONENTS X 
		                   LEFT OUTER JOIN OSS_COMPONENTS_LICENSE Y 
		                                ON X.COMPONENT_ID = Y.COMPONENT_ID 
		                   LEFT OUTER JOIN LICENSE_MASTER Z ON Y.LICENSE_ID = Z.LICENSE_ID
		                  WHERE  T1.PRJ_ID = X.REFERENCE_ID
		                  		AND X.EXCLUDE_YN <![CDATA[<>]]> 'Y' AND Y.EXCLUDE_YN <![CDATA[<>]]> 'Y' AND X.REFERENCE_DIV != '20'
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName)">
		                         AND ( X.OSS_NAME = #{ossName}
		                         	<if test="ossNickNames != null">
										<foreach item="item" index="index" collection="ossNickNames">
											OR X.OSS_NAME = #{item}
										</foreach>
		                         	</if>
		                         )
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossVersion)">
								AND X.OSS_VERSION = #{ossVersion}
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(licenseName)">
		                         AND (Y.LICENSE_NAME = #{licenseName} OR Z.LICENSE_NAME = #{licenseName} OR Z.SHORT_IDENTIFIER = #{licenseName})
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
		                         AND X.REF_PARTNER_ID IN (SELECT P.PARTNER_ID 
		                                                    FROM PARTNER_MASTER P
		                                                   WHERE P.USE_YN = 'Y' AND P.STATUS = 'CONF'
		                                                     AND P.PARTNER_NAME LIKE CONCAT('%',REGEXP_REPLACE(#{refPartnerId}, '_', '\\\\_'),'%'))
								</if>
							)
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
		       AND EXISTS(SELECT 1 
		                           FROM BINARY_MASTER X 
		                  LEFT OUTER JOIN T2_FILE Y 
		                               ON Y.FILE_SEQ = X.BINARY_FILE_ID 
		                         WHERE X.BAT_STATUS = '60' AND T1.PRJ_ID = X.PRJ_ID 
		                             AND Y.ORIG_NM LIKE CONCAT('%',REGEXP_REPLACE(#{binaryName}, '_', '\\\\_'),'%'))
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schBinaryName)">
			<!-- Project List에서 검색 -->
				AND EXISTS (
					SELECT 1 
					FROM 
						OSS_COMPONENTS SUB_B1 
							INNER JOIN PROJECT_MASTER SUB_B2 
								ON SUB_B2.PRJ_ID = SUB_B1.REFERENCE_ID AND SUB_B2.USE_YN = 'Y'
					WHERE T1.PRJ_ID = SUB_B2.PRJ_ID 
						AND SUB_B1.EXCLUDE_YN != 'Y'
						AND SUB_B1.REFERENCE_DIV IN ('10','11','12','14','15')
						AND SUB_B1.BINARY_NAME LIKE CONCAT('%', #{schBinaryName},'%')
				)
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(modelName)">
				AND EXISTS (SELECT 1 
		                             FROM PROJECT_MODEL M 
		                           WHERE T1.PRJ_ID = M.PRJ_ID 
		                               AND MODEL_NAME LIKE CONCAT('%',REGEXP_REPLACE(#{modelName}, '_', '\\\\_'),'%'))
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(comment)">
				AND T1.COMMENT LIKE CONCAT('%', #{comment}, '%')
			</if>
			
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(userComment)">
				AND EXISTS( SELECT 1 FROM COMMENTS_HISTORY COMM 
							 WHERE COMM.USE_YN = 'Y' 
							   AND COMM.REFERENCE_ID = T1.PRJ_ID
							   AND COMM.REFERENCE_DIV IN ('19', '10', '12', '14') 
							   AND REGEXP_REPLACE(COMM.CONTENTS, <![CDATA['<img[^>]+>']]>, '') LIKE CONCAT('%',#{userComment},'%') )
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(networkServerType)">
				AND T1.NETWORK_SERVER_TYPE = #{networkServerType}
			</if>
		) A
		WHERE 1=1
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjDivision)">
				AND A.DIVISION = #{prjDivision}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(arrStatuses)">
				AND
				<foreach collection="arrStatuses" item="item" open="(" close=")" separator="OR">
					A.STATUS = #{item}
				</foreach>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(priority)">
				AND A.PRIORITY = #{priority}
			</if>
	</select>
	
	<select id="selectProjectList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		/* ProjectMapper.selectProjectList */
		SELECT * FROM (
			SELECT 
					  T1.PRJ_ID
					, T1.PRJ_NAME
					, T1.PRJ_VERSION
					, T1.DISTRIBUTION_TYPE
					, T1.OSS_NOTICE_DUE_DATE
					, T1.COMMENT
					, T1.OS_TYPE
					, T1.OS_TYPE_ETC
					, CASE 
							WHEN T1.COMPLETE_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'COMP' 
							WHEN T1.DROP_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'DROP'
							WHEN T1.IDENTIFICATION_STATUS = 'REV' OR T1.VERIFICATION_STATUS = 'REV' THEN 'REV' 
							WHEN T1.IDENTIFICATION_STATUS = 'REQ' OR T1.VERIFICATION_STATUS = 'REQ' OR STATUS_REQUEST_YN = 'Y' THEN 'REQ'
							WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'DONE' THEN 'REV'
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'NA' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
							ELSE 'PROG' 
						END STATUS
					, T1.PRIORITY
					, IFNULL(T1.IDENTIFICATION_STATUS, '') AS IDENTIFICATION_STATUS
					, IFNULL(T1.VERIFICATION_STATUS, '') AS VERIFICATION_STATUS
					, IFNULL(T1.DESTRIBUTION_STATUS, '') AS DESTRIBUTION_STATUS
					, T1.IDENTIFICATION_SUB_STATUS_PARTNER 
					, T1.IDENTIFICATION_SUB_STATUS_DEP
					, T1.IDENTIFICATION_SUB_STATUS_SRC
					, CASE WHEN IFNULL(IDENTIFICATION_SUB_STATUS_BAT, 'Y') = 'N' THEN 'N'
					  <if test="@oss.fosslight.util.StringUtil@equals('Y', identificationSubStatusBat)">
					  CASE WHEN IFNULL(IDENTIFICATION_SUB_STATUS_BAT, 'Y') = 'Y' AND EXISTS (
										SELECT 1 
										FROM BINARY_MASTER ST1
										WHERE ST1.USE_YN = 'Y'
											AND ST1.PRJ_ID = T1.PRJ_ID
					  ) THEN 'Y'
					  </if>
					  END AS IDENTIFICATION_SUB_STATUS_BAT
					, T1.IDENTIFICATION_SUB_STATUS_BIN
					, T1.IDENTIFICATION_SUB_STATUS_ANDROID
					, IFNULL(T1.SRC_CSV_FILE_ID, '') SRC_CSV_FILE_ID
					, IFNULL(T1.SRC_ANDROID_CSV_FILE_ID, '') SRC_ANDROID_CSV_FILE_ID 
					, IFNULL(T1.SRC_ANDROID_NOTICE_FILE_ID, '') SRC_ANDROID_NOTICE_FILE_ID
					, IFNULL(T1.SRC_ANDROID_NOTICE_XML_ID, '') SRC_ANDROID_NOTICE_XML_ID
					, IFNULL(T1.SRC_ANDROID_RESULT_FILE_ID, '') SRC_ANDROID_RESULT_FILE_ID
					, CASE WHEN T1.VERIFICATION_STATUS = 'CONF' THEN IFNULL(T1.PACKAGE_FILE_ID, '') ELSE '' END AS PACKAGE_FILE_ID
					, CASE WHEN T1.VERIFICATION_STATUS = 'CONF' THEN IFNULL(T1.PACKAGE_FILE_ID2, '') ELSE '' END AS PACKAGE_FILE_ID2
					, CASE WHEN T1.VERIFICATION_STATUS = 'CONF' THEN IFNULL(T1.PACKAGE_FILE_ID3, '') ELSE '' END AS PACKAGE_FILE_ID3
					, CASE WHEN T1.VERIFICATION_STATUS = 'CONF' THEN IFNULL(T1.NOTICE_FILE_ID, '') ELSE '' END AS NOTICE_FILE_ID
					, T1.REVIEWER
					, T1.DIVISION
					, IFNULL((SELECT USER_NAME FROM T2_USERS WHERE T1.CREATOR  = USER_ID), T1.CREATOR) AS CREATOR
					, T1.CREATED_DATE
					, IFNULL((SELECT USER_NAME FROM T2_USERS WHERE T1.MODIFIER  = USER_ID), T1.MODIFIER) AS MODIFIER
					, T1.MODIFIED_DATE
					, 'N' AS VULN_YN
					, 0 AS CVSS_SCORE
					, (SELECT COUNT(1) 
				         FROM OSS_COMPONENTS OC 
					    INNER JOIN OSS_COMPONENTS_LICENSE OCL 
					       ON OC.COMPONENT_ID = OCL.COMPONENT_ID 
						  AND  OCL.EXCLUDE_YN <![CDATA[<>]]> 'Y'
					     LEFT OUTER JOIN LICENSE_MASTER LM 
						   ON OCL.LICENSE_ID = LM.LICENSE_ID 
						  AND LM.USE_YN = 'Y'
					    WHERE OC.REFERENCE_ID = T1.PRJ_ID AND OC.REFERENCE_DIV = '13'
					      AND LM.LICENSE_TYPE NOT IN ('NA', 'PF')) AS IDENTIFICATION_SUB_STATUS_BOM 
					, T1.DISTRIBUTE_TARGET
					, T1.COMPLETE_YN
					, T1.STATUS_REQUEST_YN
					, T5.NOTICE_TYPE
					, T5.NOTICE_TYPE_ETC
					, T1.PUBLIC_YN
			FROM PROJECT_MASTER T1
							LEFT JOIN T2_FILE T3 ON T3.FILE_ID = T1.SRC_ANDROID_NOTICE_FILE_ID
							LEFT JOIN T2_FILE T4 ON T4.FILE_ID = T1.SRC_ANDROID_RESULT_FILE_ID
							LEFT JOIN OSS_NOTICE T5 ON T1.PRJ_ID = T5.PRJ_ID
							
	    WHERE T1.USE_YN = 'Y'
			<if test="@oss.fosslight.util.StringUtil@equals('10', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_PARTNER = 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('11', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_SRC= 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('12', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_BAT = 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('15', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_BIN = 'Y'
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('14', code)">
			AND T1.IDENTIFICATION_SUB_STATUS_ANDROID = 'Y'
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationStatus)">
			AND T1.IDENTIFICATION_STATUS = #{identificationStatus}
			</if>
<!-- 		<if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
				AND (
					T1.CREATOR = #{loginUserName} 
						OR EXISTS (
						SELECT 1
						  FROM PROJECT_WATCHER A1 --> 
						 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{loginUserName} -->
<!--					 WHERE A1.PRJ_ID = T1.PRJ_ID 
						   AND (A1.USER_ID = #{loginUserName}
						   		OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
						)
					<if test="!@oss.fosslight.util.StringUtil@isEmpty(publicYn) and @oss.fosslight.util.StringUtil@equals('Y', publicYn)">
						OR PUBLIC_YN = 'Y'
					</if>
				)
			</if> --> 
			<if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(publicYn) and @oss.fosslight.util.StringUtil@equals('N', publicYn)">
					AND (
						T1.CREATOR = #{loginUserName} 
						OR EXISTS (
						SELECT 1
						  FROM PROJECT_WATCHER A1
					     WHERE A1.PRJ_ID = T1.PRJ_ID AND A1.USER_ID = #{loginUserName}
						)
					)
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
				AND T1.PRJ_ID = #{prjId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjName)">
				AND T1.PRJ_NAME LIKE CONCAT('%',REGEXP_REPLACE(#{prjName}, '_', '\\\\_'),'%') 
		 	</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjVersion)">
				AND T1.PRJ_VERSION LIKE CONCAT(REGEXP_REPLACE(#{prjVersion}, '_', '\\\\_'),'%')
		 	</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributionType)">
				AND T1.DISTRIBUTION_TYPE = #{distributionType}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schStartDate)">
				AND DATE_FORMAT(T1.CREATED_DATE,'%Y%m%d') <![CDATA[>=]]> #{schStartDate}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schEndDate)">
				AND DATE_FORMAT(T1.CREATED_DATE,'%Y%m%d') <![CDATA[<=]]> #{schEndDate}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(creator)">
				AND T1.CREATOR IN (SELECT X.USER_ID FROM T2_USERS X WHERE X.USER_NAME LIKE CONCAT('%',#{creator},'%')) 
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(reviewer)">
				<if test='reviewer.equals("N/A")'>
				AND T1.REVIEWER IS NULL
				</if>
				<if test='!reviewer.equals("N/A")'>
				AND T1.REVIEWER IN (SELECT X.USER_ID FROM T2_USERS X WHERE X.USER_NAME LIKE CONCAT('%',#{reviewer},'%')) 
				</if>
			</if>			
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(watchers)">
				<foreach collection="watchers" index="index" item="watcher" separator=",">
					AND T1.PRJ_ID IN (
					SELECT A.PRJ_ID AS WATCHER FROM PROJECT_WATCHER A WHERE T1.PRJ_ID = A.PRJ_ID AND (A.USER_ID LIKE CONCAT('%',#{watcher},'%') OR A.EMAIL LIKE CONCAT('%',#{watcher},'%')))
				</foreach>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName) 
					  or !@oss.fosslight.util.StringUtil@isEmpty(licenseName)
			          or !@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
				AND EXISTS(SELECT 1 
		                            FROM OSS_COMPONENTS X 
		                   LEFT OUTER JOIN OSS_COMPONENTS_LICENSE Y 
		                                ON X.COMPONENT_ID = Y.COMPONENT_ID 
		                   LEFT OUTER JOIN LICENSE_MASTER Z ON Y.LICENSE_ID = Z.LICENSE_ID
		                  WHERE  T1.PRJ_ID = X.REFERENCE_ID
		                  		AND X.EXCLUDE_YN <![CDATA[<>]]> 'Y' AND Y.EXCLUDE_YN <![CDATA[<>]]> 'Y' AND X.REFERENCE_DIV != '20'
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName)">
		                         AND ( X.OSS_NAME = #{ossName}
		                         	<if test="ossNickNames != null">
										<foreach item="item" index="index" collection="ossNickNames">
											OR X.OSS_NAME = #{item}
										</foreach>
		                         	</if>
		                         )
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossVersion)">
								AND X.OSS_VERSION = #{ossVersion}
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(licenseName)">
		                         AND (Y.LICENSE_NAME = #{licenseName} OR Z.LICENSE_NAME = #{licenseName} OR Z.SHORT_IDENTIFIER = #{licenseName})
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
		                         AND X.REF_PARTNER_ID IN (SELECT P.PARTNER_ID 
		                                                    FROM PARTNER_MASTER P
		                                                   WHERE P.USE_YN = 'Y' AND P.STATUS = 'CONF'
		                                                     AND P.PARTNER_NAME LIKE CONCAT('%',REGEXP_REPLACE(#{refPartnerId}, '_', '\\\\_'),'%'))
								</if>
							)
			</if>
			<!-- 어디서 사용하는 것인지 확인할 필요가 있음 -->
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
		       AND EXISTS(SELECT 1 
		                           FROM BINARY_MASTER X 
		                  LEFT OUTER JOIN T2_FILE Y 
		                               ON Y.FILE_SEQ = X.BINARY_FILE_ID 
		                         WHERE X.BAT_STATUS = '60' AND T1.PRJ_ID = X.PRJ_ID 
		                             AND Y.ORIG_NM LIKE CONCAT('%',REGEXP_REPLACE(#{binaryName}, '_', '\\\\_'),'%'))
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schBinaryName)">
			<!-- Project List에서 검색 -->
				AND EXISTS (
					SELECT 1 
					FROM 
						OSS_COMPONENTS SUB_B1 
							INNER JOIN PROJECT_MASTER SUB_B2 
								ON SUB_B2.PRJ_ID = SUB_B1.REFERENCE_ID AND SUB_B2.USE_YN = 'Y'
					WHERE T1.PRJ_ID = SUB_B2.PRJ_ID 
						AND SUB_B1.EXCLUDE_YN != 'Y'
						AND SUB_B1.REFERENCE_DIV IN ('10','11','12','14','15')
						AND SUB_B1.BINARY_NAME LIKE CONCAT('%', #{schBinaryName},'%')
				)
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(modelName)">
				AND EXISTS (SELECT 1 
		                             FROM PROJECT_MODEL M 
		                           WHERE T1.PRJ_ID = M.PRJ_ID 
		                               AND MODEL_NAME LIKE CONCAT('%',REGEXP_REPLACE(#{modelName}, '_', '\\\\_'),'%'))
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(comment)">
				AND T1.COMMENT LIKE CONCAT('%', #{comment}, '%')
			</if>
			
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(userComment)">
				AND EXISTS( SELECT 1 FROM COMMENTS_HISTORY COMM 
							 WHERE COMM.USE_YN = 'Y' 
							   AND COMM.REFERENCE_ID = T1.PRJ_ID
							   AND COMM.REFERENCE_DIV IN ('19', '10', '12', '14') 
							   AND REGEXP_REPLACE(COMM.CONTENTS, <![CDATA['<img[^>]+>']]>, '') LIKE CONCAT('%',#{userComment},'%') )
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(networkServerType)">
				AND T1.NETWORK_SERVER_TYPE = #{networkServerType}
			</if>
		) A
		WHERE 1=1
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjDivision)">
				AND ( A.DIVISION = #{prjDivision} )
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(arrStatuses)">
				AND
				<foreach collection="arrStatuses" item="item" open="(" close=")" separator="OR">
					A.STATUS = #{item}
				</foreach>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(priority)">
				AND A.PRIORITY = #{priority}
			</if>

		<include refid="orderby"/>
		<include refid="limitPage"/>
	</select>
	
	<update id="updateReviewer" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER 
		   SET REVIEWER = #{reviewer}
		      ,MODIFIER = #{modifier}
		      ,MODIFIED_DATE = now()
		 WHERE PRJ_ID = #{prjId}
	</update>
	
	<update id="updateReject" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER 
		   SET IDENTIFICATION_STATUS = NULL
		   <if test="@oss.fosslight.util.StringUtil@equals('1', identificationStatus)">
		      ,VERIFICATION_STATUS = NULL
		   </if>
		      ,MODIFIER = #{modifier}, MODIFIED_DATE = now()
		 WHERE PRJ_ID = #{prjId}
	</update>
	
	<select id="selectCategoryCode" parameterType="string" resultType="string">
		SELECT 
			CONCAT(CONCAT(T1.CD_ORDER, T2.CD_ORDER), '|', CONCAT(T1.CD_DTL_NO, T2.CD_DTL_NO), '|', T1.CD_DTL_NM, ' > ', T2.CD_DTL_NM ) AS CODE
		FROM T2_CODE_DTL T1 
			INNER JOIN T2_CODE_DTL T2 ON T1.CD_SUB_NO = T2.CD_NO AND T2.USE_YN = 'Y'
		WHERE T1.USE_YN = 'Y' AND T1.CD_NO = #{code}
		ORDER BY T1.CD_ORDER, T2.CD_ORDER
	</select>
	
	<select id="selectProjectMaster" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		/* ProjectMapper.selectProjectMaster */
		SELECT A.PRJ_ID 
			, A.PRJ_NAME 
			, A.PRJ_VERSION 
			, A.DISTRIBUTION_TYPE  
			, A.NETWORK_SERVER_TYPE
			, CASE WHEN B.CONTENTS IS NULL THEN A.COMMENT ELSE B.CONTENTS END AS COMMENT
			, B.COMM_ID AS COMMENT_IDX
			, A.OS_TYPE
			, A.OS_TYPE_ETC 
			, A.DIVISION
			, A.USE_CUSTOM_NOTICE_YN
			, A.IDENTIFICATION_STATUS 
			, A.VERIFICATION_STATUS 
			, A.DESTRIBUTION_STATUS 
			, A.IDENTIFICATION_SUB_STATUS_PARTNER 
			, A.IDENTIFICATION_SUB_STATUS_DEP 
			, A.IDENTIFICATION_SUB_STATUS_SRC 
			, A.IDENTIFICATION_SUB_STATUS_BAT
			, A.IDENTIFICATION_SUB_STATUS_BIN
			, A.IDENTIFICATION_SUB_STATUS_ANDROID  
			, A.COMPLETE_YN 
			, A.DROP_YN
			, A.REVIEWER 
			, A.USE_YN 
			, A.COPY_PRJ_ID
			, A.WITHOUT_VERIFY_YN
			
			/* 다운로드 허용 플래그 */
			<![CDATA[
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x01, 'Y', 'N') AS ALLOW_DOWNLOAD_NOTICE_HTML_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x02, 'Y', 'N') AS ALLOW_DOWNLOAD_NOTICE_TEXT_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x04, 'Y', 'N') AS ALLOW_DOWNLOAD_SIMPLE_HTML_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x08, 'Y', 'N') AS ALLOW_DOWNLOAD_SIMPLE_TEXT_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x10, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_SHEET_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x20, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_RDF_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x40, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_TAG_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x80, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_JSON_YN
			 , IF(A.ALLOW_DOWNLOAD_BIT_FLAG & 0x100, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_YAML_YN
			 ]]>
			
			/** DISTRIBUTION **/
			, A.DISTRIBUTE_MASTER_CATEGORY
	        , A.DISTRIBUTE_NAME 
	        , A.DISTRIBUTE_SOFTWARE_TYPE 
	        , A.DISTRIBUTE_TARGET
	        , A.DISTRIBUTE_DEPLOY_YN 
	        , A.DISTRIBUTE_DEPLOY_TIME 
	        , A.DISTRIBUTE_OSD_KEY
			
			/** FILE_ID **/
			, A.DEP_CSV_FILE_ID
			, A.SRC_CSV_FILE_ID
			, A.SRC_ANDROID_CSV_FILE_ID
			, A.SRC_ANDROID_NOTICE_FILE_ID
			, A.SRC_ANDROID_NOTICE_XML_ID
			, A.SRC_ANDROID_RESULT_FILE_ID
			, A.PACKAGE_FILE_ID
			, A.PACKAGE_FILE_ID2
			, A.PACKAGE_FILE_ID3
			, A.NOTICE_FILE_ID
			, A.REVIEW_REPORT_FILE_ID
			, A.ZIP_FILE_ID
			, A.BIN_CSV_FILE_ID
			, A.BIN_BINARY_FILE_ID
			
			, A.README_YN
			, A.README_CONTENT
			, A.README_FILE_NAME
			, A.VERIFY_FILE_CONTENT
			, A.EXCEPT_FILE_CONTENT
			, A.CREATOR 
			, A.CREATED_DATE
			, A.MODIFIER 
			, A.MODIFIED_DATE 
            , C.USER_NAME PRJ_USER_NAME
            , R.USER_NAME REVIEWER_NAME
            , (SELECT CD_DTL_NM FROM T2_CODE_DTL D WHERE D.CD_NO = '200' AND A.DIVISION = D.CD_DTL_NO) AS PRJ_DIVISION_NAME
            , A.PUBLIC_YN
            , A.COMM_ID
            , A.STATUS_REQUEST_YN
            , A.STATUS_VERIFY_YN
            , A.CHANGED_NOTICE_YN
            , CASE 
					WHEN A.COMPLETE_YN = 'Y' AND A.STATUS_REQUEST_YN = 'N' THEN 'COMP' 
					WHEN A.DROP_YN = 'Y' AND A.STATUS_REQUEST_YN = 'N' THEN 'DROP' 
					WHEN A.IDENTIFICATION_STATUS = 'REV' OR A.VERIFICATION_STATUS = 'REV' THEN 'REV' 
					WHEN A.IDENTIFICATION_STATUS = 'REQ' OR A.VERIFICATION_STATUS = 'REQ' OR A.STATUS_REQUEST_YN = 'Y' THEN 'REQ'
					WHEN A.IDENTIFICATION_STATUS = 'CONF' AND A.VERIFICATION_STATUS = 'CONF' AND A.DESTRIBUTION_STATUS = 'DONE' THEN 'REV'
					WHEN A.IDENTIFICATION_STATUS = 'CONF' AND A.VERIFICATION_STATUS = 'CONF' AND A.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
					WHEN A.IDENTIFICATION_STATUS = 'CONF' AND A.VERIFICATION_STATUS = 'NA' AND A.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
					ELSE 'PROG' 
				END STATUS
		   , A.PRIORITY
		   , A.PUBLIC_YN
		   , (SELECT COUNT(1) 
				FROM OSS_COMPONENTS OC 
		  INNER JOIN OSS_COMPONENTS_LICENSE OCL 
			      ON OC.COMPONENT_ID = OCL.COMPONENT_ID 
			     AND OCL.EXCLUDE_YN <![CDATA[<>]]> 'Y'
	 LEFT OUTER JOIN LICENSE_MASTER LM 
				  ON OCL.LICENSE_ID = LM.LICENSE_ID 
				 AND LM.USE_YN = 'Y'
			   WHERE OC.REFERENCE_ID = A.PRJ_ID AND OC.REFERENCE_DIV = '13'
				 AND LM.LICENSE_TYPE NOT IN ('NA', 'PF')) AS IDENTIFICATION_SUB_STATUS_BOM 
		FROM
			PROJECT_MASTER A 
			LEFT JOIN COMMENTS_HISTORY B ON A.COMMENT = B.COMM_ID
		    LEFT OUTER JOIN T2_USERS C
		                    ON A.CREATOR = C.USER_ID
		                   
            LEFT OUTER JOIN T2_USERS R
                            ON A.REVIEWER = R.USER_ID
<!--                             
		    LEFT OUTER JOIN T2_CODE_DTL D
		                    ON C.DIVISION = D.CD_DTL_NO
						   AND D.CD_NO = '200'
						   AND D.USE_YN = 'Y' -->
		 WHERE A.PRJ_ID = #{prjId} 
	</select>
	
	<select id="selectModelList" parameterType="string" resultType="oss.fosslight.domain.Project">
		SELECT 
				CONCAT(A.PRJ_ID, 'N' , @rownum:=@rownum+1) as GRID_ID
		       , CONCAT(A.CATEGORY, A.SUBCATEGORY) AS CATEGORY
		       , A.MODEL_NAME 
		       , A.RELEASE_DATE
		       , A.MODIFIER
		       , A.MODIFIED_DATE
		       , A.OSDD_SYNC_YN
		FROM   PROJECT_MODEL A, (SELECT @rownum:=0) TMP
		WHERE  A.PRJ_ID = #{prjId} AND DEL_YN <![CDATA[<>]]> 'Y'
		ORDER BY CATEGORY, MODEL_NAME
	</select>
	
	<select id="selectDeleteModelList" parameterType="string" resultType="oss.fosslight.domain.Project">
		SELECT 
				CONCAT(A.PRJ_ID, 'Y' , @rownum:=@rownum+1) as GRID_ID
		       , CONCAT(A.CATEGORY, A.SUBCATEGORY) AS CATEGORY
		       , A.MODEL_NAME 
		       , A.RELEASE_DATE
		       , A.MODIFIER
		       , A.MODIFIED_DATE
		       , A.OSDD_SYNC_YN
		FROM   PROJECT_MODEL A, (SELECT @rownum:=0) TMP
		WHERE  A.PRJ_ID = #{prjId} AND DEL_YN = 'Y'
		ORDER BY CATEGORY, MODEL_NAME
	</select>
	
	<select id="selectWatchersList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT A.PRJ_ID 
		     , A.DIVISION  PRJ_DIVISION 
		     , C.CD_DTL_NM PRJ_DIVISION_NAME 
		     , A.USER_ID   PRJ_USER_ID 
		     , U.USER_NAME PRJ_USER_NAME
		     , A.EMAIL PRJ_EMAIL 
		     , U.USE_YN AS USER_USE_YN
		     , C.USE_YN AS DEPT_USE_YN
		  FROM PROJECT_WATCHER A 
		       LEFT OUTER JOIN T2_CODE_DTL C 
		                    ON A.DIVISION = C.CD_DTL_NO 
		                   AND C.CD_NO = '200'
		       LEFT OUTER JOIN T2_USERS U 
		                    ON A.USER_ID = U.USER_ID
		WHERE  A.PRJ_ID = #{prjId} 
	</select>
	
	<insert id="insertProjectMaster" parameterType="oss.fosslight.domain.Project" useGeneratedKeys="true" keyProperty="prjId">
		INSERT INTO	 PROJECT_MASTER
		(
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
			PRJ_ID ,
			</if>
			PRJ_NAME
			, PRJ_VERSION
			, DISTRIBUTION_TYPE
			, NETWORK_SERVER_TYPE
			, DISTRIBUTE_TARGET
			, COMMENT			
			, OS_TYPE			
			, OS_TYPE_ETC
			, CREATOR
			, MODIFIER
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(copyPrjId)">
			, COPY_PRJ_ID
			</if>
			, IDENTIFICATION_SUB_STATUS_PARTNER
			, IDENTIFICATION_SUB_STATUS_DEP
			, IDENTIFICATION_SUB_STATUS_SRC
			, IDENTIFICATION_SUB_STATUS_BAT
			, IDENTIFICATION_SUB_STATUS_BIN
			, IDENTIFICATION_SUB_STATUS_ANDROID
			, PUBLIC_YN
			, PRIORITY
			, DIVISION
		)
		VALUES
		(
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
			#{prjId} ,
			</if>
			#{prjName}
			, #{prjVersion}
			, #{distributionType}
			, #{networkServerType}
			, #{distributeTarget}
			, #{comment}
			, #{osType}
			, #{osTypeEtc}
			, #{loginUserName}
			, #{loginUserName}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(copyPrjId)">
			, #{copyPrjId}
			</if>
			, #{identificationSubStatusPartner}
			, #{identificationSubStatusDep}
			, #{identificationSubStatusSrc}
			, #{identificationSubStatusBat}
			, #{identificationSubStatusBin}
			, #{identificationSubStatusAndroid}
			, #{publicYn}
			, #{priority}
			, (SELECT DIVISION FROM T2_USERS WHERE USER_ID = #{loginUserName})
		) ON DUPLICATE KEY UPDATE
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
			PRJ_ID                            = #{prjId} ,
			</if>
			PRJ_NAME                      = #{prjName}
			, PRJ_VERSION                 = #{prjVersion}
			, DISTRIBUTION_TYPE           = #{distributionType}
			, NETWORK_SERVER_TYPE		  = #{networkServerType}
			, DISTRIBUTE_TARGET			  = #{distributeTarget}
			, COMMENT                     = #{comment}
			, OS_TYPE                     = #{osType}
			, OS_TYPE_ETC                 = #{osTypeEtc}
			, PRIORITY					  = #{priority}
			, COMPLETE_YN                 = #{completeYn}
			, MODIFIER                    = #{loginUserName}
			, MODIFIED_DATE = now()
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(creator)">
			, CREATOR                    = #{creator}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(division)">
			, DIVISION                    = #{division}
			</if>
	</insert>
	
	<insert id="insertProjectModel" parameterType="oss.fosslight.domain.Project">
			INSERT INTO PROJECT_MODEL
			(			
				PRJ_ID,
				CATEGORY,
				SUBCATEGORY,
				MODEL_NAME,
				RELEASE_DATE
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(modifier)">
					,MODIFIER
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(modifiedDate)">
					,MODIFIED_DATE
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(delYn)">
					, DEL_YN
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', osddSyncYn)">
					,OSDD_SYNC_YN, OSDD_SYNC_TIME
				</if>
			)
			VALUES
			(	
				#{prjId},
			<choose>
				<when test="@oss.fosslight.util.StringUtil@getByteLength(category) == 6">
				substr(#{category},1,3),
				substr(#{category},4),
				</when>
				<otherwise>
				substr(#{category},1,5),
				substr(#{category},6),
				</otherwise>
			</choose>
				#{modelName},
				#{releaseDate}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(modifier)">
					,#{modifier}
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(modifiedDate)">
					,#{modifiedDate}
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(delYn)">
					, #{delYn}
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', osddSyncYn)">
					,  #{osddSyncYn}, now()
				</if>
			) ON DUPLICATE KEY UPDATE
				RELEASE_DATE  = #{releaseDate}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(delYn)">
					, DEL_YN = #{delYn}
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(modifier)">
					, MODIFIER = #{modifier}
				</if>
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(modifiedDate)">
					,MODIFIED_DATE = #{modifiedDate}
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', osddSyncYn)">
					, OSDD_SYNC_YN = #{osddSyncYn}, OSDD_SYNC_TIME = now()
				</if>
	</insert>
	

	
	<update id="updateModelSyncInfo" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MODEL 
		SET 
			RELEASE_DATE = #{releaseDate}
			, MODIFIER = #{modifier}
			, MODIFIED_DATE = #{modifiedDate}
			, OSDD_SYNC_YN = 'Y'
			, OSDD_SYNC_TIME = now()
		WHERE PRJ_ID = #{prjId} AND CATEGORY = #{category} AND SUBCATEGORY = #{subcategory} AND MODEL_NAME = #{modelName}
	</update>
	
	<insert id="insertProjectWatcher" parameterType="oss.fosslight.domain.Project">
			INSERT INTO PROJECT_WATCHER
			(			PRJ_ID,
						DIVISION, 
						USER_ID,
						EMAIL
			)
			VALUES
			(
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
						#{prjId},
			</if>
			<if test="@oss.fosslight.util.StringUtil@isEmpty(prjId)">
						(SELECT MAX(PRJ_ID) FROM PROJECT_MASTER),
			</if>			
						#{prjDivision},
						#{prjUserId},
						#{prjEmail}
			) 
	</insert>	
	
	<delete id="deleteProjectMaster" parameterType="oss.fosslight.domain.Project">
	<!-- 
		UPDATE PROJECT_MASTER 
		   SET USE_YN = 'N'
		      ,MODIFIER = #{loginUserName}
		      ,MODIFIED_DATE = now()
		 WHERE PRJ_ID = #{prjId}
		 --> 
		 DELETE FROM PROJECT_MASTER WHERE PRJ_ID = #{prjId}
	</delete>
	
	<delete id="deleteProjectDistributeHis" parameterType="oss.fosslight.domain.Project">
		DELETE FROM PROJECT_DISTRIBUTE_HIS WHERE PRJ_ID = #{prjId}
	</delete>
	
	<delete id="deleteProjectModel" parameterType="oss.fosslight.domain.Project">
		DELETE FROM PROJECT_MODEL
		 WHERE PRJ_ID = #{prjId} 
		 <if test="@oss.fosslight.util.StringUtil@equals('N', delYn)">
		 	AND DEL_YN <![CDATA[<>]]> 'Y'
		 </if>
		 <if test="@oss.fosslight.util.StringUtil@equals('Y', delYn)">
		 	AND DEL_YN = 'Y'
		 </if>	
	</delete>
	
	<delete id="deleteProjectWatcher" parameterType="oss.fosslight.domain.Project">
		DELETE FROM PROJECT_WATCHER
		WHERE PRJ_ID = #{prjId} 
		<if test="divisionList != null">
			<foreach item="item" index="index" collection="divisionList">
				AND NOT (DIVISION = #{item.division} AND USER_ID = #{item.userId})
			</foreach>
		</if>
		<if test="emailList != null">
			<foreach item="item" index="index" collection="emailList">
				AND NOT (EMAIL = #{item.email})
			</foreach>
		</if>
	</delete>
	
	<select id="getOssNames" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT DISTINCT OSS_NAME FROM OSS_MASTER
		 WHERE USE_YN = 'Y'
		 ORDER BY OSS_NAME
	</select>
	
	<select id="getOssVersions" parameterType="string" resultType="oss.fosslight.domain.ProjectIdentification">
	/* ProjectMapper.getOssVersions */
		SELECT DISTINCT IF(IFNULL(A.OSS_VERSION, '') = '', 'N/A', A.OSS_VERSION) AS OSS_VERSION
		  FROM OSS_MASTER A 
          LEFT OUTER JOIN OSS_NICKNAME B
                       ON A.OSS_NAME = B.OSS_NAME
		 WHERE A.USE_YN = 'Y'
		   AND (A.OSS_NAME = #{ossName} OR B.OSS_NICKNAME = #{ossName})
		 ORDER BY A.OSS_VERSION 
	</select>
	
	<select id="getOssId" parameterType="string" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT A.OSS_ID
				 , A.LICENSE_DIV
				 , A.HOMEPAGE
				 , A.DOWNLOAD_LOCATION
				 , A.VULN_YN
				 , A.CVE_ID
				 , A.CVSS_SCORE
				 , A.COPYRIGHT AS COPYRIGHT_TEXT
		  FROM OSS_MASTER A
		WHERE A.USE_YN = 'Y'
			AND IFNULL(A.OSS_VERSION, '') = #{ossVersion}
			AND (A.OSS_NAME = #{ossName}
			  OR EXISTS (	SELECT 1 
								  FROM OSS_NICKNAME B
								WHERE A.OSS_NAME = B.OSS_NAME
									AND B.OSS_NICKNAME = #{ossName})
					)
	</select>

	<select id="getOssFindByNameAndVersion" parameterType="string" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT A.OSS_ID
				 , A.LICENSE_DIV
				 , A.HOMEPAGE
				 , A.DOWNLOAD_LOCATION
				 , A.VULN_YN
				 , A.CVE_ID
				 , A.CVSS_SCORE
				 , A.COPYRIGHT AS COPYRIGHT_TEXT
		  FROM OSS_MASTER A
		WHERE A.USE_YN = 'Y'
			AND A.DEACTIVATE_FLAG = 'N'
			AND A.OSS_VERSION = #{ossVersion}
			AND (A.OSS_NAME = #{ossName}
			  OR EXISTS (	SELECT 1
								  FROM OSS_NICKNAME B
								WHERE A.OSS_NAME = B.OSS_NAME
									AND B.OSS_NICKNAME = #{ossName})
					)
	</select>

	<select id="getOssFindByVersionAndDownloadLocation" parameterType="string" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT A.OSS_ID
				 , A.LICENSE_DIV
				 , A.HOMEPAGE
				 , A.DOWNLOAD_LOCATION
				 , A.VULN_YN
				 , A.CVE_ID
				 , A.CVSS_SCORE
				 , A.COPYRIGHT AS COPYRIGHT_TEXT
		  FROM OSS_MASTER A
		  LEFT JOIN OSS_DOWNLOADLOCATION DOWN
	 	    ON A.OSS_ID = DOWN.OSS_ID
		 WHERE A.USE_YN = 'Y'
		   AND A.DEACTIVATE_FLAG = 'N'
		   AND A.OSS_VERSION = #{ossVersion}
		   AND (
				A.DOWNLOAD_LOCATION LIKE CONCAT('%', #{downloadLocation}) 
				OR DOWN.DOWNLOAD_LOCATION LIKE CONCAT('%', #{downloadLocation})
			   )
	</select>

	<select id="getOssFindByDownloadLocation" parameterType="string" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT A.OSS_ID
				 , A.LICENSE_DIV
				 , A.HOMEPAGE
				 , A.DOWNLOAD_LOCATION
				 , A.VULN_YN
				 , A.CVE_ID
				 , A.CVSS_SCORE
				 , A.COPYRIGHT AS COPYRIGHT_TEXT
				 , B.VERSION_DIFF_FLAG
		  FROM OSS_MASTER A
		 INNER JOIN OSS_MASTER_LICENSE_FLAG B ON A.OSS_ID = B.OSS_ID
		  LEFT JOIN OSS_DOWNLOADLOCATION DOWN ON A.OSS_ID = DOWN.OSS_ID
		WHERE A.USE_YN = 'Y'
			AND A.DEACTIVATE_FLAG = 'N'
			AND (
				A.DOWNLOAD_LOCATION LIKE CONCAT('%', #{downloadLocation}) 
				OR DOWN.DOWNLOAD_LOCATION LIKE CONCAT('%', #{downloadLocation})
			   )
	</select>

	<select id="getLicenses" parameterType="string" resultType="oss.fosslight.domain.ProjectIdentification">
	/* ProjectMapper.getLicenses */
		SELECT T1.LICENSE_ID, T1.OSS_LICENSE_COMB, T1.OSS_COPYRIGHT, CASE WHEN IFNULL(SHORT_IDENTIFIER, '') = '' THEN T2.LICENSE_NAME ELSE T2.SHORT_IDENTIFIER END AS LICENSE_NAME
		, T2.LICENSE_TEXT, T2.LICENSE_TYPE
		FROM OSS_LICENSE_DECLARED T1
		INNER JOIN LICENSE_MASTER T2 ON T1.LICENSE_ID = T2.LICENSE_ID
		WHERE T1.OSS_ID = #{ossId}
		ORDER BY OSS_LICENSE_IDX
	</select>
	
	<select id="getDivision" parameterType="oss.fosslight.domain.Project" resultType="String">
		SELECT T2.CD_DTL_NM
		  FROM T2_USERS T1
			   LEFT JOIN (SELECT * FROM T2_CODE_DTL S WHERE S.CD_NO = '200' AND S.USE_YN = 'Y') T2 ON T1.DIVISION = T2.CD_DTL_NO
		 WHERE T1.USE_YN = 'Y'
		   AND T1.USER_ID = #{creator}
	</select>
	
	<select id="selectOssComponents" parameterType="String" resultType="oss.fosslight.domain.OssComponents">
		SELECT *
		  FROM OSS_COMPONENTS
		 WHERE COMPONENT_ID = #{componentId}
	</select>
	<select id="selectOssComponentsListByComponentIds" parameterType="oss.fosslight.domain.OssComponents" resultType="oss.fosslight.domain.OssComponents">
		SELECT *
		  FROM OSS_COMPONENTS
		 WHERE
		<foreach collection="ossComponentsIdList" item="_componentId" open="COMPONENT_ID IN (" close=")" separator=",">
			#{_componentId}
		</foreach> 
	</select>
	
	<insert id="registComponents" parameterType="oss.fosslight.domain.OssComponents"  useGeneratedKeys="true" keyProperty="componentId">
		INSERT INTO
			OSS_COMPONENTS
			(
			REFERENCE_ID
			, REFERENCE_DIV
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
			, OSS_ID
			</if>
			, OSS_NAME
			, OSS_VERSION
			, DOWNLOAD_LOCATION
			, HOMEPAGE
			, FILE_PATH
			, EXCLUDE_YN
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
			, BINARY_NAME
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
			, BINARY_SIZE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
			, BINARY_NOTICE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
			, CUSTOM_BINARY_YN
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(mergePreDiv)">
			, MERGE_PRE_DIV
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(obligationType)">
			, OBLIGATION_TYPE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refComponentId)">
			, REF_COMPONENT_ID
			</if>
			)
			VALUES
			(
			#{referenceId}
			, #{referenceDiv}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
			, (CASE WHEN #{ossId} = '' THEN NULL ELSE #{ossId} END)
			</if>
			, #{ossName}
			, REPLACE(#{ossVersion}, 'N/A','')
			, #{downloadLocation}
			, #{homepage}
			, #{filePath}
			, #{excludeYn}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
			, #{binaryName}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
			, #{binarySize}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
			, #{binaryNotice}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
			, #{customBinaryYn}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(mergePreDiv)">
			, #{mergePreDiv}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(obligationType)">
			, #{obligationType}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refComponentId)">
			, #{refComponentId}
			</if>
			)
	</insert>
	
	
	<insert id="registBomComponents" parameterType="oss.fosslight.domain.ProjectIdentification"  useGeneratedKeys="true" keyProperty="componentId">
		INSERT INTO
			OSS_COMPONENTS
			(
			REFERENCE_ID
			, REFERENCE_DIV
			, COMPONENT_IDX
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
			, OSS_ID
			</if>
			, OSS_NAME
			, OSS_VERSION
			, DOWNLOAD_LOCATION
			, HOMEPAGE
			, FILE_PATH
			, EXCLUDE_YN
			, COPYRIGHT
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
			, BINARY_NAME
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
			, BINARY_SIZE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
			, BINARY_NOTICE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
			, CUSTOM_BINARY_YN
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(mergePreDiv)">
			, MERGE_PRE_DIV
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(obligationType)">
			, OBLIGATION_TYPE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refComponentId)">
			, REF_COMPONENT_ID
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(dependencies)">
			, DEPENDENCIES
			</if>
			, REF_DIV
			, PRE_OBLIGATION_TYPE
			, ADMIN_CHECK_YN
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refOssName)">
			, REF_OSS_NAME
			</if>
			)
			VALUES
			(
			#{referenceId}
			, #{referenceDiv}
			, (SELECT IFNULL(MAX(COMPONENT_IDX), 0) + 1 FROM OSS_COMPONENTS OC WHERE REFERENCE_ID=#{referenceId} AND REFERENCE_DIV=#{referenceDiv})		
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
			, (CASE WHEN #{ossId} = '' THEN NULL ELSE #{ossId} END)
			</if>
			, #{ossName}
			, REPLACE(#{ossVersion}, 'N/A','')
			, #{downloadLocation}
			, #{homepage}
			, #{filePath}
			, #{excludeYn}
			, #{copyrightText}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
			, #{binaryName}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
			, #{binarySize}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
			, #{binaryNotice}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
			, #{customBinaryYn}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(mergePreDiv)">
			, #{mergePreDiv}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(obligationType)">
			, #{obligationType}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refComponentId)">
			, #{refComponentId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(dependencies)">
			, #{dependencies}
			</if>
			<choose>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(refDiv)">
				, #{refDiv}
				</when>
				<otherwise>
				, (SELECT REFERENCE_DIV FROM OSS_COMPONENTS WHERE COMPONENT_ID = #{refComponentId})
				</otherwise>
			</choose>
			, #{preObligationType}
			, #{adminCheckYn}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refOssName)">
			, #{refOssName}
			</if>
			)
	</insert>
	
	
	<select id="selectLastComponent" resultType="String">
		SELECT MAX(COMPONENT_ID) 
		  FROM OSS_COMPONENTS
	</select>
	
	<select id="selectExistLicense" parameterType="oss.fosslight.domain.OssComponentsLicense" resultType="int">
		SELECT COUNT(*)
		FROM   OSS_COMPONENTS_LICENSE A 
		WHERE  1 = 1 
		  AND  A.COMPONENT_ID = #{componentId}
		  AND  A.LICENSE_ID = #{licenseId}
		  AND  A.LICENSE_NAME = #{licenseName}
		  AND  A.COPYRIGHT_TEXT = #{copyrightText}
	</select>	
	
	<insert id="registComponentLicense" parameterType="oss.fosslight.domain.OssComponentsLicense"  useGeneratedKeys="true" keyProperty="componentLicenseId">
		INSERT INTO
			OSS_COMPONENTS_LICENSE
			(
			COMPONENT_ID
			, LICENSE_ID
			, LICENSE_NAME
			, COPYRIGHT_TEXT
			, EXCLUDE_YN
			)
			VALUES
			(
			#{componentId}
			, #{licenseId}
			, TRIM(#{licenseName})
			, #{copyrightText}
			, #{excludeYn}
			)
	</insert>
	
	<select id="getProjectNameList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
	/* getProjectNameList : PROJECT NAME AUTO COMPLETE */
		SELECT DISTINCT T1.PRJ_NAME
		FROM PROJECT_MASTER T1
		WHERE T1.USE_YN = 'Y'
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationStatus)">
			AND T1.IDENTIFICATION_STATUS = #{identificationStatus}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@equals('ADMIN', creator)">
			AND (
				T1.CREATOR = #{creator} 
					OR EXISTS (
						SELECT A1.PRJ_ID
						FROM PROJECT_WATCHER A1
							<!-- INNER JOIN T2_USERS A2 ON A1.DIVISION = A2.DIVISION AND A2.USE_YN = 'Y' AND A2.USER_ID = #{creator} -->
						WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{creator} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{creator}) ))
					OR T1.PUBLIC_YN = 'Y'
				)
			)
		</if>
		ORDER BY T1.CREATED_DATE DESC
	</select>
	<select id="getProjectIdList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
	/* getProjectIdList : PROJECT ID AUTO COMPLETE */
		SELECT DISTINCT T1.PRJ_ID
		FROM PROJECT_MASTER T1
		WHERE T1.USE_YN = 'Y'
		AND T1.IDENTIFICATION_STATUS = 'CONF'
		<if test="!@oss.fosslight.util.StringUtil@equals('ADMIN', creator)">
			AND (
				T1.CREATOR = #{creator} 
					OR EXISTS (
						SELECT A1.PRJ_ID
						FROM PROJECT_WATCHER A1
						WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{creator} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{creator}) ))
					OR T1.PUBLIC_YN = 'Y'
				)
			)
		</if>
		ORDER BY T1.CREATED_DATE DESC
	</select>
	<select id="getProjectVersionList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
	/* getProjectVersionList : PROJECT VERSION AUTO COMPLETE */
		SELECT DISTINCT T1.PRJ_VERSION
		FROM PROJECT_MASTER T1
		WHERE T1.USE_YN = 'Y'
		<if test="!@oss.fosslight.util.StringUtil@equals('ADMIN', creator)">
			AND (
				T1.CREATOR = #{creator} 
					OR EXISTS (
					SELECT A1.PRJ_ID 
					  FROM PROJECT_WATCHER A1 
					 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{creator} -->
					 WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{creator} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{creator}) ))
				)
			)
		</if>
	</select>
	
	<select id="getProjectModelNameList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
	/* getProjectModelNameList : PROJECT MODEL AUTO COMPLETE */
		SELECT DISTINCT MODEL_NAME
		  FROM PROJECT_MODEL
	</select>
	
	<select id="selectComponentId" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponents">
		SELECT COMPONENT_ID
		  FROM OSS_COMPONENTS
		 WHERE REFERENCE_ID = #{referenceId}
		   AND REFERENCE_DIV = #{referenceDiv}
	</select>
	
	<delete id="deleteOssComponentsLicense" parameterType="oss.fosslight.domain.OssComponents">
		DELETE FROM OSS_COMPONENTS_LICENSE
		 WHERE COMPONENT_ID = #{componentId} 	
	</delete>
	
	<delete id="deleteOssComponents" parameterType="oss.fosslight.domain.ProjectIdentification">
		DELETE FROM OSS_COMPONENTS 
		 WHERE REFERENCE_ID = #{referenceId}
		 AND REFERENCE_DIV = #{referenceDiv}
	</delete>
	
 	<select id="checkOssNickName" parameterType="oss.fosslight.domain.OssMaster" resultType="oss.fosslight.domain.OssMaster">
 	/* ProjectMapper.checkOssNickName */
		SELECT T2.OSS_ID, T2.OSS_NAME, T1.OSS_NICKNAME 
		FROM OSS_NICKNAME T1 
		INNER JOIN OSS_MASTER T2 ON T1.OSS_NAME = T2.OSS_NAME AND T2.USE_YN = 'Y'
		WHERE 1=1
		<foreach collection="ossNames" item="_ossName" open="AND OSS_NICKNAME IN (" close=")" separator=",">
			#{_ossName}
		</foreach>
		ORDER BY OSS_NAME
 	</select>	
	<update id="updateFileId" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER 
		<set>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(depCsvFileId)">
			DEP_CSV_FILE_ID = #{depCsvFileId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcCsvFileId)">
			SRC_CSV_FILE_ID = #{srcCsvFileId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binCsvFileId)">
			BIN_CSV_FILE_ID = #{binCsvFileId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binBinaryFileId)">
			BIN_BINARY_FILE_ID = #{binBinaryFileId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidCsvFileId)">
			SRC_ANDROID_CSV_FILE_ID = #{srcAndroidCsvFileId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidNoticeFileId)">
			SRC_ANDROID_NOTICE_FILE_ID = #{srcAndroidNoticeFileId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidNoticeXmlId)">
			SRC_ANDROID_NOTICE_XML_ID = #{srcAndroidNoticeXmlId},
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidResultFileId)">
			SRC_ANDROID_RESULT_FILE_ID = #{srcAndroidResultFileId}
			</if>
		</set>
		WHERE 
			PRJ_ID = #{prjId}
	</update>
	
	<update id="updateFileId2" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER 
		<set>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', depCsvFileFlag)">
				DEP_CSV_FILE_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', srcCsvFileFlag)">
				SRC_CSV_FILE_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', binCsvFileFlag)">
				BIN_CSV_FILE_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', binBinaryFileFlag)">
				BIN_BINARY_FILE_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', srcAndroidCsvFileFlag)">
				SRC_ANDROID_CSV_FILE_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', srcAndroidNoticeFileFlag)">
				SRC_ANDROID_NOTICE_FILE_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', srcAndroidNoticeXmlFileFlag)">
				SRC_ANDROID_NOTICE_XML_ID = null,
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('Y', srcAndroidResultFileFlag)">
				SRC_ANDROID_RESULT_FILE_ID = null,
			</if>
		</set>
		WHERE 
			PRJ_ID = #{prjId}
	</update>
	
	<select id="selectCsvFile" parameterType="String" resultType="oss.fosslight.domain.T2File">
		SELECT
			T1.*
			, DATE_FORMAT(T1.REG_DT, '%Y-%m-%d %T') AS CREATED_DATE
		FROM
			T2_FILE T1
		WHERE
			T1.FILE_ID = #{csvFileId}
		AND
			T1.DEL_YN = 'N'
	</select>
	
	<delete id="deleteFileBySeq" parameterType="oss.fosslight.domain.T2File">
		UPDATE T2_FILE 
			SET DEL_YN = 'Y'
		 WHERE FILE_SEQ = #{fileSeq} 	
	</delete>
	
	<update id="updateFileBySeq" parameterType="oss.fosslight.domain.T2File">
		UPDATE T2_FILE 
			SET DEL_YN = 'N' 
		WHERE FILE_SEQ = #{fileSeq}
	</update>
	
	<select id="selectAndroidCsvFile" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.T2File">
		SELECT
			T1.*
			, DATE_FORMAT(T1.REG_DT, '%Y-%m-%d %T') AS CREATED_DATE
		FROM
			T2_FILE T1
		WHERE
			T1.FILE_ID = #{srcAndroidCsvFileId}
		ORDER BY T1.FILE_SEQ DESC
		LIMIT 1
	</select>
	
	<select id="selectAndroidNoticeFile" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.T2File">
		SELECT
			T1.*
			, DATE_FORMAT(T1.REG_DT, '%Y-%m-%d %T') AS CREATED_DATE
		FROM
			T2_FILE T1
		WHERE
			T1.FILE_ID = #{srcAndroidNoticeFileId}
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidNoticeXmlId)">
		   OR T1.FILE_ID = #{srcAndroidNoticeXmlId}
		ORDER BY T1.FILE_SEQ ASC
		</if>
		<if test="@oss.fosslight.util.StringUtil@isEmpty(srcAndroidNoticeXmlId)">
		ORDER BY T1.FILE_SEQ DESC
		LIMIT 1
		</if>
	</select>
	
	<select id="selectAndroidResultFile" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.T2File">
		SELECT
			T1.*
			, DATE_FORMAT(T1.REG_DT, '%Y-%m-%d %T') AS CREATED_DATE
		FROM
			T2_FILE T1
		WHERE
			T1.FILE_ID = #{srcAndroidResultFileId}
		ORDER BY T1.FILE_SEQ DESC
		LIMIT 1
	</select>
	
	<select id="selectFileInfoById" parameterType="String" resultType="oss.fosslight.domain.T2File">
		SELECT
			T1.*
			, DATE_FORMAT(T1.REG_DT, '%Y-%m-%d %T') AS CREATED_DATE
		FROM
			T2_FILE T1
		WHERE
			T1.FILE_ID = #{fileId}
		ORDER BY T1.FILE_SEQ DESC
		LIMIT 1
	</select>
	
	<select id="selectLicenseComb" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="String">
		SELECT
			OSS_LICENSE_COMB
		FROM
			OSS_LICENSE_DECLARED
		WHERE
			OSS_ID = #{ossId}
			AND LICENSE_ID = #{licenseId}
	</select>
	
	<update id="updateComment" parameterType="oss.fosslight.domain.Project">
		UPDATE
			PROJECT_MASTER
		SET
			COMMENT = #{comment}
		WHERE
			PRJ_ID = #{prjId}
	</update>
	
	<update id="deleteComment" parameterType="oss.fosslight.domain.CommentsHistory">
		UPDATE
			PROJECT_MASTER
		SET
			COMMENT = ''
		WHERE
			PRJ_ID = #{referenceId}
	</update>
	
	<select id="selectBomList" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.ProjectIdentification">
		/* ProjectMapper selectBomList */
		SELECT 
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('Y', bomWithAndroidFlag)">CONCAT(RTN.REFERENCE_DIV, '-', RTN.OSS_NAME, '-', RTN.OSS_VERSION, '-', RTN.LICENSE_NAME) AS GROUPBY, </when>
				<when test="@oss.fosslight.util.StringUtil@equals('Y', noticeFlag)">CONCAT(RTN.REFERENCE_DIV, '-', RTN.OSS_NAME, '-', RTN.OSS_VERSION, '-', RTN.LICENSE_NAME) AS GROUPBY, </when>
				<when test="@oss.fosslight.util.StringUtil@equals('N', merge)">CONCAT(RTN.REFERENCE_DIV, '-', RTN.REF_DIV, '-', RTN.OSS_NAME, '-', RTN.OSS_VERSION, '-', RTN.LICENSE_NAME) AS GROUPBY, </when>
				<otherwise>CONCAT(RTN.REFERENCE_DIV, '-', RTN.OSS_NAME, '-', RTN.OSS_VERSION, '-', RTN.LICENSE_NAME) AS GROUPBY, </otherwise>
			</choose>
			
			CASE WHEN RTN.OSS_NAME = '-' THEN RTN.COMPONENT_ID ELSE CONCAT(RTN.OSS_NAME,RTN.OSS_VERSION,RTN.LICENSE_NAME) END AS GROUPING_COLUMN,
			RTN.COMPONENT_ID,
			 CASE WHEN RTN.REFERENCE_DIV = '14' THEN RTN.COMPONENT_ID ELSE RTN.REF_COMPONENT_ID END AS REF_COMPONENT_ID,
			 RTN.REFERENCE_ID,
			 RTN.REFERENCE_DIV,
			 RTN.COMPONENT_IDX,
			 CASE WHEN RTN.REFERENCE_DIV = '14' THEN RTN.COMPONENT_IDX 
			 ELSE (SELECT COMPONENT_IDX FROM OSS_COMPONENTS OC1 WHERE OC1.COMPONENT_ID = RTN.REF_COMPONENT_ID)
			 END AS REF_COMPONENT_IDX,
			RTN.REF_DIV,
			RTN.OSS_ID, 
			RTN.OSS_NAME, 
			RTN.OSS_VERSION, 
			RTN.DOWNLOAD_LOCATION, 
			RTN.HOMEPAGE,
			RTN.BINARY_NAME, 
			RTN.BINARY_SIZE , 
			RTN.BINARY_NOTICE, 
			RTN.CUSTOM_BINARY_YN, 
			RTN.EXCLUDE_YN, 
			RTN.MERGE_PRE_DIV, 
			RTN.BAT_STRING_MATCH_PERCENTAGE, 
			RTN.BAT_PERCENTAGE, 
			RTN.BAT_SCORE,
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('Y', saveBomFlag)">RTN.FILE_PATH,</when>
				<otherwise>GROUP_CONCAT(IF(IFNULL(RTN.FILE_PATH, '') = '', NULL, RTN.FILE_PATH) SEPARATOR '\r\n') AS FILE_PATH,</otherwise>
			</choose>
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('N', merge)">RTN.OBLIGATION_TYPE,</when>
				<otherwise>
					CASE 
						WHEN IFNULL(RTN.OBLIGATION_TYPE, '') = '' AND IFNULL(RTN.OSS_ID, '') <![CDATA[<>]]> '' THEN ( SELECT B1.OBLIGATION_TYPE FROM OSS_MASTER B1 WHERE RTN.OSS_ID = B1.OSS_ID) 
						ELSE  RTN.OBLIGATION_TYPE END AS OBLIGATION_TYPE, 
				</otherwise>
			</choose>
			RTN.PRE_OBLIGATION_TYPE,
			RTN.ADMIN_CHECK_YN,
			CASE 
					WHEN RTN.REFERENCE_DIV = '11' THEN 1 
					WHEN RTN.REFERENCE_DIV = '15' THEN 2 
					WHEN RTN.REFERENCE_DIV = '10' THEN 3 
					WHEN RTN.REFERENCE_DIV = '13' AND RTN.MERGE_PRE_DIV IS NULL THEN 11 
					WHEN RTN.REFERENCE_DIV = '13' AND RTN.MERGE_PRE_DIV = '11' THEN 12 
					WHEN RTN.REFERENCE_DIV = '13' AND RTN.MERGE_PRE_DIV = '15' THEN 13 
					WHEN RTN.REFERENCE_DIV = '13' AND RTN.MERGE_PRE_DIV = '10' THEN 14 
					WHEN RTN.REFERENCE_DIV = '13' AND RTN.MERGE_PRE_DIV = '16' THEN 15 
					ELSE 99 END AS MERGE_ORDER, 
			RTN.LICENSE_ID, RTN.LICENSE_NAME, RTN.COPYRIGHT AS COPYRIGHT_TEXT, RTN.LICENSE_TYPE_IDX,
			RTN.CVSS_SCORE_MAX, RTN.CVSS_SCORE_MAX1, RTN.CVSS_SCORE_MAX2, RTN.CVSS_SCORE_MAX3, RTN.LICENSE_TYPE, RTN.DEPENDENCIES, RTN.REF_OSS_NAME
		FROM  (
			SELECT 
				A1.REFERENCE_ID, A1.COMPONENT_ID, A1.REF_COMPONENT_ID, A1.REFERENCE_DIV, A1.COMPONENT_IDX,A1.OSS_ID, A1.OSS_NAME, A1.OSS_VERSION
				, A1.DOWNLOAD_LOCATION, A1.HOMEPAGE, A1.FILE_PATH, A1.BINARY_NOTICE, A1.BINARY_NAME, A1.BINARY_SIZE, A1.CUSTOM_BINARY_YN, A1.EXCLUDE_YN, A1.MERGE_PRE_DIV
				, A1.BAT_STRING_MATCH_PERCENTAGE, A1.BAT_PERCENTAGE, A1.BAT_SCORE, A1.PRE_OBLIGATION_TYPE, A1.OBLIGATION_TYPE, A1.ADMIN_CHECK_YN, A1.COPYRIGHT
				, GROUP_CONCAT(A2.LICENSE_ID ORDER BY A2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_ID
				, GROUP_CONCAT(A2.LICENSE_NAME ORDER BY A2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_NAME
				, IFNULL(A1.REF_DIV, (SELECT S.REFERENCE_DIV FROM OSS_COMPONENTS S WHERE S.COMPONENT_ID = A1.REF_COMPONENT_ID)) AS REF_DIV
				, (CASE WHEN GROUP_CONCAT(A3.LICENSE_TYPE) REGEXP 'PMS|WCP|CP' THEN 1 WHEN A3.LICENSE_TYPE IS NULL THEN 1 ELSE CONCAT(GROUP_CONCAT(A2.LICENSE_NAME ORDER BY A2.LICENSE_ID DESC SEPARATOR ','), '-', 2) END) AS LICENSE_TYPE_IDX
				, A3.LICENSE_TYPE, A1.DEPENDENCIES, A1.REF_OSS_NAME
				<if test="@oss.fosslight.util.StringUtil@equals('N', merge)">
				, CASE WHEN ((SELECT IFNULL(EXCLUDE_YN, 'N') FROM OSS_COMPONENTS WHERE COMPONENT_ID = A1.REF_COMPONENT_ID) != 'Y') THEN 
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', merge)">
				, CASE WHEN IFNULL(A1.EXCLUDE_YN, 'N') != 'Y' THEN 
				</if>
				(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
					FROM NVD_DATA_SCORE_V3 NVD
					WHERE NVD.PRODUCT != '-'
					AND NVD.PRODUCT = REPLACE(IFNULL(A1.REF_OSS_NAME, IFNULL(A1.OSS_NAME, A4.OSS_NAME)), ' ', '_')
				<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
					AND NVD.VERSION = A1.OSS_VERSION
				</if>
				) ELSE NULL END CVSS_SCORE_MAX
				<if test="@oss.fosslight.util.StringUtil@equals('N', merge)">
				, CASE WHEN ((SELECT IFNULL(EXCLUDE_YN, 'N') FROM OSS_COMPONENTS WHERE COMPONENT_ID = A1.REF_COMPONENT_ID) != 'Y') THEN 
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', merge)">
				, CASE WHEN IFNULL(A1.EXCLUDE_YN, 'N') != 'Y' THEN 
				</if>
				(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
					FROM NVD_DATA_SCORE_V3 NVD
					WHERE NVD.VENDORPRODUCT IS NOT NULL
					AND NVD.PRODUCT != '-'
					AND IFNULL(A1.OSS_NAME, A4.OSS_NAME) REGEXP '[-]'
					AND NVD.VENDORPRODUCT = REPLACE(IFNULL(A1.REF_OSS_NAME, IFNULL(A1.OSS_NAME, A4.OSS_NAME)), ' ', '_')
				<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
					AND NVD.VERSION = A1.OSS_VERSION
				</if>
				) ELSE NULL END CVSS_SCORE_MAX1
				<if test="@oss.fosslight.util.StringUtil@equals('N', merge)">
				, CASE WHEN ((SELECT IFNULL(EXCLUDE_YN, 'N') FROM OSS_COMPONENTS WHERE COMPONENT_ID = A1.REF_COMPONENT_ID) != 'Y') THEN 
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', merge)">
				, CASE WHEN IFNULL(A1.EXCLUDE_YN, 'N') != 'Y' THEN 
				</if>
				(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
					FROM NVD_DATA_SCORE_V3 NVD
					WHERE NVD.PRODUCT != '-'
				<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
					AND NVD.VERSION = A1.OSS_VERSION
				</if>
					AND NVD.PRODUCT IN (SELECT OSS_NICKNAME FROM OSS_NICKNAME WHERE OSS_NAME = IFNULL(A1.REF_OSS_NAME, IFNULL(A1.OSS_NAME, A4.OSS_NAME)))
				) ELSE NULL END CVSS_SCORE_MAX2
				<if test="@oss.fosslight.util.StringUtil@equals('N', merge)">
				, CASE WHEN ((SELECT IFNULL(EXCLUDE_YN, 'N') FROM OSS_COMPONENTS WHERE COMPONENT_ID = A1.REF_COMPONENT_ID) != 'Y') THEN 
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('Y', merge)">
				, CASE WHEN IFNULL(A1.EXCLUDE_YN, 'N') != 'Y' THEN 
				</if>
				(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
					FROM NVD_DATA_SCORE_V3 NVD
					WHERE NVD.VENDORPRODUCT IS NOT NULL
				<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
					AND NVD.VERSION = A1.OSS_VERSION
				</if>
					AND NVD.VENDORPRODUCT IN (SELECT OSS_NICKNAME FROM OSS_NICKNAME WHERE OSS_NAME = IFNULL(A1.REF_OSS_NAME, IFNULL(A1.OSS_NAME, A4.OSS_NAME)) AND OSS_NICKNAME REGEXP '[-]')
				) ELSE NULL END CVSS_SCORE_MAX3
			FROM OSS_COMPONENTS A1 
				INNER JOIN PROJECT_MASTER PRJ ON A1.REFERENCE_ID = PRJ.PRJ_ID
				INNER JOIN OSS_COMPONENTS_LICENSE A2 
					ON A1.COMPONENT_ID = A2.COMPONENT_ID 
						AND  A2.EXCLUDE_YN <![CDATA[<>]]> 'Y'
				LEFT OUTER JOIN LICENSE_MASTER A3 ON A2.LICENSE_ID = A3.LICENSE_ID AND A3.USE_YN = 'Y'
				LEFT OUTER JOIN OSS_MASTER A4 ON A1.OSS_NAME = A4.OSS_NAME AND A1.OSS_VERSION = A4.OSS_VERSION AND A4.USE_YN = 'Y' 
				WHERE A1.REFERENCE_ID = #{referenceId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
	    			AND IFNULL(A1.OSS_VERSION, '') = ''
	    		</if>
	    		<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
	    			AND IFNULL(A1.OSS_VERSION, '') != ''
	    		</if>
					<if test="@oss.fosslight.util.StringUtil@equals('Y', noticeFlag)">
						AND A1.OBLIGATION_TYPE IN ('10', '11')
			        </if>
					<if test="@oss.fosslight.util.StringUtil@equals('N', merge)">
						<choose>
							<when test="@oss.fosslight.util.StringUtil@equals('Y', bomWithAndroidFlag)">
								AND A1.REFERENCE_DIV IN ('13', '14')
								AND IFNULL(A1.EXCLUDE_YN, 'N') = 'N'
							</when>
							<otherwise>AND A1.REFERENCE_DIV IN ('13')</otherwise>
						</choose>
			        </if>
			        <if test="@oss.fosslight.util.StringUtil@equals('Y', merge)">
					AND IFNULL(A1.EXCLUDE_YN, 'N') = 'N' 
					AND A1.REFERENCE_DIV IN ('10','11','15','16') 
					AND (CASE WHEN PRJ.IDENTIFICATION_SUB_STATUS_PARTNER = 'N' THEN A1.REFERENCE_DIV <![CDATA[<>]]> '10' ELSE TRUE END) 
					AND (CASE WHEN PRJ.IDENTIFICATION_SUB_STATUS_DEP = 'N' THEN A1.REFERENCE_DIV <![CDATA[<>]]> '16' ELSE TRUE END)
					AND (CASE WHEN PRJ.IDENTIFICATION_SUB_STATUS_SRC = 'N' THEN A1.REFERENCE_DIV <![CDATA[<>]]> '11' ELSE TRUE END) 
					AND (CASE WHEN PRJ.IDENTIFICATION_SUB_STATUS_BIN = 'N' THEN A1.REFERENCE_DIV <![CDATA[<>]]> '15' ELSE TRUE END)
					</if>
			GROUP BY A1.COMPONENT_ID
		) RTN
		
		WHERE 1=1
		GROUP BY GROUPBY
		
	</select>	
	
	<select id="selectBomLicense" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponentsLicense">
		SELECT
			*
		FROM
			OSS_COMPONENTS_LICENSE
		WHERE COMPONENT_ID = #{componentId}
		  AND IFNULL(EXCLUDE_YN, 'N') != 'Y'
	</select>
	
	<select id="selectBomLicenseList" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponentsLicense">
		SELECT
			OCL.*
		FROM
			OSS_COMPONENTS_LICENSE OCL
		WHERE EXISTS (SELECT 1 FROM OSS_COMPONENTS 
									WHERE REFERENCE_ID = #{referenceId}
									AND REFERENCE_DIV IN ('10', '11', '13', '15', '16')
									AND COMPONENT_ID = OCL.COMPONENT_ID)
		AND IFNULL(OCL.EXCLUDE_YN, 'N') != 'Y'
	</select>
	
	<select id="selectBomLicenseGrp" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponentsLicense">
		SELECT
			*
		FROM
			OSS_COMPONENTS_LICENSE A
		WHERE A.COMPONENT_ID IN ( 
			SELECT S.COMPONENT_ID
			  FROM OSS_COMPONENTS S
			 WHERE S.REFERENCE_ID = #{referenceId}
		) 
		  AND IFNULL(A.EXCLUDE_YN, 'N') != 'Y'
	</select>

	<select id="selectOssRefPrjList1" parameterType="oss.fosslight.domain.OssMaster" resultType="oss.fosslight.domain.OssComponents">
	/* ProjectMapper.selectOssRefPrjList1 */
		SELECT T1.PRJ_ID, T1.PRJ_NAME, T1.PRJ_VERSION, 'N' AS OLD_SYSTEM_FLAG, 1 AS S_ORDER, T1.MODIFIED_DATE 
		FROM PROJECT_MASTER T1
		WHERE T1.USE_YN = 'Y'
			AND T1.IDENTIFICATION_STATUS = 'CONF'
			AND EXISTS (
					SELECT 1 
					FROM OSS_COMPONENTS A 
						INNER JOIN (
							SELECT SUB1.OSS_ID, SUB1.OSS_NAME, SUB1.OSS_VERSION 
							FROM OSS_MASTER SUB1 
							WHERE SUB1.OSS_ID = #{ossId}
							
							UNION ALL
							
							SELECT SUB1.OSS_ID, SUB2.OSS_NICKNAME AS OSS_NAME, SUB1.OSS_VERSION 
							FROM OSS_MASTER SUB1 
								INNER JOIN OSS_NICKNAME SUB2 ON SUB1.OSS_NAME = SUB2.OSS_NAME
							WHERE SUB1.OSS_ID = #{ossId}
							
							) B ON A.OSS_NAME = B.OSS_NAME AND  IFNULL(B.OSS_VERSION, '') = IFNULL(A.OSS_VERSION, '')
					WHERE T1.PRJ_ID = A.REFERENCE_ID AND A.REFERENCE_DIV IN ('10','11','12','14','15','16') AND A.EXCLUDE_YN = 'N'
				)
			<if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
				AND (
					T1.CREATOR = #{loginUserName} 
						OR EXISTS (
						SELECT 1
						  FROM PROJECT_WATCHER A1 
						 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{loginUserName} -->
						 WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{loginUserName} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
					)
				)
			</if>
		
		ORDER BY MODIFIED_DATE DESC LIMIT 100
	</select>
	
	<select id="selectUnlimitedOssComponentBomList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT 
			* 
		FROM
			PROJECT_MASTER
		WHERE USE_YN = 'Y'
			AND PRJ_ID IN

		/* PRJ ID 구하는 SUB QUERY */
		
		(SELECT
			REFERENCE_ID
		FROM
			OSS_COMPONENTS
		WHERE 1=1
		AND OSS_ID = #{ossId}
		AND REFERENCE_DIV = '13')
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationStatus)">
			AND IDENTIFICATION_STATUS = #{identificationStatus}
		</if>
	</select>
	
	<select id="selectDuplicatedProject" parameterType="oss.fosslight.domain.Project" resultType="int">
		SELECT 
			COUNT(*) 
		FROM 
			PROJECT_MASTER 
		WHERE USE_YN ='Y'
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
		AND PRJ_ID <![CDATA[<>]]> #{prjId}
		</if>
		AND PRJ_NAME = #{prjName} 
		AND PRJ_VERSION = #{prjVersion}
	</select>
	
	<select id="selectProjectListExcel" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT A.PRJ_ID 
		       ,A.PRJ_NAME 
		       ,A.PRJ_VERSION 
		       ,A.DISTRIBUTION_TYPE 
		       ,A.OSS_NOTICE_DUE_DATE 
		       ,A.COMMENT 
		       ,A.OS_TYPE 
		       ,A.OS_TYPE_ETC 
		       ,A.IDENTIFICATION_STATUS 
		       ,A.VERIFICATION_STATUS 
		       ,A.DESTRIBUTION_STATUS 
		       ,A.DISTRIBUTE_MASTER_CATEGORY
		       ,A.DISTRIBUTE_NAME 
		       ,A.DISTRIBUTE_SOFTWARE_TYPE 
		       ,A.DISTRIBUTE_DEPLOY_YN 
		       ,A.DISTRIBUTE_DEPLOY_TIME 
		       ,A.SRC_CSV_FILE_ID 
		       ,A.SRC_ANDROID_CSV_FILE_ID 
		       ,A.SRC_ANDROID_NOTICE_FILE_ID 
		       ,A.SRC_ANDROID_NOTICE_XML_ID 
		       ,A.PACKAGE_FILE_ID 
		       ,A.NOTICE_FILE_ID 
		       ,A.COMPLETE_YN 
		       ,A.REVIEWER
		       ,A.USE_YN
		       ,A.CREATOR 
		       ,A.CREATED_DATE
		       ,A.MODIFIER 
		       ,A.MODIFIED_DATE
		       ,A.DIVISION 
			, CASE 
					WHEN A.COMPLETE_YN = 'Y' THEN 'COMP' 
					WHEN A.DROP_YN = 'Y' THEN 'DROP' 
					WHEN A.IDENTIFICATION_STATUS = 'REV' OR A.VERIFICATION_STATUS = 'REV'	THEN 'REV' 
					WHEN A.IDENTIFICATION_STATUS = 'REQ' OR A.VERIFICATION_STATUS = 'REQ'	THEN 'REQ'
					WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'DONE' THEN 'REV'
 					WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
 					WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'NA' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
					ELSE 'PROG' 
				END STATUS
			, A.PRIORITY
		FROM   PROJECT_MASTER A 
<!-- 		       LEFT OUTER JOIN T2_USERS B 
		                    ON A.CREATOR = B.USER_ID 
		                   AND B.USE_YN = 'Y' -->
		WHERE  A.USE_YN = 'Y'
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjId)">
				AND A.PRJ_ID = #{prjId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjName)">
				AND A.PRJ_NAME LIKE CONCAT('%',#{prjName},'%') 
		 	</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributionType)">
				AND A.DISTRIBUTION_TYPE = #{distributionType}
			</if>			
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(networkServerType)">
				AND T1.NETWORK_SERVER_TYPE = #{networkServerType}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schStartDate)">
				AND A.CREATED_DATE <![CDATA[>=]]> #{schStartDate}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(schEndDate)">
				AND A.CREATED_DATE <![CDATA[<=]]> #{schEndDate}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(creator)">
				AND A.CREATOR LIKE CONCAT('%',#{creator},'%')
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(reviewer)">
				AND A.REVIEWER LIKE CONCAT('%',#{reviewer},'%')
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName) or !@oss.fosslight.util.StringUtil@isEmpty(licenseName)">
				AND EXISTS(SELECT 1 
		                  FROM   OSS_COMPONENTS X 
		                         LEFT OUTER JOIN OSS_COMPONENTS_LICENSE Y 
		                                      ON X.COMPONENT_ID = Y.COMPONENT_ID 
		                  WHERE  A.PRJ_ID = X.REFERENCE_ID
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossName)">
		                         AND X.OSS_NAME LIKE CONCAT('%',#{ossName},'%')
								</if>
								<if test="!@oss.fosslight.util.StringUtil@isEmpty(licenseName)">
		                         AND Y.LICENSE_NAME LIKE CONCAT('%',#{licenseName},'%'))
								</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(modelName)">
				AND EXISTS (SELECT 1 
		                   FROM   PROJECT_MODEL M 
		                   WHERE  A.PRJ_ID = M.PRJ_ID 
		                          AND MODEL_NAME LIKE CONCAT('%',#{modelName},'%'))
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjDivision)">
				AND ( A.DIVISION = #{prjDivision} )
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(arrStatuses)">
				AND
				<foreach collection="arrStatuses" item="item" open="(" close=")" separator="OR">
					A.STATUS = #{item}
				</foreach>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(priority)">
				AND A.PRIORITY = #{priority}
			</if>
			
			<if test="sortField eq 'prjId'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.PRJ_ID ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.PRJ_ID DESC
				</if>
			</if>
			<if test="sortField eq 'prjName'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.PRJ_NAME ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.PRJ_NAME DESC
				</if>
			</if>
			<if test="sortField eq 'prjVersion'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.PRJ_VERSION ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.PRJ_VERSION DESC
				</if>
			</if>			
			<if test="sortField eq 'distributionType'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.DISTRIBUTION_TYPE ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.DISTRIBUTION_TYPE DESC
				</if>
			</if>
			<if test="sortField eq 'division'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.DIVISION ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.DIVISION DESC
				</if>
			</if>
			<if test="sortField eq 'creator'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.CREATOR ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.CREATOR DESC
				</if>
			</if>
			<if test="sortField eq 'createdDate'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.CREATED_DATE ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.CREATED_DATE DESC
				</if>
			</if>
			<if test="sortField eq 'reviewer'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.REVIEWER ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.REVIEWER DESC
				</if>
			</if>
			<if test="sortField eq 'comment'">
				<if test="sortOrder eq 'asc'">
					ORDER BY A.COMMENT ASC
				</if>
				<if test="sortOrder eq 'desc'">
					ORDER BY A.COMMENT DESC
				</if>
			</if>
			
	</select>
	
	
	<select id="selectLastPrjId" resultType="String">
		SELECT
			MAX(PRJ_ID)
		FROM
			PROJECT_MASTER
	</select>
	
	<select id="selectOssComponentsList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT
			*
		FROM
			OSS_COMPONENTS
		WHERE
			REFERENCE_ID = #{oldId}
			AND REFERENCE_DIV IN ('10', '11', '12', '14', '15', '16')
		ORDER BY COMPONENT_ID
	</select>
	
	<insert id="insertOssComponents" parameterType="oss.fosslight.domain.ProjectIdentification"  useGeneratedKeys="true" keyProperty="componentId">
		INSERT INTO
			OSS_COMPONENTS
			(
			REFERENCE_ID
			, REFERENCE_DIV
			, COMPONENT_IDX
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
			, OSS_ID
			</if>
			, OSS_NAME
			, OSS_VERSION
			, DOWNLOAD_LOCATION
			, HOMEPAGE
			, FILE_PATH
			, EXCLUDE_YN
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(copyright)">
			, COPYRIGHT
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
			, BINARY_NAME
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
			, BINARY_SIZE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
			, BINARY_NOTICE
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
			, CUSTOM_BINARY_YN
			</if>
			, REF_PARTNER_ID
			, REPORT_FILE_ID
			, PRE_OBLIGATION_TYPE
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(obligationType)">
			, OBLIGATION_TYPE
			</if>
			, ADMIN_CHECK_YN
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(comments)">
			, COMMENTS
			</if>
			)
			VALUES
			(
			#{referenceId}
			, #{referenceDiv}
			, (CASE WHEN IFNULL(#{componentIdx}, '') = '' THEN (SELECT IFNULL(MAX(COMPONENT_IDX), 0) + 1 FROM OSS_COMPONENTS OC WHERE REFERENCE_ID=#{referenceId} AND REFERENCE_DIV=#{referenceDiv}) ELSE #{componentIdx} END)
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
			, (CASE WHEN #{ossId} = '' THEN NULL ELSE #{ossId} END)
			</if>
			, #{ossName}
			, REPLACE(#{ossVersion}, 'N/A','')
			, #{downloadLocation}
			, #{homepage}
			, #{filePath}
			, #{excludeYn}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(copyright)">
			, #{copyright}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
			, #{binaryName}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
			, #{binarySize}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
			, #{binaryNotice}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
			, #{customBinaryYn}
			</if>
			, #{refPartnerId}
			, #{reportFileId}
			, #{preObligationType}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(obligationType)">
			, #{obligationType}
			</if>
			, #{adminCheckYn}
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(comments)">
			, #{comments}
			</if>
			)
	</insert>
	
	<insert id="insertOssComponentsLicense" parameterType="oss.fosslight.domain.OssComponentsLicense">
		INSERT INTO
			OSS_COMPONENTS_LICENSE
			(
			COMPONENT_ID
			, LICENSE_ID
			, LICENSE_NAME
			, COPYRIGHT_TEXT
			, EXCLUDE_YN
			)
			VALUES
			(
			#{componentId}
			, #{licenseId}
			, #{licenseName}
			, #{copyrightText}
			, #{excludeYn}
			)
	</insert>
	
	<select id="selectProjectMaster2" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT T1.*,
			   T2.NOTICE_TYPE,
			   T2.NOTICE_TYPE_ETC,
			 
			 /* 다운로드 허용 플래그 */
			 <![CDATA[
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x01, 'Y', 'N') AS ALLOW_DOWNLOAD_NOTICE_HTML_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x02, 'Y', 'N') AS ALLOW_DOWNLOAD_NOTICE_TEXT_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x04, 'Y', 'N') AS ALLOW_DOWNLOAD_SIMPLE_HTML_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x08, 'Y', 'N') AS ALLOW_DOWNLOAD_SIMPLE_TEXT_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x10, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_SHEET_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x20, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_RDF_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x40, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_TAG_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x80, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_JSON_YN,
			 IF(T1.ALLOW_DOWNLOAD_BIT_FLAG & 0x100, 'Y', 'N') AS ALLOW_DOWNLOAD_SPDX_YAML_YN
			 ]]>
		  FROM PROJECT_MASTER T1
		  LEFT OUTER JOIN OSS_NOTICE T2 ON T1.PRJ_ID = T2.PRJ_ID
		 WHERE T1.USE_YN = 'Y'
		   AND T1.PRJ_ID = #{prjId}
	</select>
	
	<update id="updateProjectMaster" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER SET MODIFIER = #{loginUserName}, MODIFIED_DATE = now()
			<choose>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(identificationStatus)">
					, IDENTIFICATION_STATUS = #{identificationStatus}
					, VERIFICATION_STATUS = NULL
					, DESTRIBUTION_STATUS = NULL
<!-- 				, ALLOW_DOWNLOAD_BIT_FLAG = 1 -->
					, USE_CUSTOM_NOTICE_YN = 'N'
					, NOTICE_FILE_ID = NULL
					, NOTICE_TEXT_FILE_ID = NULL
					, SIMPLE_HTML_FILE_ID = NULL
					, SIMPLE_TEXT_FILE_ID = NULL
					, SPDX_SHEET_FILE_ID = NULL
					, SPDX_RDF_FILE_ID = NULL
					, SPDX_TAG_FILE_ID = NULL
					, SPDX_JSON_FILE_ID = NULL
					, SPDX_YAML_FILE_ID = NULL
					, REVIEW_REPORT_FILE_ID = NULL
					, ZIP_FILE_ID = NULL
				</when>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(verificationStatus)">
					, VERIFICATION_STATUS = #{verificationStatus}
					<choose>
						<when test="!@oss.fosslight.util.StringUtil@isEmpty(destributionStatus)">, DESTRIBUTION_STATUS = #{destributionStatus}</when>
						<when test="@oss.fosslight.util.StringUtil@equals('Y', resetDistributionStatus)">, DESTRIBUTION_STATUS = null</when>
					</choose>
					<if test="@oss.fosslight.util.StringUtil@equals('CONF', verificationStatus)">
						, SENT_OSDD_DEL_MAIL = 'Y'
						, SENT_OSDD_DIFF_FILE_MAIL = 'Y'
					</if>
					<if test="@oss.fosslight.util.StringUtil@equals('PROG', verificationStatus)">
						, USE_CUSTOM_NOTICE_YN = 'N'
						, NOTICE_FILE_ID = NULL
						, NOTICE_TEXT_FILE_ID = NULL
						, SIMPLE_HTML_FILE_ID = NULL
						, SIMPLE_TEXT_FILE_ID = NULL
						, SPDX_SHEET_FILE_ID = NULL
						, SPDX_RDF_FILE_ID = NULL
						, SPDX_TAG_FILE_ID = NULL
						, SPDX_JSON_FILE_ID = NULL
						, SPDX_YAML_FILE_ID = NULL
						, ZIP_FILE_ID = NULL
					</if>
					, ALLOW_DOWNLOAD_BIT_FLAG = #{allowDownloadBitFlag}
				</when>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(destributionStatus)">
					, DESTRIBUTION_STATUS = #{destributionStatus}
				</when>
			</choose>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusPartner)">
				<if test="@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusPartner)">
				,IDENTIFICATION_SUB_STATUS_PARTNER = NULL
				</if>
				<if test="!@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusPartner)">
				,IDENTIFICATION_SUB_STATUS_PARTNER = #{identificationSubStatusPartner}
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusDep)">
				<if test="@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusDep)">
				,IDENTIFICATION_SUB_STATUS_DEP = NULL
				</if>
				<if test="!@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusDep)">
				,IDENTIFICATION_SUB_STATUS_DEP = #{identificationSubStatusDep}
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusSrc)">
				<if test="@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusSrc)">
				,IDENTIFICATION_SUB_STATUS_SRC = NULL
				</if>
				<if test="!@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusSrc)">
				,IDENTIFICATION_SUB_STATUS_SRC = #{identificationSubStatusSrc}
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusBat)">
				<if test="@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusBat)">
				,IDENTIFICATION_SUB_STATUS_BAT = NULL
				</if>
				<if test="!@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusBat)">
				,IDENTIFICATION_SUB_STATUS_BAT = #{identificationSubStatusBat}
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusBin)">
				<if test="@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusBin)">
				,IDENTIFICATION_SUB_STATUS_BIN = NULL
				</if>
				<if test="!@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusBin)">
				,IDENTIFICATION_SUB_STATUS_BIN = #{identificationSubStatusBin}
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusAndroid)">
				<if test="@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusAndroid)">
				,IDENTIFICATION_SUB_STATUS_ANDROID = NULL
				</if>
				<if test="!@oss.fosslight.util.StringUtil@equals('X', identificationSubStatusAndroid)">
				,IDENTIFICATION_SUB_STATUS_ANDROID = #{identificationSubStatusAndroid}
				</if>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributeMasterCategory)">
				, DISTRIBUTE_MASTER_CATEGORY = #{distributeMasterCategory}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributeName) and @oss.fosslight.util.StringUtil@isEmpty(copyFlag)">
				, DISTRIBUTE_NAME = #{distributeName}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributeSoftwareType)">
				, DISTRIBUTE_SOFTWARE_TYPE = #{distributeSoftwareType}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributeDeployYn)">
				, DISTRIBUTE_DEPLOY_YN = #{distributeDeployYn}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(distributeDeployTime)">
				, DISTRIBUTE_DEPLOY_TIME = #{distributeDeployTime}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcCsvFileId)">
				, SRC_CSV_FILE_ID = #{srcCsvFileId}
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('14', referenceDiv)">
				, SRC_ANDROID_CSV_FILE_ID = #{srcAndroidCsvFileId}
				, SRC_ANDROID_NOTICE_FILE_ID = #{srcAndroidNoticeFileId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidNoticeXmlId)">
				, SRC_ANDROID_NOTICE_XML_ID = #{srcAndroidNoticeXmlId}
				</if>
				, SRC_ANDROID_RESULT_FILE_ID = #{srcAndroidResultFileId}
			</if>
			<if test="@oss.fosslight.util.StringUtil@equals('15', referenceDiv)">
				, BIN_CSV_FILE_ID = #{binCsvFileId}
				, BIN_BINARY_FILE_ID = #{binBinaryFileId}
			</if>
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('Y', needPackageFileReset)">
					, PACKAGE_FILE_ID = NULL
				</when>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(packageFileId)">
					, PACKAGE_FILE_ID = #{packageFileId}
				</when>
				<otherwise></otherwise>
			</choose>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(noticeFileId)">
			, NOTICE_FILE_ID = #{noticeFileId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(reviewReportFileId)">
			, REVIEW_REPORT_FILE_ID = #{reviewReportFileId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(useCustomNoticeYn)">
			, USE_CUSTOM_NOTICE_YN = #{useCustomNoticeYn}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(completeYn)">
				<choose>
					<when test="@oss.fosslight.util.StringUtil@equals('Y', completeYn)">
						, COMPLETE_YN = #{completeYn}
					</when>
					<otherwise>
						, COMPLETE_YN = #{completeYn}
						, DROP_YN = #{completeYn}
					</otherwise>
				</choose>
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(dropYn)">
			, DROP_YN = #{dropYn}
			</if>
			/* 2018-07-20 choye 추가 */
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(commId)">
			, COMM_ID = #{commId}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(statusRequestYn)">
			, STATUS_REQUEST_YN = #{statusRequestYn}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(changedNoticeYn)">
			, CHANGED_NOTICE_YN = #{changedNoticeYn}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(division)">
			, DIVISION = #{division}
			</if>
		WHERE PRJ_ID = #{prjId}
	</update>
	
	<update id="updateAndroidNoticeFileInfoWithLoadFromProject" parameterType="oss.fosslight.domain.Project">
	UPDATE PROJECT_MASTER SET 
				SRC_ANDROID_CSV_FILE_ID = NULL
				,SRC_ANDROID_NOTICE_FILE_ID = #{srcAndroidNoticeFileId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(srcAndroidNoticeXmlId)">
				,SRC_ANDROID_NOTICE_XML_ID = #{srcAndroidNoticeXmlId}
				</if>
				,SRC_ANDROID_RESULT_FILE_ID = #{srcAndroidResultFileId}
				, MODIFIER = #{loginUserName}, MODIFIED_DATE = now()
			WHERE PRJ_ID = #{prjId}
	</update>
	
	<update id="updateProjectStatusWithComplete" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper.updateProjectStatusWithComplete */
		UPDATE PROJECT_MASTER T1 INNER JOIN (
			SELECT 
				PM.PRJ_ID AS PRJ_ID,
				CASE WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_PARTNER, '') = '' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '10' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) = 0
							) THEN 'N' 
						WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_SRC, 'Y') <![CDATA[<>]]> 'N' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '10' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) > 0
							) THEN 'Y' 
						ELSE PM.IDENTIFICATION_SUB_STATUS_PARTNER END AS IDENTIFICATION_SUB_STATUS_PARTNER,
				CASE WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_DEP, '') = '' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '16' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) = 0
							) THEN 'N' 
						WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_DEP, 'Y') <![CDATA[<>]]> 'N' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '16' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) > 0
							) THEN 'Y' 
						ELSE PM.IDENTIFICATION_SUB_STATUS_DEP END AS IDENTIFICATION_SUB_STATUS_DEP,
				CASE WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_SRC, '') = '' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '11' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) = 0
							) THEN 'N' 
						WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_SRC, 'Y') <![CDATA[<>]]> 'N' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '11' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) > 0
							) THEN 'Y' 
						ELSE PM.IDENTIFICATION_SUB_STATUS_SRC END AS IDENTIFICATION_SUB_STATUS_SRC,
				CASE WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_BAT, '') = '' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '12' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) = 0
							) THEN 'N' 
						WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_SRC, 'Y') <![CDATA[<>]]> 'N' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '12' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) > 0
							) THEN 'Y' 
						ELSE PM.IDENTIFICATION_SUB_STATUS_BAT END AS IDENTIFICATION_SUB_STATUS_BAT,
				CASE WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_BIN, '') = '' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '15' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) = 0
							) THEN 'N' 
						WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_SRC, 'Y') <![CDATA[<>]]> 'N' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '15' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) > 0
							) THEN 'Y' 
						ELSE PM.IDENTIFICATION_SUB_STATUS_BIN END AS IDENTIFICATION_SUB_STATUS_BIN,
				CASE WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_ANDROID, '') = '' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '14' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) = 0
							) THEN 'N' 
						WHEN (
						IFNULL(PM.IDENTIFICATION_SUB_STATUS_SRC, 'Y') <![CDATA[<>]]> 'N' 
						AND IFNULL(
							(SELECT COUNT(1)
							FROM OSS_COMPONENTS OC
							WHERE OC.REFERENCE_DIV = '14' AND OC.REFERENCE_ID = PM.PRJ_ID), 0) > 0
							) THEN 'Y' 
						ELSE PM.IDENTIFICATION_SUB_STATUS_ANDROID END AS IDENTIFICATION_SUB_STATUS_ANDROID
			FROM PROJECT_MASTER PM
			WHERE PM.PRJ_ID = #{prjId}
		) T2 ON T1.PRJ_ID = T2.PRJ_ID
		SET T1.IDENTIFICATION_SUB_STATUS_PARTNER = T2.IDENTIFICATION_SUB_STATUS_PARTNER,
			T1.IDENTIFICATION_SUB_STATUS_DEP = T2.IDENTIFICATION_SUB_STATUS_DEP,
			T1.IDENTIFICATION_SUB_STATUS_SRC = T2.IDENTIFICATION_SUB_STATUS_SRC,
			T1.IDENTIFICATION_SUB_STATUS_BAT = T2.IDENTIFICATION_SUB_STATUS_BAT,
			T1.IDENTIFICATION_SUB_STATUS_BIN = T2.IDENTIFICATION_SUB_STATUS_BIN,
			T1.IDENTIFICATION_SUB_STATUS_ANDROID = T2.IDENTIFICATION_SUB_STATUS_ANDROID
		WHERE T1.PRJ_ID = #{prjId}
	
	</update>

	<update id="updateIdentificationConfirm" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper.updateIdentificationConfirm */
		UPDATE PROJECT_MASTER 
		SET
			MODIFIER = #{modifier}, MODIFIED_DATE = now()
			, IDENTIFICATION_STATUS = #{identificationStatus}
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('Y', skipPackageFlag)">
					,VERIFICATION_STATUS = #{verificationStatus}
					,DESTRIBUTION_STATUS = #{destributionStatus}
					<if test="@oss.fosslight.util.StringUtil@equals('NA', verificationStatus)">
						, PACKAGE_FILE_ID = NULL
						, NOTICE_FILE_ID = NULL
						, NOTICE_TEXT_FILE_ID = NULL
						, SIMPLE_HTML_FILE_ID = NULL
						, SIMPLE_TEXT_FILE_ID = NULL
						, SPDX_SHEET_FILE_ID = NULL
						, SPDX_RDF_FILE_ID = NULL
						, SPDX_TAG_FILE_ID = NULL
						, SPDX_JSON_FILE_ID = NULL
						, SPDX_YAML_FILE_ID = NULL
						, REVIEW_REPORT_FILE_ID = NULL
						, ZIP_FILE_ID = NULL
					</if>
				</when>
				<otherwise>
					,VERIFICATION_STATUS = NULL
					,DESTRIBUTION_STATUS = NULL
				</otherwise>
			</choose>
		WHERE 
			PRJ_ID = #{prjId}
	</update>
	<select id="selectOssComponentsLicenseList" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponentsLicense">
		SELECT
			*
		FROM
			OSS_COMPONENTS_LICENSE
		WHERE
			COMPONENT_ID = #{componentId}
		ORDER BY COMPONENT_LICENSE_ID
	</select>
	
	<update id="updateReadmeContent" parameterType="oss.fosslight.domain.Project">
		UPDATE 
			PROJECT_MASTER
		SET 
			README_CONTENT 	= #{readmeContent}
			, README_FILE_NAME 	= #{readmeFileName}
			, README_YN		= #{readmeYn}
		WHERE
			PRJ_ID			= #{prjId}
	</update>
	
	<update id="updateVerifyContents" parameterType="oss.fosslight.domain.Project">
		UPDATE
			PROJECT_MASTER
		SET
			EXCEPT_FILE_CONTENT = #{exceptFileContent},
			VERIFY_FILE_CONTENT = #{verifyFileContent}
		WHERE
			PRJ_ID	= #{prjId}
	</update>
	
	<select id="identificationSubGrid" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.ProjectIdentification">
		/* ProjectMapper identificationSubGrid */
		SELECT RESULT.* ,
		(SELECT X.OSS_LICENSE_COMB
				       FROM OSS_LICENSE_DECLARED X
				      WHERE X.OSS_ID = (SELECT M.OSS_ID
				                          FROM OSS_COMPONENTS M
				                         WHERE M.COMPONENT_ID = RESULT.COMPONENT_ID)
				        AND X.LICENSE_ID = RESULT.LICENSE_ID
						  AND X.OSS_LICENSE_IDX = RESULT.rnum) AS OSS_LICENSE_COMB
		FROM (
				SELECT 
				(CASE @vjob WHEN S.COMPONENT_ID THEN @rownum:=@rownum+1 ELSE @rownum:=1 END) rnum,
				(@vjob:=S.COMPONENT_ID) vjob,
					CONCAT(S.COMPONENT_ID, '-', S.COMPONENT_LICENSE_ID) AS GRID_ID,
					S.COMPONENT_LICENSE_ID,
					S.COMPONENT_ID,
					S.LICENSE_ID,
					IFNULL(S.LICENSE_NAME, '') AS LICENSE_NAME,
					IFNULL(S.LICENSE_TEXT, '') AS LICENSE_TEXT,
					IFNULL(S.COPYRIGHT_TEXT, '') AS COPYRIGHT_TEXT,
					S.EXCLUDE_YN
				FROM OSS_COMPONENTS_LICENSE S, (SELECT @vjob:='', @rownum:=0 FROM DUAL) b
			   WHERE 
			   <choose>
			   		<when test="componentIdList != null">
						<foreach collection="componentIdList" item="_componentId" open="S.COMPONENT_ID IN (" close=")" separator=",">
						#{_componentId}
						</foreach>	   		
			   		</when>
			   		<otherwise>S.COMPONENT_ID = #{componentId}</otherwise>
			   </choose>
			   ORDER BY COMPONENT_ID, (CASE WHEN S.LICENSE_ID IS NULL THEN 99999 ELSE 1 END), COMPONENT_LICENSE_ID ASC
		) RESULT
		ORDER BY COMPONENT_ID, RNUM ASC 
	</select>
	
	<select id="getLicensesId" parameterType="String" resultType="String">
	SELECT
		LICENSE_ID
	FROM
		LICENSE_MASTER
	WHERE
		LICENSE_NAME = #{licenseName}
	LIMIT 1
	</select>
	
	<select id="selectIdentificationGridList" resultType="oss.fosslight.domain.ProjectIdentification" parameterType="oss.fosslight.domain.ProjectIdentification">
		/* ProjectMapper selectIdentificationGridList */
		SELECT 
			M.COMPONENT_ID AS GRID_ID,
			M.COMPONENT_ID,
			M.REFERENCE_ID,
			M.REFERENCE_DIV,
			<if test="@oss.fosslight.util.StringUtil@equals('N', typeFlag)">
				M.COMPONENT_IDX,
			</if>
			IFNULL(M.OSS_ID, '') AS OSS_ID,
			IFNULL(M.OSS_NAME, '') AS OSS_NAME,
			IFNULL(M.OSS_VERSION, '') AS OSS_VERSION,
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('N', bulkRegistYn)">IFNULL(M.DOWNLOAD_LOCATION, '') AS DOWNLOAD_LOCATION,</when>
				<otherwise>IFNULL((SELECT GROUP_CONCAT(D.DOWNLOAD_LOCATION SEPARATOR ',') FROM OSS_DOWNLOADLOCATION D WHERE D.OSS_ID = M.OSS_ID ), M.DOWNLOAD_LOCATION) AS DOWNLOAD_LOCATION,</otherwise>
			</choose>
			IFNULL(M.HOMEPAGE, '') AS HOMEPAGE,
			IFNULL(M.FILE_PATH, '') AS FILE_PATH,
			<choose>
				<when test="@oss.fosslight.util.StringUtil@equals('20', referenceDiv)">IF(M.BINARY_NAME IS NOT NULL AND M.BINARY_NAME != '', M.BINARY_NAME, M.FILE_PATH) AS BINARY_NAME,</when>
				<otherwise>IFNULL(M.BINARY_NAME, '') AS BINARY_NAME,</otherwise>
			</choose>
			IFNULL(M.BINARY_SIZE, '') AS BINARY_SIZE,
			IFNULL(M.BINARY_NOTICE, '') AS BINARY_NOTICE,
			IFNULL(M.CUSTOM_BINARY_YN, 'N') AS CUSTOM_BINARY_YN,
			IFNULL(M.EXCLUDE_YN, 'N') AS EXCLUDE_YN,
			IFNULL(M.COPYRIGHT, '') AS COPYRIGHT_TEXT,
			M.BAT_STRING_MATCH_PERCENTAGE,
			M.BAT_PERCENTAGE,
			M.BAT_SCORE,
			M.BAT_CHECKSUM,
			IFNULL(L1.LICENSE_DIV, 'S') AS LICENSE_DIV,
			M.COMMENTS,
			M.REF_PARTNER_ID,
			M.OBLIGATION_TYPE,
			M.DEPENDENCIES,
			CASE WHEN IFNULL(M.EXCLUDE_YN, 'N') != 'Y' THEN 
			(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
				FROM NVD_DATA_SCORE_V3 NVD
				WHERE NVD.PRODUCT != '-'
				AND NVD.PRODUCT = REPLACE(IFNULL(M.REF_OSS_NAME, IFNULL(L1.OSS_NAME, M.OSS_NAME)), ' ', '_')
			<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
				AND NVD.VERSION = M.OSS_VERSION
			</if>
			) ELSE NULL END CVSS_SCORE_MAX,
			CASE WHEN IFNULL(M.EXCLUDE_YN, 'N') != 'Y' THEN 
			(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
				FROM NVD_DATA_SCORE_V3 NVD
				WHERE NVD.VENDORPRODUCT IS NOT NULL
				AND NVD.PRODUCT != '-'
				AND IFNULL(L1.OSS_NAME, M.OSS_NAME) REGEXP '[-]'
				AND NVD.VENDORPRODUCT = REPLACE(IFNULL(M.REF_OSS_NAME, IFNULL(L1.OSS_NAME, M.OSS_NAME)), ' ', '_')
			<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
				AND NVD.VERSION = M.OSS_VERSION
			</if>
			) ELSE NULL END CVSS_SCORE_MAX1,
			CASE WHEN IFNULL(M.EXCLUDE_YN, 'N') != 'Y' THEN 
			(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
				FROM NVD_DATA_SCORE_V3 NVD
				WHERE NVD.PRODUCT != '-'
			<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
				AND NVD.VERSION = M.OSS_VERSION
			</if>
				AND NVD.PRODUCT IN (SELECT REPLACE(OSS_NICKNAME, ' ', '_') FROM OSS_NICKNAME WHERE OSS_NAME = IFNULL(M.REF_OSS_NAME, IFNULL(L1.OSS_NAME, M.OSS_NAME)))
			) ELSE NULL END CVSS_SCORE_MAX2,
			CASE WHEN IFNULL(M.EXCLUDE_YN, 'N') != 'Y' THEN 
			(SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',MAX(NVD.CVSS_SCORE),'@',NVD.CVE_ID)
				FROM NVD_DATA_SCORE_V3 NVD
				WHERE NVD.VENDORPRODUCT IS NOT NULL
			<if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
				AND NVD.VERSION = M.OSS_VERSION
			</if>
				AND NVD.VENDORPRODUCT IN (SELECT OSS_NICKNAME FROM OSS_NICKNAME WHERE OSS_NAME = IFNULL(M.REF_OSS_NAME, IFNULL(L1.OSS_NAME, M.OSS_NAME)) AND OSS_NICKNAME REGEXP '[-]')
			) ELSE NULL END CVSS_SCORE_MAX3
		<if test="@oss.fosslight.util.StringUtil@equals('30', referenceDiv)">
			, BAR.GUIREPORT_FLAG
		</if>
			, M.REF_OSS_NAME
	   FROM OSS_COMPONENTS M
	   LEFT OUTER JOIN OSS_MASTER L1 
		       ON M.OSS_NAME = L1.OSS_NAME
              AND M.OSS_VERSION = L1.OSS_VERSION
              AND L1.USE_YN = 'Y'
		<if test="@oss.fosslight.util.StringUtil@equals('30', referenceDiv)">
		LEFT OUTER JOIN (
			SELECT BAT_ID, CHECK_SUM, GUIREPORT_FLAG
			  FROM BINARY_ANALYSIS_RESULT
			 WHERE BAT_ID = ${refBatId}
		  GROUP BY CHECK_SUM, GUIREPORT_FLAG
		) BAR
		ON M.REFERENCE_ID = BAR.BAT_ID
	   AND M.BAT_CHECKSUM = BAR.CHECK_SUM
		</if>
	  WHERE M.REFERENCE_DIV = #{referenceDiv}
	    AND M.REFERENCE_ID = #{referenceId}
	    <if test="!@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
	    AND IFNULL(M.OSS_VERSION, '') = ''
	    </if>
	    <if test="@oss.fosslight.util.StringUtil@isEmpty(ossVersionEmptyFlag)">
	    AND IFNULL(M.OSS_VERSION, '') != ''
	    </if>
	    <if test="!@oss.fosslight.util.StringUtil@isEmpty(componentId)">
	    AND M.COMPONENT_ID = #{componentId}
	    </if>
	    <if test="@oss.fosslight.util.StringUtil@equals('Y', sortAndroidFlag)">ORDER BY CONCAT(IFNULL(BINARY_NAME,''), IFNULL(FILE_PATH,'')), (0 + REPLACE(CASE WHEN IFNULL(BAT_PERCENTAGE, '0') = '' THEN '0' ELSE IFNULL(BAT_PERCENTAGE, '0') END , '%', '') ) DESC, COMPONENT_ID</if>
	  
	</select>
	
	<select id="getPartnerOssList" parameterType="oss.fosslight.domain.OssComponents" resultType="oss.fosslight.domain.OssComponents">
	/* ProjectMapper.getPartnerOssList */
	SELECT 
		T1.COMPONENT_ID AS GRID_ID
		, T1.COMPONENT_ID
		, T1.COMPONENT_IDX		/* 2018-08-06 choye 추가 (ETC)*/
		, T1.COMPONENT_ID AS REF_COMPONENT_ID
		, T1.REFERENCE_ID
		, T1.REFERENCE_DIV
		, T1.COMPONENT_IDX
		, T1.OSS_ID
		, T1.OSS_NAME
		, T1.OSS_VERSION
		, T1.DOWNLOAD_LOCATION
		, T1.HOMEPAGE
		, T1.FILE_PATH
		, IF(T1.BINARY_NAME IS NOT NULL AND T1.BINARY_NAME != '', T1.BINARY_NAME, T1.FILE_PATH) AS BINARY_NAME
		, T1.REF_PARTNER_ID
		, (SELECT PARTNER_NAME FROM PARTNER_MASTER WHERE PARTNER_ID = IFNULL(T1.REF_PARTNER_ID, T1.REFERENCE_ID)) AS REF_PARTNER_NAME
		, T1.REF_PRJ_ID
		, T1.EXCLUDE_YN
		, GROUP_CONCAT(T2.LICENSE_NAME ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_NAME
		, GROUP_CONCAT(T2.LICENSE_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_TEXT
		, CASE WHEN IFNULL(T1.COPYRIGHT, '') != '' THEN T1.COPYRIGHT ELSE GROUP_CONCAT(T2.COPYRIGHT_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') END COPYRIGHT_TEXT
		, T3.VULN_YN
		, T3.CVSS_SCORE
		, T3.CVE_ID
	FROM 
		OSS_COMPONENTS T1 
		LEFT JOIN OSS_COMPONENTS_LICENSE T2 ON T1.COMPONENT_ID = T2.COMPONENT_ID AND T2.EXCLUDE_YN = 'N'
		LEFT JOIN OSS_MASTER T3 ON T1.OSS_NAME = T3.OSS_NAME AND T1.OSS_VERSION = T3.OSS_VERSION AND T3.USE_YN = 'Y'
	WHERE 
		REFERENCE_ID=#{referenceId}
		AND REFERENCE_DIV=#{referenceDiv}
	GROUP BY T1.COMPONENT_ID
	</select>
	
	<select id="getPartnerOssListValidation" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.ProjectIdentification">
	/* ProjectMapper.getPartnerOssList */
	SELECT 
		T1.COMPONENT_ID AS GRID_ID
		, T1.COMPONENT_ID
		, T1.COMPONENT_IDX		/* 2018-08-06 choye 추가 (ETC)*/
		, T1.COMPONENT_ID AS REF_COMPONENT_ID
		, T1.REFERENCE_ID
		, T1.REFERENCE_DIV
		, T1.COMPONENT_IDX
		, T1.OSS_ID
		, T1.OSS_NAME
		, T1.OSS_VERSION
		, T1.DOWNLOAD_LOCATION
		, T1.HOMEPAGE
		, T1.FILE_PATH
		, IF(T1.BINARY_NAME IS NOT NULL AND T1.BINARY_NAME != '', T1.BINARY_NAME, T1.FILE_PATH) AS BINARY_NAME
		, T1.REF_PARTNER_ID
		, (SELECT PARTNER_NAME FROM PARTNER_MASTER WHERE PARTNER_ID = IFNULL(T1.REF_PARTNER_ID, T1.REFERENCE_ID)) AS REF_PARTNER_NAME
		, T1.REF_PRJ_ID
		, T1.EXCLUDE_YN
		, GROUP_CONCAT(T2.LICENSE_NAME ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_NAME
		, GROUP_CONCAT(T2.LICENSE_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_TEXT
		, CASE WHEN IFNULL(T1.COPYRIGHT, '') != '' THEN T1.COPYRIGHT ELSE GROUP_CONCAT(T2.COPYRIGHT_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') END COPYRIGHT_TEXT
		, T3.VULN_YN
		, T3.CVSS_SCORE
		, T3.CVE_ID
	FROM 
		OSS_COMPONENTS T1 
		LEFT JOIN OSS_COMPONENTS_LICENSE T2 ON T1.COMPONENT_ID = T2.COMPONENT_ID AND T2.EXCLUDE_YN = 'N'
		LEFT JOIN OSS_MASTER T3 ON T1.OSS_NAME = T3.OSS_NAME AND T1.OSS_VERSION = T3.OSS_VERSION AND T3.USE_YN = 'Y'
	WHERE 
		REFERENCE_ID=#{referenceId}
		AND REFERENCE_DIV=#{referenceDiv}
	GROUP BY T1.COMPONENT_ID
	</select>
	
	<select id="getIdentificationProjectSearch" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.ProjectIdentification">
	/* ProjectMapper.getIdentificationProjectSearch */
	SELECT 
		T1.COMPONENT_ID
		, T1.REFERENCE_ID
		, T1.REFERENCE_DIV
		, T1.COMPONENT_IDX 
		, T1.OSS_ID
		, T1.OSS_NAME
		, T1.OSS_VERSION
		, T1.DOWNLOAD_LOCATION
		, T1.HOMEPAGE
		, T1.FILE_PATH
		, GROUP_CONCAT(T2.LICENSE_NAME ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_NAME
		, GROUP_CONCAT(T2.LICENSE_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS LICENSE_TEXT
		, GROUP_CONCAT(T2.COPYRIGHT_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') AS COPYRIGHT_TEXT
		, T1.BINARY_NAME
		, CASE WHEN NVD.CVSS_SCORE IS NOT NULL THEN NVD.CVSS_SCORE ELSE IFNULL(NVD1.CVSS_SCORE, 0) END CVSS_SCORE 
		, IFNULL(T1.EXCLUDE_YN, 'N') AS EXCLUDE_YN 
	FROM 
		OSS_COMPONENTS T1 
		LEFT JOIN OSS_COMPONENTS_LICENSE T2 
			ON T1.COMPONENT_ID = T2.COMPONENT_ID
		LEFT OUTER JOIN (
			SELECT PRODUCT, VERSION, CVSS_SCORE, CVE_ID, 'Y' AS VULN_YN FROM NVD_DATA_SCORE_V3
		) NVD ON NVD.PRODUCT = T1.OSS_NAME AND NVD.VERSION = IF(IFNULL(T1.OSS_VERSION, '') = '','-', T1.OSS_VERSION) 
		LEFT OUTER JOIN (
			SELECT PRODUCT, VERSION, CVSS_SCORE, CVE_ID, 'Y' AS VULN_YN FROM NVD_DATA_SCORE_V3
		) NVD1 ON NVD1.PRODUCT = REPLACE(T1.OSS_NAME, ' ', '_') AND NVD1.VERSION = IF(IFNULL(T1.OSS_VERSION, '') = '','-', T1.OSS_VERSION) 
	WHERE 
		T1.REFERENCE_ID=#{referenceId}
		AND T1.REFERENCE_DIV=#{referenceDiv}
	GROUP BY T1.COMPONENT_ID
	<if test="sortField eq 'componentId'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.COMPONENT_ID ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.COMPONENT_ID DESC
		</if>
	</if>
	<if test="sortField eq 'ossName'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.OSS_NAME ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.OSS_NAME DESC
		</if>
	</if>
	<if test="sortField eq 'ossVersion'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.OSS_VERSION ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.OSS_VERSION DESC
		</if>
	</if>
	<if test="sortField eq 'downloadLocation'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.DOWNLOAD_LOCATION ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.DOWNLOAD_LOCATION DESC
		</if>
	</if>
	<if test="sortField eq 'homepage'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.HOMEPAGE ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.HOMEPAGE DESC
		</if>
	</if>
	<if test="sortField eq 'licenseName'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, GROUP_CONCAT(T2.LICENSE_NAME ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, GROUP_CONCAT(T2.LICENSE_NAME ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') DESC
		</if>
	</if>
	<if test="sortField eq 'copyrightText'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, GROUP_CONCAT(T2.COPYRIGHT_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, GROUP_CONCAT(T2.COPYRIGHT_TEXT ORDER BY T2.LICENSE_ID DESC SEPARATOR ',') DESC
		</if>
	</if>
	<if test="sortField eq 'filePath'">
		<if test="sortOrder eq 'asc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.FILE_PATH ASC
		</if>
		<if test="sortOrder eq 'desc'">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.FILE_PATH DESC
		</if>
	</if>
	<if test="sortField eq ''">
			ORDER BY IFNULL(T1.EXCLUDE_YN, 'N') ASC, T1.COMPONENT_IDX DESC
	</if>	
	</select>
	
	<select id="selectThirdComponent" parameterType="String" resultType="oss.fosslight.domain.OssComponentsLicense">
	SELECT
		COMPONENT_ID
	FROM
		OSS_COMPONENTS
	WHERE
		REFERENCE_ID = #{prjId}
		AND REFERENCE_DIV = '10'
	</select>
	
	<select id="selectThirdComponent2" parameterType="String" resultType="oss.fosslight.domain.OssComponentsLicense">
	SELECT
		COMPONENT_ID
	FROM
		OSS_COMPONENTS
	WHERE
		REFERENCE_ID = #{prjId}
		AND REFERENCE_DIV = '20'
	</select>
	
	<insert id="insertOssComponentsLicenseThird" parameterType="oss.fosslight.domain.OssComponentsLicense">
		INSERT INTO 
			OSS_COMPONENTS_LICENSE(
					COMPONENT_ID
					, LICENSE_ID
					, LICENSE_NAME
					, LICENSE_TEXT
					, COPYRIGHT_TEXT
					)
			SELECT
					#{componentId}
					, LICENSE_ID
					, LICENSE_NAME
					, LICENSE_TEXT
					, COPYRIGHT_TEXT	
			FROM 
				OSS_COMPONENTS_LICENSE
			WHERE 
				COMPONENT_ID = #{lastComponentsId}
	</insert>
	
	<update id="updateExcludeYn" parameterType="oss.fosslight.domain.OssComponentsLicense">
		UPDATE OSS_COMPONENTS 
		   SET EXCLUDE_YN = #{excludeYn}
		 WHERE COMPONENT_ID = #{componentId}
	</update>
	<select id="getProjectCreator" resultType="oss.fosslight.domain.Project">
		SELECT DISTINCT CREATOR
		
		FROM PROJECT_MASTER
		
		WHERE IFNULL(CREATOR, '') != '';
	</select>
	<select id="getProjectReviwer" resultType="oss.fosslight.domain.Project">
		SELECT DISTINCT REVIEWER
		
		FROM PROJECT_MASTER
		
		WHERE IFNULL(REVIEWER, '') != ''
	</select>
	
	<select id="selectProjectDetailExcel" resultType="oss.fosslight.domain.Project" parameterType="String">
	SELECT
		t1.CREATED_DATE
		, t1.PRJ_ID
		, t1.PRJ_VERSION
		, t1.CREATOR
		, t1.REVIEWER
		, t1.PRJ_NAME
		, IF((SELECT COUNT(*) FROM OSS_COMPONENTS WHERE REFERENCE_ID = t1.PRJ_ID AND REFERENCE_DIV = '13') > 0, 'USED', '') AS OSS
	FROM
		PROJECT_MASTER t1
	WHERE
		t1.PRJ_ID = #{parameter}
	</select>
	
	<select id="getProjectReportExcelList" resultType="oss.fosslight.domain.ProjectIdentification" parameterType="oss.fosslight.domain.ProjectIdentification">
	SELECT
		*
	FROM
		OSS_COMPONENTS t1
		LEFT JOIN OSS_COMPONENTS_LICENSE t2 ON t1.COMPONENT_ID = t2.COMPONENT_ID
	WHERE
		t1.REFERENCE_DIV = #{referenceDiv}
		AND t1.REFERENCE_ID = #{referenceId}
	</select>
		
	<select id="selectOssComponentInfo" parameterType="Map" resultType="oss.fosslight.domain.ProjectIdentification">
		SELECT M.* FROM (
			SELECT S.* FROM OSS_COMPONENTS S
			 WHERE S.REFERENCE_DIV != '30'
			   AND S.OSS_NAME = #{ossName}
			   AND S.BINARY_NAME = #{binaryName}
			   AND S.BINARY_SIZE = #{binarySize}
			 ORDER BY S.MODIFIED_DATE DESC
		)M
		LIMIT 1
	</select>
	
	<update id="registPackageFileId" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER 
		   SET PACKAGE_FILE_ID = #{packageFileId}
		 WHERE PRJ_ID = #{prjId}
	</update>
	
	<update id="updatePartnerOssList" parameterType="oss.fosslight.domain.OssComponents">
		/* ProjectMapper.updatePartnerOssList */
		UPDATE OSS_COMPONENTS SET OSS_NAME = #{ossName}, EXCLUDE_YN = #{excludeYn} WHERE COMPONENT_ID = #{componentId};
	</update>
	<delete id="deleteOssComponentsWithIds" parameterType="oss.fosslight.domain.OssComponents">
	/* ProjectMapper.deleteComponents */
		DELETE FROM OSS_COMPONENTS 
	 	WHERE 
	 		REFERENCE_ID = #{referenceId}
			AND REFERENCE_DIV = #{referenceDiv}
	 		<foreach collection="ossComponentsIdList" item="item" separator="," open="AND COMPONENT_ID NOT IN (" close=")">#{item}</foreach>
	</delete>
	
	<delete id="deleteOssComponentsWithIds2" parameterType="oss.fosslight.domain.OssComponents">
	/* ProjectMapper.deleteComponents */
		DELETE FROM OSS_COMPONENTS 
	 	WHERE 
	 		REFERENCE_ID = #{referenceId}
			AND REFERENCE_DIV = #{referenceDiv}
	 		<foreach collection="ossComponentsIdList" item="item" separator="," open="AND COMPONENT_ID IN (" close=")">#{item}</foreach>
	</delete>
	
	<delete id="deleteOssComponentsLicenseWithIds" parameterType="oss.fosslight.domain.OssComponents">
	/* ProjectMapper.deleteComponents */
		DELETE
		FROM OSS_COMPONENTS_LICENSE
		WHERE 
		<foreach collection="ossComponentsIdList" item="item" separator=" OR ">COMPONENT_ID = #{item}</foreach>
	</delete>
	
	<select id="getDeleteOssComponentsLicenseIds" parameterType="oss.fosslight.domain.OssComponents" resultType="String">
		SELECT COMPONENT_ID
		  FROM OSS_COMPONENTS
		 WHERE REFERENCE_ID = #{referenceId}
		   AND REFERENCE_DIV = #{referenceDiv}
		   <foreach collection="ossComponentsIdList" item="item" open="AND COMPONENT_ID NOT IN (" separator="," close=")">#{item}</foreach>
	</select>

	<insert id="insertOssComponentsCopy" parameterType="oss.fosslight.domain.OssComponents" useGeneratedKeys="true" keyProperty="componentId">
	/* ProjectMapper.insertOssComponentsCopy */
		INSERT INTO 
			OSS_COMPONENTS(
					REFERENCE_ID
					, REFERENCE_DIV
					, COMPONENT_IDX
					, OSS_ID
					, OSS_NAME	
					, OSS_VERSION
					, DOWNLOAD_LOCATION	
					, HOMEPAGE	
					, FILE_PATH
					, EXCLUDE_YN
					, COPYRIGHT
					, OBLIGATION_TYPE	
					<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
					, REF_PARTNER_ID
					</if>
					<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPrjId)">
					, REF_PRJ_ID
					</if>
					
					<if test="@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, REF_COMPONENT_ID
					, BINARY_NAME
					, BINARY_SIZE
					, BINARY_NOTICE
					</if>
					, REF_DIV
					, PRE_OBLIGATION_TYPE
					, ADMIN_CHECK_YN
					)
			SELECT
					#{referenceId}
					, #{referenceDiv}	
					, (SELECT IFNULL(MAX(COMPONENT_IDX), 0) + 1 FROM OSS_COMPONENTS OC WHERE REFERENCE_ID=#{referenceId} AND REFERENCE_DIV=#{referenceDiv})
					, OSS_ID
					<if test="@oss.fosslight.util.StringUtil@equals('10', referenceDiv)">
					, #{ossName}
					</if>
					<if test="@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, OSS_NAME
					</if>
					, OSS_VERSION	
					, DOWNLOAD_LOCATION	
					, HOMEPAGE	
					<if test="@oss.fosslight.util.StringUtil@equals('N', androidFlag) and @oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, '' AS FILE_PATH
					</if>
					<if test="!@oss.fosslight.util.StringUtil@equals('N', androidFlag) or !@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, FILE_PATH
					</if>
					, #{excludeYn}
					, COPYRIGHT
					, OBLIGATION_TYPE
					<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">	
					, #{refPartnerId}
					</if>
					<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPrjId)">
					, #{refPrjId}
					</if>
					
					<if test="@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, REF_COMPONENT_ID
					, BINARY_NAME
					, BINARY_SIZE
					, BINARY_NOTICE
					</if>
					, REFERENCE_DIV
					, PRE_OBLIGATION_TYPE
					, ADMIN_CHECK_YN
			FROM OSS_COMPONENTS
			WHERE COMPONENT_ID = #{refComponentId}
	</insert>
	
	<insert id="insertOssComponentsLicenseCopy" parameterType="oss.fosslight.domain.OssComponents">
	/* ProjectMapper.insertOssComponentsLicenseCopy */
		INSERT INTO 
			OSS_COMPONENTS_LICENSE(
					COMPONENT_ID
					, LICENSE_ID
					, LICENSE_NAME
					, LICENSE_TEXT
					, COPYRIGHT_TEXT
					, EXCLUDE_YN
					)
			SELECT
					#{componentId}
					, LICENSE_ID
				<if test="@oss.fosslight.util.StringUtil@equals('10', referenceDiv)">
					, IFNULL(NULLIF((SELECT SHORT_IDENTIFIER FROM LICENSE_MASTER WHERE LICENSE_NAME = T1.LICENSE_NAME), ''), T1.LICENSE_NAME) AS LICENSE_NAME
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, LICENSE_NAME
				</if>
					, LICENSE_TEXT
					, COPYRIGHT_TEXT
					, EXCLUDE_YN
			FROM 
			(
				SELECT 
					COMPONENT_LICENSE_ID
					, LICENSE_ID
				<if test="@oss.fosslight.util.StringUtil@equals('10', referenceDiv)">
					, IFNULL(NULLIF((SELECT LICENSE_NAME FROM LICENSE_NICKNAME WHERE LICENSE_NICKNAME = OCL.LICENSE_NAME), ''), OCL.LICENSE_NAME) AS LICENSE_NAME
				</if>
				<if test="@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					, LICENSE_NAME
				</if>
					, LICENSE_TEXT
					, COPYRIGHT_TEXT
					, EXCLUDE_YN
				FROM 
					OSS_COMPONENTS_LICENSE OCL
				WHERE 
					COMPONENT_ID = #{refComponentId}
				<if test="@oss.fosslight.util.StringUtil@equals('50', referenceDiv)">
					AND EXCLUDE_YN <![CDATA[<>]]> 'Y'
					<if test="!@oss.fosslight.util.StringUtil@equals('Y', adminCheckYn)">
						AND LICENSE_ID NOT IN (SELECT LICENSE_ID FROM LICENSE_MASTER WHERE USE_YN = 'Y' AND IFNULL(OBLIGATION_DISCLOSING_SRC_YN,'N') = 'N' AND IFNULL(OBLIGATION_NOTIFICATION_YN, 'N') = 'N' AND IFNULL(OBLIGATION_NEEDS_CHECK_YN,'N') = 'N')
					</if>
				</if>
			) T1
			
			ORDER BY T1.COMPONENT_LICENSE_ID
	</insert>
	
	<update id="updateSrcOssList" parameterType="oss.fosslight.domain.ProjectIdentification" useGeneratedKeys="true" keyProperty="componentId">
	/* ProjectMapper.updateSrcOssList */
		UPDATE 
			OSS_COMPONENTS 
		SET OSS_ID = #{ossId}
			, OSS_NAME = TRIM(#{ossName})
			, OSS_VERSION = TRIM(REPLACE(#{ossVersion}, 'N/A',''))
			, DOWNLOAD_LOCATION = #{downloadLocation}
			, HOMEPAGE = #{homepage}
			, FILE_PATH = #{filePath}
			, EXCLUDE_YN = #{excludeYn}
			, BINARY_NAME = #{binaryName}
			, BINARY_NOTICE = #{binaryNotice}
			, CUSTOM_BINARY_YN = #{customBinaryYn}
			, COPYRIGHT = #{copyrightText}
			<if test="@oss.fosslight.util.StringUtil@equals('Y', bomWithAndroidFlag)">
			, OBLIGATION_TYPE = #{obligationType}
			</if>
			, COMMENTS = #{comments}
			<if test="@oss.fosslight.util.StringUtil@equals('16', referenceDiv) and !@oss.fosslight.util.StringUtil@isEmpty(dependencies)">
			, DEPENDENCIES = #{dependencies}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(refOssName)">
			, REF_OSS_NAME = #{refOssName}
			</if>
		WHERE
			COMPONENT_ID = #{componentId}
	</update>
	
	<insert id="insertSrcOssList" parameterType="oss.fosslight.domain.ProjectIdentification" useGeneratedKeys="true" keyProperty="componentId">
	/* ProjectMapper.insertSrcOssList */
			INSERT INTO 
				OSS_COMPONENTS
					(
						REFERENCE_ID
						, REFERENCE_DIV
						, COMPONENT_IDX
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
						, OSS_ID
						</if>
						, OSS_NAME
						, OSS_VERSION
						, DOWNLOAD_LOCATION
						, HOMEPAGE
						, FILE_PATH
						, EXCLUDE_YN
						, COPYRIGHT
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
						, BINARY_NAME
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
						, BINARY_SIZE
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
						, BINARY_NOTICE
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
						, CUSTOM_BINARY_YN
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
						, REF_PARTNER_ID
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPrjId)">
						, REF_PRJ_ID
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refBatId)">
						, REF_BAT_ID
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refComponentId)">
						, REF_COMPONENT_ID
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(reportFileId)">
						, REPORT_FILE_ID
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(batStringMatchPercentage)">
						, BAT_STRING_MATCH_PERCENTAGE
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(batPercentage)">
						, BAT_PERCENTAGE
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(batScore)">
						, BAT_SCORE
						</if>
						<if test="@oss.fosslight.util.StringUtil@equals('Y', bomWithAndroidFlag)">
						, OBLIGATION_TYPE
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(comments)">
						, COMMENTS
						</if>
						<if test="@oss.fosslight.util.StringUtil@equals('16', referenceDiv) and !@oss.fosslight.util.StringUtil@isEmpty(dependencies)">
						, DEPENDENCIES
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refOssName)">
						, REF_OSS_NAME
						</if>
					)
			VALUES
					(
						#{referenceId}
						, #{referenceDiv}
						, #{componentIdx}
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(ossId)">
						, (CASE WHEN #{ossId} = '' THEN NULL ELSE #{ossId} END)
						</if>
						, TRIM(#{ossName})
						, TRIM(REPLACE(#{ossVersion}, 'N/A',''))
						, #{downloadLocation}
						, #{homepage}
						, #{filePath}
						, #{excludeYn}
						, #{copyrightText}
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryName)">
						, #{binaryName}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(binarySize)">
						, #{binarySize}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(binaryNotice)">
						, #{binaryNotice}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(customBinaryYn)">
						, #{customBinaryYn}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPartnerId)">
						, #{refPartnerId}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refPrjId)">
						, #{refPrjId}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refBatId)">
						, #{refBatId}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refComponentId)">
						, #{refComponentId}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(reportFileId)">
						, #{reportFileId}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(batStringMatchPercentage)">
						, #{batStringMatchPercentage}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(batPercentage)">
						, #{batPercentage}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(batScore)">
						, #{batScore}
						</if>
						<if test="@oss.fosslight.util.StringUtil@equals('Y', bomWithAndroidFlag)">
						, #{obligationType}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(comments)">
						, #{comments}
						</if>
						<if test="@oss.fosslight.util.StringUtil@equals('16', referenceDiv) and !@oss.fosslight.util.StringUtil@isEmpty(dependencies)">
						, #{dependencies}
						</if>
						<if test="!@oss.fosslight.util.StringUtil@isEmpty(refOssName)">
						, #{refOssName}
						</if>
					)
	</insert>
	
	<update id="updateBom" parameterType="oss.fosslight.domain.OssComponents" useGeneratedKeys="true" keyProperty="componentId">
		UPDATE 
			OSS_COMPONENTS 
		SET 
			OBLIGATION_TYPE = #{obligationType}
		WHERE
			COMPONENT_ID = #{componentId}
	</update>
	
	<update id="updateProjectSubStatus" parameterType="oss.fosslight.domain.Project">
		UPDATE 
			PROJECT_MASTER
		SET 
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusPartner)">
			IDENTIFICATION_SUB_STATUS_PARTNER = #{identificationSubStatusPartner}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusDep)">
			IDENTIFICATION_SUB_STATUS_DEP = #{identificationSubStatusDep}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusSrc)">
			IDENTIFICATION_SUB_STATUS_SRC = #{identificationSubStatusSrc}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusBat)">
			IDENTIFICATION_SUB_STATUS_BAT = #{identificationSubStatusBat}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusAndroid)">
			IDENTIFICATION_SUB_STATUS_ANDROID = #{identificationSubStatusAndroid}
			</if>
			<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationSubStatusBin)">
			IDENTIFICATION_SUB_STATUS_BIN = #{identificationSubStatusBin}
			</if>
		WHERE
			PRJ_ID = #{prjId}
	</update>
	
	<select id="selectLicenseMaster" parameterType="oss.fosslight.domain.LicenseMaster" resultType="oss.fosslight.domain.LicenseMaster">
		SELECT *
		  FROM LICENSE_MASTER
		 WHERE LICENSE_NAME = #{licenseName}
	</select>
	
	<!-- 사용하지 말것 CommonFunction.findOssIdAndName 으로 변경 -->
	<update id="updateComponentsOssId" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper.updateComponentsOssId */
		UPDATE 
			OSS_COMPONENTS A1
			LEFT OUTER JOIN (
				SELECT T1.OSS_ID, T1.OSS_VERSION , T1.OSS_NAME
				FROM OSS_MASTER T1 
				WHERE T1.USE_YN = 'Y'
				UNION
				SELECT T1.OSS_ID, T1.OSS_VERSION , T2.OSS_NICKNAME AS OSS_NAME
				FROM OSS_MASTER T1 
				INNER JOIN OSS_NICKNAME T2 ON T1.OSS_NAME = T2.OSS_NAME 
				WHERE T1.USE_YN = 'Y'
			) A2 ON A2.OSS_NAME  = A1.OSS_NAME AND IFNULL(A2.OSS_VERSION, '') = IFNULL(A1.OSS_VERSION, '')
		SET A1.OSS_ID = A2.OSS_ID, A1.OSS_NAME = IFNULL(A2.OSS_NAME, A1.OSS_NAME)
		WHERE 
			A1.REFERENCE_ID = #{prjId} 
			<choose>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(referenceDiv)">
					AND A1.REFERENCE_DIV = #{referenceDiv}
				</when>
				<otherwise>
					AND A1.REFERENCE_DIV = '13'
				</otherwise>
			</choose>
			AND IFNULL(A1.OSS_NAME, '') <![CDATA[<>]]> ''
			AND A1.ADMIN_CHECK_YN = 'N'
	</update>
	
	<update id="updateComponentsOssInfo" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper.updateComponentsOssId */
		UPDATE 
			OSS_COMPONENTS A1
			INNER JOIN OSS_MASTER A2 ON A1.OSS_NAME = A2.OSS_NAME AND A1.OSS_VERSION = A2.OSS_VERSION AND A2.USE_YN = 'Y' 
		SET A1.DOWNLOAD_LOCATION = A2.DOWNLOAD_LOCATION, A1.HOMEPAGE = A2.HOMEPAGE
		WHERE 
			A1.REFERENCE_ID = #{prjId} 
			<choose>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(referenceDiv)">
					AND A1.REFERENCE_DIV = #{referenceDiv}
				</when>
				<otherwise>
					AND A1.REFERENCE_DIV = '13'
				</otherwise>
			</choose>
			 AND IFNULL(A1.OSS_ID, '') <![CDATA[<>]]> ''
			 AND A1.ADMIN_CHECK_YN = 'N'
	</update>

	<update id="updateComponentsCopyrightInfo" parameterType="oss.fosslight.domain.ProjectIdentification">
		UPDATE OSS_COMPONENTS A1
		SET A1.COPYRIGHT = #{copyrightText}
		WHERE
		    A1.REFERENCE_ID = #{referenceId}
		    AND A1.COMPONENT_ID = ${componentId}
			<choose>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(referenceDiv)">
					AND A1.REFERENCE_DIV = #{referenceDiv}
				</when>
				<otherwise>
					AND A1.REFERENCE_DIV = '13'
				</otherwise>
			</choose>
			AND A1.ADMIN_CHECK_YN = 'N'
	</update>

	
	<update id="updateComponentsLicenseId" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper.updateComponentsLicenseId */
		UPDATE 
			OSS_COMPONENTS_LICENSE A1
			INNER JOIN OSS_COMPONENTS A2 ON A1.COMPONENT_ID = A2.COMPONENT_ID 
				AND A2.REFERENCE_ID = #{prjId}
			<choose>
				<when test="!@oss.fosslight.util.StringUtil@isEmpty(referenceDiv)">
					AND A2.REFERENCE_DIV = #{referenceDiv}
				</when>
				<otherwise>
				AND A2.REFERENCE_DIV = '13'
				</otherwise>
			</choose>  
			
			LEFT OUTER JOIN (
				SELECT T1.LICENSE_ID, T1.LICENSE_NAME
				FROM LICENSE_MASTER T1 
				WHERE T1.USE_YN = 'Y' AND IFNULL(T1.SHORT_IDENTIFIER, '') = ''
				UNION
				SELECT T1.LICENSE_ID, T1.SHORT_IDENTIFIER AS LICENSE_NAME
				FROM LICENSE_MASTER T1 
				WHERE T1.USE_YN = 'Y' AND IFNULL(T1.SHORT_IDENTIFIER, '') != ''
				UNION
				SELECT T1.LICENSE_ID, T2.LICENSE_NICKNAME AS LICENSE_NAME
				FROM LICENSE_MASTER T1 
					INNER JOIN LICENSE_NICKNAME T2 ON T1.LICENSE_NAME = T2.LICENSE_NAME
				WHERE T1.USE_YN = 'Y'
			) A3 ON A3.LICENSE_NAME  = A1.LICENSE_NAME
			
		SET A1.LICENSE_ID = A3.LICENSE_ID
	</update>
	

	<update id="updateComponentsLicenseInfo" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper.updateComponentsLicenseInfo */
		UPDATE 
			OSS_COMPONENTS_LICENSE A1
			INNER JOIN OSS_COMPONENTS A2 ON A1.COMPONENT_ID = A2.COMPONENT_ID 
				AND A2.REFERENCE_ID = #{prjId}
				<choose>
					<when test="!@oss.fosslight.util.StringUtil@isEmpty(referenceDiv)">
						AND A2.REFERENCE_DIV = #{referenceDiv}
					</when>
					<otherwise>
					AND A2.REFERENCE_DIV = '13'
					</otherwise>
				</choose>  
				AND IFNULL(A2.OSS_ID, '') <![CDATA[<>]]> '' 
				AND A2.ADMIN_CHECK_YN = 'N'
			INNER JOIN  (
				SELECT 
					T1.OSS_ID, 
					(
						SELECT 
							CASE 
								WHEN IFNULL(T3.SHORT_IDENTIFIER, '') = '' THEN T3.LICENSE_NAME 
								ELSE T3.SHORT_IDENTIFIER 
							END 
						FROM LICENSE_MASTER T3 
						WHERE T3.LICENSE_ID = T2.LICENSE_ID
					 ) AS LICENSE_NAME
					 , T2.LICENSE_ID
					 , CASE 
					 	WHEN IFNULL(T2.OSS_LICENSE_TEXT, '') = '' THEN (SELECT B1.LICENSE_TEXT FROM LICENSE_MASTER B1 WHERE B1.LICENSE_ID = T2.LICENSE_ID) 
					 	ELSE T2.OSS_LICENSE_TEXT END AS OSS_LICENSE_TEXT 
					 , T2.OSS_COPYRIGHT 
				FROM OSS_MASTER T1 
					INNER JOIN OSS_LICENSE_DECLARED T2 ON T1.OSS_ID = T2.OSS_ID  
				GROUP BY OSS_ID, LICENSE_ID
			) A3 ON (A3.OSS_ID = A2.OSS_ID AND A3.LICENSE_ID = A1.LICENSE_ID)
		SET A1.LICENSE_NAME = A3.LICENSE_NAME,  A1.LICENSE_TEXT = A3.OSS_LICENSE_TEXT, A1.COPYRIGHT_TEXT = A3.OSS_COPYRIGHT
		WHERE IFNULL(A1.LICENSE_ID, '') <![CDATA[<>]]> ''
		  AND A2.ADMIN_CHECK_YN = 'N'
	</update>
	
	<select id="checkChangedIdentification" parameterType="String" resultType="String">
	/* ProjectMapper.checkChangedIdentification */
		SELECT 
			CASE WHEN T1.REFERENCE_DIV = '10' 
				THEN UPPER(CONCAT(T1.REFERENCE_DIV, '|', TRIM(IFNULL(T1.OSS_NAME, '')), '|', TRIM(IFNULL(T1.OSS_VERSION, '')), '|', TRIM(IFNULL(T1.REF_PARTNER_ID, '')), '|', IFNULL(T1.EXCLUDE_YN, 'N')))
				ELSE UPPER(CONCAT(T1.REFERENCE_DIV, '|', TRIM(IFNULL(T1.OSS_NAME, '')), '|', TRIM(IFNULL(T1.OSS_VERSION, '')), '|', TRIM(IFNULL(T2.LICENSE_NAME, '')), '|', IFNULL(T1.EXCLUDE_YN, 'N'), '|', IFNULL(T2.EXCLUDE_YN , 'N') )) 
			END AS CHANGE_CHECK_KEY
		FROM  OSS_COMPONENTS T1 
			LEFT OUTER JOIN OSS_COMPONENTS_LICENSE T2 ON T1.COMPONENT_ID = T2.COMPONENT_ID
			LEFT OUTER JOIN OSS_MASTER T3 ON T1.OSS_NAME = T3.OSS_NAME AND T1.OSS_VERSION = T3.OSS_VERSION AND T3.USE_YN = 'Y' 
		WHERE T1.REFERENCE_ID = #{prjId} AND T1.REFERENCE_DIV <![CDATA[<>]]> '50'
	</select>
	
	<select id="getProjectDownloadExpandInfo" parameterType="oss.fosslight.domain.Project" resultType="java.util.HashMap">
		SELECT                                                                                            
			T1.PRJ_ID
			, T1.DISTRIBUTE_TARGET
			, T1.DISTRIBUTE_NAME
			, T1.DISTRIBUTE_MASTER_CATEGORY
			, T1.DISTRIBUTE_DEPLOY_TIME
			, T2.*                                                                                
			, (SELECT B1.ORIG_NM FROM T2_FILE B1 WHERE B1.FILE_SEQ = T1.NOTICE_FILE_ID) AS NOTICE_FILE_NAME
			, (SELECT C1.ORIG_NM FROM T2_FILE C1 WHERE C1.FILE_SEQ = T1.PACKAGE_FILE_ID) AS PACKAGE_FILE_NAME
			, GROUP_CONCAT(T3.CATEGORY, '@',T3.SUBCATEGORY, '@',T3.MODEL_NAME, '@', T3.RELEASE_DATE ORDER BY T3.CATEGORY, T3.SUBCATEGORY, T3.MODEL_NAME SEPARATOR '|') AS MODEL_INFO
			, T4.NOTICE_TYPE
		FROM PROJECT_MASTER T1                                                                              
		LEFT OUTER JOIN (                                                                                   
		SELECT                                                                                              
			A1.REFERENCE_ID                                                                                  
			, COUNT(IF(A1.REFERENCE_DIV = '10', 1, NULL)) AS PARTNER_CNT                                     
			, COUNT(IF(A1.REFERENCE_DIV = '11', 1, NULL)) AS SRC_CNT                                         
			, COUNT(IF(A1.REFERENCE_DIV = '12', 1, NULL)) AS BAT_CNT                                         
			, COUNT(IF(A1.REFERENCE_DIV = '13' AND A1.OBLIGATION_TYPE IN ('10', '11'), 1, NULL)) AS BOM_CNT  
			, COUNT(IF(A1.REFERENCE_DIV = '13' AND A1.OBLIGATION_TYPE = '11', 1, NULL)) AS DISCLOSE_CNT      
		FROM OSS_COMPONENTS A1                                                                              
		WHERE A1.REFERENCE_DIV IN ('10', '11', '12', '13')                                                  
		GROUP BY REFERENCE_ID                                                                               
		) T2 ON T1.PRJ_ID = T2.REFERENCE_ID
		LEFT OUTER JOIN PROJECT_MODEL T3 ON T1.PRJ_ID = T3.PRJ_ID
		LEFT OUTER JOIN OSS_NOTICE T4 ON T1.PRJ_ID = T4.PRJ_ID
		WHERE
				<foreach collection="prjIdList" item="_prjId" open="T1.PRJ_ID IN (" close=")" separator=",">
				#{_prjId}
				</foreach>	
		GROUP BY PRJ_ID	
	</select>
	
	<insert id="makeOssNotice" parameterType="oss.fosslight.domain.OssNotice">
		INSERT INTO OSS_NOTICE(
			PRJ_ID
			, NOTICE_TYPE
			, NOTICE_TYPE_ETC
		)VALUES(
			#{prjId}                  
			, #{noticeType}
			, #{noticeTypeEtc}     
		) ON DUPLICATE KEY UPDATE
			NOTICE_TYPE                =  #{noticeType}
		  , NOTICE_TYPE_ETC				   =  #{noticeTypeEtc}                     
	</insert>
	<select id="getNoticeType" parameterType="String" resultType="oss.fosslight.domain.CamelMap">SELECT NOTICE_TYPE, NOTICE_TYPE_ETC FROM OSS_NOTICE WHERE PRJ_ID = #{prjId}</select>
	<delete id="deleteOssNotice">DELETE FROM OSS_NOTICE WHERE PRJ_ID = #{prjId}</delete>
	
	<select id="getComponentListForLicenseCheck" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.OssComponentsLicense">
		SELECT T1.COMPONENT_ID, T1.OSS_ID, T2.LICENSE_ID, T2.LICENSE_NAME 
		FROM OSS_COMPONENTS T1 
			INNER JOIN OSS_COMPONENTS_LICENSE T2 
				ON T1.COMPONENT_ID = T2.COMPONENT_ID AND T2.EXCLUDE_YN <![CDATA[<>]]> 'Y'
		WHERE T1.REFERENCE_ID = #{prjId} 
			AND T1.REFERENCE_DIV = #{referenceDiv}
			AND T1.EXCLUDE_YN <![CDATA[<>]]> 'Y'
			AND IFNULL(T1.OSS_ID, '') <![CDATA[<>]]> ''
			AND IFNULL(T1.OSS_NAME, '') <![CDATA[<>]]> ''
		ORDER BY OSS_ID
	</select>
	<update id="updateOssIdToNull" parameterType="oss.fosslight.domain.OssComponents">
		UPDATE OSS_COMPONENTS SET OSS_ID = NULL WHERE
		<foreach collection="ossComponentsIdList" item="_id" open=" COMPONENT_ID IN (" close=")" separator=",">#{_id}</foreach>
	</update>
	
	<update id="updateWithoutVerifyYn" parameterType="oss.fosslight.domain.OssNotice">
		UPDATE
			PROJECT_MASTER
		SET
			WITHOUT_VERIFY_YN = #{withoutVerifyYn}
		WHERE
			PRJ_ID = #{prjId}
	</update>
	
	<select id="selectWatchersCheck" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT PRJ_ID 
		       ,DIVISION
		       ,USER_ID 
		       ,EMAIL 
		FROM   PROJECT_WATCHER 
		WHERE  PRJ_ID = #{prjId}
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(prjDivision)">
			AND DIVISION = #{prjDivision}
			AND USER_ID = #{prjUserId}
		</if> 
		<if test="@oss.fosslight.util.StringUtil@isEmpty(prjDivision)">
			AND EMAIL = #{prjEmail}
		</if>
	</select>
	
	<select id="getWatcherListByEmail" parameterType="String" resultType="oss.fosslight.domain.Project">
		SELECT T2.* FROM PROJECT_WATCHER T1
		INNER JOIN PROJECT_MASTER T2 ON T1.PRJ_ID = T2.PRJ_ID AND T2.USE_YN = 'Y'
		WHERE T1.EMAIL = #{email}
	</select>
	<!-- OSS NAME과 LICENSE를 기입하지 않은 BINARY에 대해서 자동으로 매핑한다. -->
	<select id="findBinAutoIdentificationWithBinaryText" parameterType="String" resultType="oss.fosslight.domain.OssComponents">
		SELECT 
			T1.COMPONENT_ID, T1.BINARY_NAME, T1.OSS_NAME, T1.OSS_VERSION, T1.FILE_PATH, T1.EXCLUDE_YN, T1.BINARY_NOTICE, T1.CUSTOM_BINARY_YN, T1.REFERENCE_ID, T1.REFERENCE_DIV
		FROM OSS_COMPONENTS T1
			INNER JOIN OSS_COMPONENTS_LICENSE T2 
				ON T1.COMPONENT_ID = T2.COMPONENT_ID 
					AND IFNULL(T2.EXCLUDE_YN, 'N') = 'N'
					AND IFNULL(T2.LICENSE_NAME, '') = ''
		WHERE 
			T1.REFERENCE_ID = #{prjId} 
			AND T1.REFERENCE_DIV = '15' 
			AND IFNULL(T1.EXCLUDE_YN, 'N') = 'N' 
			AND IFNULL(T1.BINARY_NAME, '') <![CDATA[<>]]> ''
			AND IFNULL(T1.OSS_NAME, '') = ''
	</select>
	<select id="findBinAutoIdentificationWithResultText" parameterType="String" resultType="oss.fosslight.domain.OssComponents">
		SELECT 
			T1.COMPONENT_ID, T1.REFERENCE_ID, T1.REFERENCE_DIV, T1.BINARY_NAME, T1.OSS_NAME, T1.OSS_VERSION, T1.FILE_PATH, T1.EXCLUDE_YN, T1.BINARY_NOTICE, T1.CUSTOM_BINARY_YN
		FROM OSS_COMPONENTS T1
			INNER JOIN OSS_COMPONENTS_LICENSE T2 
				ON T1.COMPONENT_ID = T2.COMPONENT_ID 
					AND IFNULL(T2.EXCLUDE_YN, 'N') = 'N'
					AND IFNULL(T2.LICENSE_NAME, '') = ''
		WHERE 
			T1.REFERENCE_ID = #{prjId} 
			AND T1.REFERENCE_DIV = '14' 
			AND IFNULL(T1.EXCLUDE_YN, 'N') = 'N' 
			AND IFNULL(T1.BINARY_NAME, '') <![CDATA[<>]]> ''
			AND IFNULL(T1.OSS_NAME, '') = ''
	</select>
	<select id="getOssComponentsLicenseListByComponentId" parameterType="String" resultType="oss.fosslight.domain.OssComponentsLicense">
		SELECT * FROM OSS_COMPONENTS_LICENSE WHERE COMPONENT_ID = #{componentId} ORDER BY COMPONENT_LICENSE_ID
	</select>
	
	<update id="updateIdentifcationProgress" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER SET IDENTIFICATION_STATUS = #{identificationStatus} WHERE PRJ_ID = #{prjId}
	</update>
	
	<select id="existsWatcherByEmail" resultType="int" parameterType="oss.fosslight.domain.Project">
		SELECT COUNT(1) FROM PROJECT_WATCHER WHERE EMAIL = #{prjEmail} AND PRJ_ID = #{prjId}
	</select>
	
	<select id="existsWatcherByUser" resultType="int" parameterType="oss.fosslight.domain.Project">
		SELECT COUNT(1) FROM PROJECT_WATCHER WHERE PRJ_ID = #{prjId} AND DIVISION = #{prjDivision} AND (USER_ID = 'ALL' OR USER_ID = #{prjUserId})
	</select>
	
	<select id="existsWatcherByUserDivistion" resultType="int" parameterType="oss.fosslight.domain.Project">
		SELECT COUNT(1) FROM PROJECT_WATCHER WAT INNER JOIN
		T2_USERS USR ON WAT.USER_ID = USR.USER_ID WHERE WAT.PRJ_ID = #{prjId}
		AND WAT.USER_ID = #{prjUserId} AND USR.DIVISION = #{prjDivision} AND
		WAT.DIVISION != USR.DIVISION
	</select>

	<update id="updateWatcherDivision" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_WATCHER 
		SET DIVISION = #{prjDivision}
		WHERE PRJ_ID = #{prjId} 
		AND USER_ID = #{prjUserId} 
		AND IFNULL(EMAIL,'') = ''
	</update>

	<select id="existsWatcher" resultType="int" parameterType="oss.fosslight.domain.Project">
		SELECT COUNT(1) FROM PROJECT_MASTER WHERE PRJ_ID = #{prjId}
	</select>
	
	<insert id="insertWatcher" parameterType="oss.fosslight.domain.Project">
		INSERT INTO PROJECT_WATCHER (PRJ_ID, DIVISION, USER_ID, EMAIL) VALUES (#{prjId}, #{prjDivision}, #{prjUserId}, #{prjEmail})
	</insert>
	
	<update id="removeWatcher" parameterType="oss.fosslight.domain.Project">
		DELETE FROM PROJECT_WATCHER 
		WHERE 
			PRJ_ID = #{prjId} 
			<choose>
				<when test="@oss.fosslight.util.StringUtil@isNotEmpty(prjEmail)"> AND EMAIL = #{prjEmail}</when>
				<otherwise> AND DIVISION = #{prjDivision} AND USER_ID = #{prjUserId}</otherwise>
			</choose>
	</update>
	
	<update id="resetReleaseDateProjectModelFlag">
		UPDATE PROJECT_MODEL
		SET 
			UPD_RELEASE_DATE = 'N'
		WHERE 
			PRJ_ID = #{prjId}
	</update>
	<update id="updateReleaseDateProjectModel" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MODEL
		SET 
			RELEASE_DATE = #{releaseDate}, UPD_RELEASE_DATE = 'Y'
		WHERE 
			PRJ_ID = #{prjId}
			AND CATEGORY = SUBSTR(#{category},1,3)
			AND SUBCATEGORY = SUBSTR(#{category},4)
			AND MODEL_NAME = #{modelName}		
	</update>
	<delete id="deleteProjectModelWithModelName" parameterType="oss.fosslight.domain.Project">
		DELETE FROM PROJECT_MODEL
		WHERE 
			PRJ_ID = #{prjId}
			AND CATEGORY = SUBSTR(#{category},1,3)
			AND SUBCATEGORY = SUBSTR(#{category},4)
			AND MODEL_NAME = #{modelName}		
	</delete>
	
	
	<update id="updateFilePath" parameterType="oss.fosslight.domain.OssComponents">
		UPDATE OSS_COMPONENTS SET FILE_PATH = #{filePath} WHERE COMPONENT_ID = #{componentId}
	</update>
	
	
	<update id="updateDistributeTarget" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER
		SET DISTRIBUTE_TARGET = #{distributeTarget} 
		WHERE PRJ_ID = #{prjId}
	</update>
	
	<select id="selectViewOnlyFlag" parameterType="oss.fosslight.domain.Project" resultType="string">
		SELECT
			CASE WHEN COUNT(1) = 0 THEN 'Y'
			     ELSE 'N'
			END AS VIEW_YN
		FROM
			PROJECT_MASTER T1
		WHERE 
			( T1.CREATOR = #{loginUserName}
				OR EXISTS (
						SELECT 1
						  FROM PROJECT_WATCHER A1 
						 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{loginUserName} -->
						 WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{loginUserName} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
				)
			)
		AND T1.PRJ_ID = #{prjId}
	</select>
	
	<update id="updatePublicYn" parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER 
		   SET PUBLIC_YN = #{publicYn}
		 WHERE PRJ_ID = #{prjId}
	</update>
	
	<select id="getModelCategoryTemplateArray" parameterType="String" resultType="String">
		SELECT CONCAT(RESULT.Category, ' CHAR(62) ', RESULT.SubCategory) AS 'Desc'
		FROM (
			SELECT 
					( SELECT SUB.CD_DTL_NM FROM T2_CODE_DTL SUB WHERE A1.CD_NO = SUB.CD_DTL_EXP AND SUB.CD_NO = '500') AS Category
					, A1.CD_DTL_NM AS SubCategory
					, ( SELECT SUB.CD_DTL_NO FROM T2_CODE_DTL SUB WHERE A1.CD_NO = SUB.CD_DTL_EXP AND SUB.CD_NO = '500') AS CategoryID
					, A1.CD_DTL_NO AS SubCategoryID

			FROM T2_CODE_DTL A1
			INNER JOIN T2_CODE A2 ON A1.CD_NO = A2.CD_NO
			WHERE A1.CD_NO IN ( 
				SELECT T2.CD_DTL_EXP FROM T2_CODE T1
					INNER JOIN T2_CODE_DTL T2 ON T1.CD_NO = T2.CD_NO AND T2.USE_YN = 'Y'
						WHERE T1.CD_NO = '500'
				
			) AND A1.USE_YN = 'Y'
		
		) RESULT
		ORDER BY Category, SubCategory
	</select>
	
	<select id="getModelCategoryTemplateArraySKS" resultType="String">
		SELECT CONCAT(RESULT.Category, ' CHAR(62) ', RESULT.SubCategory) AS 'Desc'
		FROM (
			SELECT 
					( SELECT SUB.CD_DTL_NM FROM T2_CODE_DTL SUB WHERE A1.CD_NO = SUB.CD_DTL_EXP AND SUB.CD_NO = '550') AS Category
					, A1.CD_DTL_NM AS SubCategory
					, ( SELECT SUB.CD_DTL_NO FROM T2_CODE_DTL SUB WHERE A1.CD_NO = SUB.CD_DTL_EXP AND SUB.CD_NO = '550') AS CategoryID
					, A1.CD_DTL_NO AS SubCategoryID

			FROM T2_CODE_DTL A1
			INNER JOIN T2_CODE A2 ON A1.CD_NO = A2.CD_NO
			WHERE A1.CD_NO IN ( 
				SELECT T2.CD_DTL_EXP FROM T2_CODE T1
					INNER JOIN T2_CODE_DTL T2 ON T1.CD_NO = T2.CD_NO AND T2.USE_YN = 'Y'
						WHERE T1.CD_NO = '550'
				
			) AND A1.USE_YN = 'Y'
		
		) RESULT
		ORDER BY Category, SubCategory
	</select>
	
	<select id="copyWatcher" resultType="oss.fosslight.domain.Project">
		SELECT T1.DIVISION AS PRJ_DIVISION
			 , T1.USER_ID AS PRJ_USER_ID
			 , T2.USER_NAME AS PRJ_USER_NAME
			 , T1.EMAIL AS PRJ_EMAIL
			 , T2.USE_YN AS USER_USE_YN
	 		 , T3.USE_YN AS DEPT_USE_YN
	   <choose>
		  <when test="listKind == 'prj'">
		  FROM PROJECT_WATCHER T1
		 INNER JOIN T2_USERS T2
		    ON T1.USER_ID = T2.USER_ID
		  LEFT JOIN T2_CODE_DTL T3
			ON T1.DIVISION = T3.CD_DTL_NO 
		   AND T3.CD_NO = '200'
		 WHERE T1.PRJ_ID = #{listId}
		   <if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
	  	   AND T1.PRJ_ID IN (SELECT DISTINCT A.PRJ_ID
	  						   FROM PROJECT_MASTER A
	 					      WHERE A.USE_YN = 'Y'
	   							AND (A.CREATOR = #{loginUserName}
			  				    	 OR EXISTS (SELECT 1
												  FROM PROJECT_WATCHER A1 
												 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{loginUserName} -->
												 WHERE A1.PRJ_ID = A.PRJ_ID AND (A1.USER_ID = #{loginUserName} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
												)
			  						 OR A.PUBLIC_YN = 'Y')
			  				)
			</if>
		  </when>
		  <when test="listKind == 'par'">
		  FROM PARTNER_WATCHER T1
		 INNER JOIN T2_USERS T2
		    ON T1.USER_ID = T2.USER_ID
		  LEFT JOIN T2_CODE_DTL T3
			ON T1.DIVISION = T3.CD_DTL_NO 
		   AND T3.CD_NO = '200'
		 WHERE T1.PARTNER_ID = #{listId}
		   <if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
		   AND T1.PARTNER_ID IN (SELECT DISTINCT A.PARTNER_ID
		  						   FROM PARTNER_MASTER A
								  WHERE A.USE_YN = 'Y'
									AND (A.CREATOR = #{loginUserName}
				  				   		 OR EXISTS (SELECT 1 
											 		  FROM PARTNER_WATCHER A1 
													 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{loginUserName} -->
													 WHERE A1.PARTNER_ID = A.PARTNER_ID AND (A1.USER_ID = #{loginUserName} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
												   )
								  		 OR A.PUBLIC_YN = 'Y')
								 )
		   </if>
		  </when>
		  <when test="listKind == 'bat'">
		  FROM BAT_WATCHER T1
		 INNER JOIN T2_USERS T2
		    ON T1.USER_ID = T2.USER_ID
		  LEFT JOIN T2_CODE_DTL T3
			ON T1.DIVISION = T3.CD_DTL_NO 
		   AND T3.CD_NO = '200'
		 WHERE T1.BAT_ID = #{listId}
		  </when>
	   </choose>
	</select>
	
	<select id="selectAddList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT A.REFERENCE_ID 
		     , P.PRJ_NAME 
		     , P.PRJ_VERSION 
		     , A.COMPONENT_COUNT 
		  FROM PROJECT_ADDLIST A 
		 INNER JOIN PROJECT_MASTER P 
		    ON A.REFERENCE_ID = P.PRJ_ID
		 WHERE A.PRJ_ID = #{prjId}
		   AND A.REFERENCE_DIV = #{referenceDiv}
	</select>
	
	<insert id="insertAddList" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper insertSrcAddList */
		INSERT INTO	PROJECT_ADDLIST(
			PRJ_ID,
			REFERENCE_ID,
			REFERENCE_DIV,
			COMPONENT_COUNT
		)VALUES(
			#{prjId},
			#{referenceId},
			#{referenceDiv},
			#{componentCount}
		)
	</insert>
	
	<delete id="deleteAddList" parameterType="oss.fosslight.domain.Project">
	/* ProjectMapper deleteSrcAddList */
		DELETE FROM PROJECT_ADDLIST 
	 	 WHERE PRJ_ID = #{prjId}
	 	   AND REFERENCE_DIV = #{referenceDiv}
	</delete>
	
	<select id="existsAddList" resultType="int">
		SELECT COUNT(*)
		  FROM PROJECT_ADDLIST
		 WHERE PRJ_ID = #{prjId}
		   AND REFERENCE_DIV = #{referenceDiv}
	</select>
	
	<select id="findIdentificationMaxNvdInfo" resultType="string">
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE PRODUCT = REPLACE(OC.OSS_NAME,' ', '_') AND VERSION = OC.OSS_VERSION)
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.PRODUCT = REPLACE(OC.OSS_NAME,' ', '_') 
			AND NVD.VERSION = OC.OSS_VERSION 
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = OC.OSS_VERSION 
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL	
		
		UNION
		
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, NICK.OSS_NICKNAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE PRODUCT = REPLACE(NICK.OSS_NICKNAME,' ', '_') AND VERSION = OC.OSS_VERSION)
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.PRODUCT = REPLACE(OC.OSS_NICKNAME,' ', '_')
			AND NVD.VERSION = OC.OSS_VERSION
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = OC.OSS_VERSION 
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL	
		
		UNION
		
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE PRODUCT = REPLACE(OC.OSS_NAME,' ', '_') AND VERSION = '-')
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.PRODUCT = REPLACE(OC.OSS_NAME,' ', '_')
			AND NVD.VERSION = '-'
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = ''
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL	
		
		UNION
		
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, NICK.OSS_NICKNAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE PRODUCT = REPLACE(NICK.OSS_NICKNAME,' ', '_') AND VERSION = '-')
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.PRODUCT = REPLACE(OC.OSS_NICKNAME,' ', '_')
			AND NVD.VERSION = '-'
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = ''
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL
	</select>
	
	<select id="findIdentificationMaxNvdInfoForVendorProduct" resultType="string">
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE VENDORPRODUCT = OC.OSS_NAME AND VERSION = OC.OSS_VERSION)
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.VENDORPRODUCT = OC.OSS_NAME
			AND NVD.VERSION = OC.OSS_VERSION
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = OC.OSS_VERSION 
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL	
		
		UNION
		
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, NICK.OSS_NICKNAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE VENDORPRODUCT = NICK.OSS_NICKNAME AND VERSION = OC.OSS_VERSION)
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.VENDORPRODUCT = OC.OSS_NICKNAME
			AND NVD.VERSION = OC.OSS_VERSION
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = OC.OSS_VERSION 
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL	
		
		UNION
		
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE VENDORPRODUCT = OC.OSS_NAME AND VERSION = '-')
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON OC.OSS_NAME = NVD.VENDORPRODUCT
			AND NVD.VERSION = '-'
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = ''
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL	
		
		UNION
		
		SELECT TBL.CVSS_SCORE_MAX
		FROM
		(	
			SELECT CONCAT(NVD.PRODUCT,'@',NVD.VERSION,'@',NVD.VENDOR,'@',NVD.CVSS_SCORE,'@',NVD.CVE_ID) AS CVSS_SCORE_MAX
			FROM NVD_DATA_SCORE_V3 NVD
			INNER JOIN
			(		SELECT OC.OSS_NAME, NICK.OSS_NICKNAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
				<if test="!@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV = #{commponentDiv}
				</if>
				<if test="@oss.fosslight.util.StringUtil@isEmpty(commponentDiv)">
					AND OC.REFERENCE_DIV IN ('10','11','12','14','15')
				</if>
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
					AND EXISTS (SELECT 1 FROM NVD_DATA_SCORE_V3 WHERE VENDORPRODUCT = NICK.OSS_NICKNAME AND VERSION = '-')
					GROUP BY OC.OSS_NAME, OC.OSS_VERSION
			) OC
			ON NVD.VENDORPRODUCT = OC.OSS_NICKNAME
			AND NVD.VERSION = '-'
			WHERE NVD.CVE_ID NOT IN (SELECT CVE_ID 
										FROM NVD_DATA_SECURITY 
										WHERE OSS_NAME = OC.OSS_NAME 
										AND OSS_VERSION = ''
										AND VULNERABILITY_RESOLUTION = 'Fixed')
			ORDER BY NVD.CVSS_SCORE DESC
			LIMIT 5
		) TBL
	</select>
	
	<select id="selectOssComponentMaxIdx" parameterType="oss.fosslight.domain.Project" resultType="int">
		SELECT IFNULL(MAX(COMPONENT_IDX), 0) + 1 FROM OSS_COMPONENTS OC WHERE REFERENCE_ID=#{referenceId} AND REFERENCE_DIV=#{referenceDiv}
	</select>
	
	<select id="getProjectBasicInfo" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT * FROM PROJECT_MASTER WHERE PRJ_ID = #{prjId}
	</select>
	
	<select id="selectModelInfoList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		/* ProjectMapper.selectModelList */
		SELECT A2.MODEL_NAME
		     , A.PRJ_ID
		     , A.PRJ_NAME
		     , A.STATUS
		     , A.PRIORITY
		     , A.DISTRIBUTION_TYPE
		     , A.IDENTIFICATION_STATUS
		     , A.VERIFICATION_STATUS
		     , A.DESTRIBUTION_STATUS
		     <if test="@oss.fosslight.util.StringUtil@equals('N', modelFlag)">
		     , LEFT(REGEXP_REPLACE(A.CREATED_DATE, '[^0-9]', ''), 8) AS DISTRIBUTE_DEPLOY_TIME
		     </if>
		     <if test="@oss.fosslight.util.StringUtil@equals('Y', modelFlag)">
		     , A.RELEASE_DATE AS DISTRIBUTE_DEPLOY_TIME
		     </if>
		     , A.DISTRIBUTE_TARGET
		     , A.DIVISION
		     , A.COMPLETE_YN
	  	  FROM (SELECT T2.MODEL_NAME
					 , T1.PRJ_ID 
					 , T1.PRJ_NAME
					 , T1.COMPLETE_YN
				     , CASE 
							WHEN T1.PRJ_ID IS NULL THEN '' 
							WHEN T1.COMPLETE_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'COMP' 
							WHEN T1.DROP_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'DROP' 
							WHEN T1.IDENTIFICATION_STATUS = 'REV' OR T1.VERIFICATION_STATUS = 'REV' THEN 'REV' 
							WHEN T1.IDENTIFICATION_STATUS = 'REQ' OR T1.VERIFICATION_STATUS = 'REQ' OR STATUS_REQUEST_YN = 'Y' THEN 'REQ' 
							WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'DONE' THEN 'REV'
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'NA' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV'
							ELSE 'PROG' END STATUS 
					  , T1.PRIORITY
					  , T1.DISTRIBUTION_TYPE 
					  , IFNULL(T1.IDENTIFICATION_STATUS, '') AS IDENTIFICATION_STATUS 
					  , IFNULL(T1.VERIFICATION_STATUS, '') AS VERIFICATION_STATUS 
					  , IFNULL(T1.DESTRIBUTION_STATUS, '') AS DESTRIBUTION_STATUS 
					  , T2.RELEASE_DATE
					  , T1.CREATED_DATE
					  , T1.DISTRIBUTE_TARGET 
					  , T1.DIVISION 
				   FROM (SELECT * 
				   		   FROM PROJECT_MASTER
				   		  WHERE 1 = 1
				   		    AND USE_YN = 'Y'
				   	   <if test="@oss.fosslight.util.StringUtil@equals('N', modelFlag)">
						  <if test="!@oss.fosslight.util.StringUtil@isEmpty(schStartDate)">
						    AND DATE_FORMAT(CREATED_DATE,'%Y%m%d') <![CDATA[>=]]> #{schStartDate}
						  </if>
						  <if test="!@oss.fosslight.util.StringUtil@isEmpty(schEndDate)">
						    AND DATE_FORMAT(CREATED_DATE,'%Y%m%d') <![CDATA[<=]]> #{schEndDate}
						  </if>
					   </if>
						 <if test="!@oss.fosslight.util.StringUtil@isEmpty(prjDivision)">
						    <!-- AND CREATOR IN (SELECT U.USER_ID FROM T2_USERS U WHERE DIVISION = #{prjDivision}) -->
						    AND DIVISION = #{prjDivision}
						 </if>
				   		) T1 
				   LEFT JOIN (SELECT * 
				   				FROM PROJECT_MODEL
				   			   WHERE 1 = 1
				   			 <if test="@oss.fosslight.util.StringUtil@equals('Y', modelFlag)">
				   			   <if test="!@oss.fosslight.util.StringUtil@isEmpty(schStartDate)">
							     AND DATE_FORMAT(RELEASE_DATE,'%Y%m%d') <![CDATA[>=]]> #{schStartDate}
							   </if>
							   <if test="!@oss.fosslight.util.StringUtil@isEmpty(schEndDate)">
							     AND DATE_FORMAT(RELEASE_DATE,'%Y%m%d') <![CDATA[<=]]> #{schEndDate}
							   </if>
							 </if>
				   			 ) T2 ON T1.PRJ_ID = T2.PRJ_ID
				) A
	      INNER JOIN
			<foreach collection="modelListInfo" item="_modelName" open="( " close=" ) A2 " separator=" UNION ALL ">
				SELECT #{_modelName} AS MODEL_NAME
			</foreach>
			<choose>
   				<when test="@oss.fosslight.util.StringUtil@equals('Y', modelFlag)">
			 		ON A.MODEL_NAME = A2.MODEL_NAME 
				</when>
				<otherwise>
			 		ON A.PRJ_NAME = A2.MODEL_NAME
				</otherwise>
			</choose>
	 <choose>
   		<when test="@oss.fosslight.util.StringUtil@isEmpty(sidx)">ORDER BY MODEL_NAME ASC, PRJ_ID DESC</when>
   		<otherwise>
   		<if test="!@oss.fosslight.util.StringUtil@isEmpty(sidx)">
   			ORDER BY
   			<choose>
   				<when test="@oss.fosslight.util.StringUtil@equals('MODEL_NAME', sidx)">
   					MODEL_NAME
   				</when>
   				<when test="@oss.fosslight.util.StringUtil@equals('STATUS', sidx)">
   					STATUS
   				</when>
   				<when test="@oss.fosslight.util.StringUtil@equals('PRJ_ID', sidx)">
   					PRJ_ID
   				</when>
   				<when test="@oss.fosslight.util.StringUtil@equals('DISTRIBUTION_TYPE', sidx)">
   					(SELECT CD.CD_DTL_NM FROM T2_CODE_DTL CD WHERE CD.CD_NO = '207' AND CD.CD_DTL_NO =  DISTRIBUTION_TYPE)
   				</when>
   				<when test="@oss.fosslight.util.StringUtil@equals('DESTRIBUTION_STATUS', sidx)">
   					(
   						CASE
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'ERROR' THEN 7
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'DONE' THEN 6
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'RSV' THEN 5
							WHEN IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND IFNULL(DISTRIBUTE_TARGET, 'NA') != 'NA' AND DESTRIBUTION_STATUS = 'PROG' THEN 4
							WHEN (IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'NA' AND DESTRIBUTION_STATUS = 'NA') OR (IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND DISTRIBUTE_TARGET = 'NA' AND IFNULL(A.COMPLETE_YN, 'N') = 'Y') THEN 3
							WHEN (IDENTIFICATION_STATUS = 'CONF' AND VERIFICATION_STATUS = 'CONF' AND DESTRIBUTION_STATUS = 'NA')  OR (VERIFICATION_STATUS != '' AND VERIFICATION_STATUS != 'CONF' AND IFNULL(A.COMPLETE_YN, 'N') = 'Y') OR (DESTRIBUTION_STATUS = '' AND IFNULL(A.COMPLETE_YN, 'N') = 'Y') THEN 3
							WHEN VERIFICATION_STATUS = 'CONF' AND IDENTIFICATION_STATUS = 'CONF' AND DESTRIBUTION_STATUS = '' AND IFNULL(A.COMPLETE_YN, 'N') != 'Y' THEN 2
							ELSE 1
						END
   					)
   				</when>
   				<when test="@oss.fosslight.util.StringUtil@equals('DISTRIBUTE_DEPLOY_TIME', sidx)">
   					DATE_FORMAT(DISTRIBUTE_DEPLOY_TIME, '%Y%m%d')
   				</when>
				<otherwise></otherwise>
   			</choose>
   			<if test="!@oss.fosslight.util.StringUtil@isEmpty(sord)">
   				<choose>
   					<when test="@oss.fosslight.util.StringUtil@equals('asc', sord)">
    					ASC
    				</when>
    				<when test="@oss.fosslight.util.StringUtil@equals('desc', sord)">
    					DESC
    				</when>
   				</choose>
   			</if>
   		</if>
   		</otherwise>
   	</choose>
	<include refid="limitPage"/>
	</select>
	
	<update id="updateProjectAllowDownloadBitFlag"  parameterType="oss.fosslight.domain.Project">
		UPDATE PROJECT_MASTER
		   SET ALLOW_DOWNLOAD_BIT_FLAG = #{allowDownloadBitFlag}
		 WHERE PRJ_ID = #{prjId}
	</update>
	
	<update id="updateProjectDistributionStatus"  parameterType="String">
		UPDATE PROJECT_MASTER
		   SET DESTRIBUTION_STATUS = #{destributionStatus}
		 WHERE PRJ_ID = #{prjId}
	</update>
	
	<select id="selectReuseProjectTotalCount" parameterType="oss.fosslight.domain.Project" resultType="int">
		SELECT COUNT(*)
		  FROM (SELECT T1.PRJ_ID
					 , T1.PRJ_NAME
					 , T1.PRJ_VERSION
					 , (SELECT CD_DTL_NM FROM T2_CODE_DTL WHERE CD_NO = '207' AND CD_DTL_NO = T1.DISTRIBUTION_TYPE) AS DISTRIBUTION_TYPE
					 , T1.CREATOR
					 , T3.USER_NAME
					 , T1.CREATED_DATE
					 , T1.COMMENT
					 , T2.MODEL_NAME
				     , T1.USE_YN
				     , T1.VERIFICATION_STATUS
				     , (SELECT ORIG_NM FROM T2_FILE WHERE FILE_SEQ = T1.PACKAGE_FILE_ID) AS ORIG_NM1
				     , (SELECT ORIG_NM FROM T2_FILE WHERE FILE_SEQ = T1.PACKAGE_FILE_ID2) AS ORIG_NM2
				     , (SELECT ORIG_NM FROM T2_FILE WHERE FILE_SEQ = T1.PACKAGE_FILE_ID3) AS ORIG_NM3
				  FROM PROJECT_MASTER T1 
				  LEFT JOIN PROJECT_MODEL T2 ON T1.PRJ_ID = T2.PRJ_ID
				 INNER JOIN T2_USERS T3 ON T1.CREATOR = T3.USER_ID
				 GROUP BY T1.PRJ_ID) A
		 WHERE 1 = 1
   		   AND A.USE_YN = 'Y'
   		   AND A.VERIFICATION_STATUS = 'CONF'
		 <if test="!@oss.fosslight.util.StringUtil@isEmpty(reuseKeyword)">
		   AND (A.PRJ_NAME LIKE CONCAT('%',#{reuseKeyword},'%') 
		   	  	OR A.MODEL_NAME LIKE CONCAT('%',#{reuseKeyword},'%') 
		   	  	OR A.CREATOR LIKE CONCAT('%',#{reuseKeyword},'%') 
		   	  	OR A.USER_NAME LIKE CONCAT('%',#{reuseKeyword},'%')
		   	  	OR A.ORIG_NM1 = #{reuseKeyword}
				OR A.ORIG_NM2 = #{reuseKeyword}
				OR A.ORIG_NM3 = #{reuseKeyword})
		 </if>
	</select>
	
	<select id="selectReuseProject" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
		SELECT A.PRJ_ID
		     , A.PRJ_NAME
			 , A.PRJ_VERSION
			 , A.DISTRIBUTION_TYPE
			 , IFNULL(A.USER_NAME, A.CREATOR) AS CREATOR
			 , A.CREATED_DATE
			 , A.COMMENT
		  FROM (SELECT T1.PRJ_ID
					 , T1.PRJ_NAME
					 , T1.PRJ_VERSION
					 , (SELECT CD_DTL_NM FROM T2_CODE_DTL WHERE CD_NO = '207' AND CD_DTL_NO = T1.DISTRIBUTION_TYPE) AS DISTRIBUTION_TYPE
					 , T1.CREATOR
					 , T3.USER_NAME
					 , T1.CREATED_DATE
					 , T1.COMMENT
					 , T2.MODEL_NAME
				     , T1.USE_YN
				     , T1.VERIFICATION_STATUS
				     , (SELECT ORIG_NM FROM T2_FILE WHERE FILE_SEQ = T1.PACKAGE_FILE_ID) AS ORIG_NM1
				     , (SELECT ORIG_NM FROM T2_FILE WHERE FILE_SEQ = T1.PACKAGE_FILE_ID2) AS ORIG_NM2
				     , (SELECT ORIG_NM FROM T2_FILE WHERE FILE_SEQ = T1.PACKAGE_FILE_ID3) AS ORIG_NM3
				  FROM PROJECT_MASTER T1 
				  LEFT JOIN PROJECT_MODEL T2 ON T1.PRJ_ID = T2.PRJ_ID
				 INNER JOIN T2_USERS T3 ON T1.CREATOR = T3.USER_ID
				 GROUP BY T1.PRJ_ID) A
		 WHERE 1 = 1
   		   AND A.USE_YN = 'Y'
   		   AND A.VERIFICATION_STATUS = 'CONF'
		 <if test="!@oss.fosslight.util.StringUtil@isEmpty(reuseKeyword)">
		   AND (A.PRJ_NAME LIKE CONCAT('%',#{reuseKeyword},'%') 
		   	  	OR A.MODEL_NAME LIKE CONCAT('%',#{reuseKeyword},'%') 
		   	  	OR A.CREATOR LIKE CONCAT('%',#{reuseKeyword},'%') 
		   	  	OR A.USER_NAME LIKE CONCAT('%',#{reuseKeyword},'%')
		   	  	OR A.ORIG_NM1 = #{reuseKeyword}
				OR A.ORIG_NM2 = #{reuseKeyword}
				OR A.ORIG_NM3 = #{reuseKeyword})
		 </if>
		 <include refid="orderby"/>
		 <include refid="limitPage"/>
	</select>
	
	<select id="selectReusePackagingFileList" parameterType="string" resultType="oss.fosslight.domain.T2File">
		SELECT T2.* 
		  FROM PROJECT_MASTER T1
		 INNER JOIN T2_FILE T2 
		    ON (T1.PACKAGE_FILE_ID = T2.FILE_SEQ
		        OR T1.PACKAGE_FILE_ID2 = T2.FILE_SEQ
		        OR T1.PACKAGE_FILE_ID3 = T2.FILE_SEQ)
		 WHERE T1.PRJ_ID = #{prjId}
	 </select>
	 
	 <select id="getOssAnalysisDataCnt" parameterType="oss.fosslight.domain.Project" resultType="int">
	 	SELECT COUNT(*) AS CNT 
	 	  FROM OSS_ANALYSIS_STATUS
	 	 WHERE PRJ_ID = #{prjId}
	 </select>
	 
	 <select id="getOssAnalysisData" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.Project">
	 	SELECT PRJ_ID
		     , STATUS AS OSS_ANALYSIS_STATUS
		     , CREATED_DATE
		     , CREATOR
		     , ANALYSIS_START_DATE
		     , ANALYSIS_END_DATE
		     , MODIFIED_DATE
		     , MODIFIER
		  FROM OSS_ANALYSIS_STATUS
		 WHERE PRJ_ID = #{prjId}
	 </select>
	 
	 <select id="getReviewerEmail" parameterType="string" resultType="string">
	 	SELECT GROUP_CONCAT(DISTINCT USER.EMAIL) AS EMAIL
		  FROM PROJECT_MASTER PRJ
		 INNER JOIN T2_USERS USER
		    ON PRJ.REVIEWER = USER.USER_ID
		 WHERE PRJ.PRJ_ID = #{prjId}
				 OR USER.USER_ID = #{loginUser}
	 </select>

	 <select id="selectProjectCount" parameterType="oss.fosslight.domain.Project" resultType="int">
		/* bomCompareMapper.selectProjectCount */
		SELECT COUNT(*) FROM (
			 SELECT 
					  T1.PRJ_ID
					, T1.PRJ_NAME
					, T1.PRJ_VERSION
					, T1.DISTRIBUTION_TYPE
					, T1.OSS_NOTICE_DUE_DATE
					, T1.COMMENT
					, T1.OS_TYPE
					, T1.OS_TYPE_ETC
					, CASE 
							WHEN T1.COMPLETE_YN = 'Y' AND STATUS_REQUEST_YN = 'N' THEN 'COMP'
							WHEN T1.IDENTIFICATION_STATUS = 'REV' OR T1.VERIFICATION_STATUS = 'REV'	THEN 'REV' 
							WHEN T1.IDENTIFICATION_STATUS = 'REQ' OR T1.VERIFICATION_STATUS = 'REQ' OR STATUS_REQUEST_YN = 'Y'	THEN 'REQ' 
							WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'DONE' THEN 'REV' /* 2019-10-24 */
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'CONF' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV' /* 2019-10-24 */
 						 	WHEN T1.IDENTIFICATION_STATUS = 'CONF' AND T1.VERIFICATION_STATUS = 'NA' AND T1.DESTRIBUTION_STATUS = 'NA' THEN 'REV' /* 2019-10-24 */
							ELSE 'PROG' 
						END STATUS
					, T1.PRIORITY
					, IFNULL(T1.IDENTIFICATION_STATUS, '') AS IDENTIFICATION_STATUS
					, IFNULL(T1.VERIFICATION_STATUS, '') AS VERIFICATION_STATUS
					, IFNULL(T1.DESTRIBUTION_STATUS, '') AS DESTRIBUTION_STATUS
					, T1.IDENTIFICATION_SUB_STATUS_PARTNER 
					, T1.IDENTIFICATION_SUB_STATUS_SRC
					, T1.IDENTIFICATION_SUB_STATUS_BAT
					, T1.IDENTIFICATION_SUB_STATUS_BIN
					, T1.IDENTIFICATION_SUB_STATUS_ANDROID
					, IFNULL(T1.SRC_CSV_FILE_ID, '') SRC_CSV_FILE_ID
					, IFNULL(T1.SRC_ANDROID_CSV_FILE_ID, '') SRC_ANDROID_CSV_FILE_ID 
					, IFNULL(T1.SRC_ANDROID_NOTICE_FILE_ID, '') SRC_ANDROID_NOTICE_FILE_ID
					, IFNULL(T1.SRC_ANDROID_NOTICE_XML_ID, '') SRC_ANDROID_NOTICE_XML_ID
					, IFNULL(T1.PACKAGE_FILE_ID, '') PACKAGE_FILE_ID
					, IFNULL(T1.NOTICE_FILE_ID, '') NOTICE_FILE_ID
					, T1.REVIEWER
					, T1.DIVISION
					, IFNULL((SELECT USER_NAME FROM T2_USERS WHERE T1.CREATOR  = USER_ID), T1.CREATOR) AS CREATOR
					, T1.CREATED_DATE
					, IFNULL((SELECT USER_NAME FROM T2_USERS WHERE T1.MODIFIER  = USER_ID), T1.MODIFIER) AS MODIFIER
					, T1.MODIFIED_DATE
			   FROM PROJECT_MASTER T1
	          WHERE T1.USE_YN = 'Y'
	          <if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', userRole)">
			    AND (
						T1.CREATOR = #{prjUserId} 
							OR EXISTS (
							SELECT A1.PRJ_ID, A1.DIVISION, A2.USER_ID 
							  FROM PROJECT_WATCHER A1 
							 <!-- INNER JOIN T2_USERS A2 ON A2.USE_YN = 'Y' AND A2.USER_ID = #{prjUserId} -->
							 WHERE A1.PRJ_ID = T1.PRJ_ID AND (A1.USER_ID = #{prjUserId} OR (A1.USER_ID = 'all' AND A1.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{prjUserId}) ))
							)
							OR PUBLIC_YN = 'Y'
					)
			  </if>
				<foreach item="item" index="index" collection="watcherListInfo" open=" AND (" close=")" separator="OR">
			     T1.PRJ_ID = #{item}
			    </foreach>
		   ) A
	   WHERE 1 = 1
	   <if test="@oss.fosslight.util.StringUtil@equals('Y', ossReportFlag)">
	     AND A.IDENTIFICATION_STATUS != 'CONF'
	   </if>
	</select>

	<insert id="insertStatisticsMostUsedOssInfo" parameterType="oss.fosslight.domain.Project">
		INSERT INTO STATISTICS_MOSTUSED (
			PRJ_ID
			, COMPONENT_NAME
			, CREATED_DATE
			, DIV_NO
			, CHART_TYPE
			)
			SELECT T1.REFERENCE_ID
				 , T1.OSS_NAME AS COMPONENT_NAME
				 , T2.CREATED_DATE
				 , T2.DIVISION AS DIV_NO
				 , 'OSS' AS CHART_TYPE
			  FROM (SELECT REFERENCE_ID
					  	 , OSS_NAME
					  FROM OSS_COMPONENTS
					 WHERE REFERENCE_ID IN (SELECT PRJ_ID
											  FROM PROJECT_MASTER
											 WHERE IDENTIFICATION_STATUS = 'CONF'
											   AND PRJ_ID = #{prjId}
											   AND USE_YN = 'Y')
					   AND REFERENCE_DIV IN ('13','14')
					   AND OSS_NAME NOT IN ('','-')
					   AND EXCLUDE_YN = 'N'
				  GROUP BY REFERENCE_ID, OSS_NAME, OSS_VERSION) T1
					 INNER JOIN PROJECT_MASTER T2
						ON T1.REFERENCE_ID = T2.PRJ_ID
						<!-- 
					 INNER JOIN T2_USERS T3
						ON T2.CREATOR = T3.USER_ID
			 		 INNER JOIN (SELECT CD_DTL_NO
							  		  , CD_DTL_NM
						   		   FROM T2_CODE_DTL
						  		  WHERE CD_NO = '200'
									AND USE_YN = 'Y') T4
						ON T3.DIVISION = T4.CD_DTL_NO
						 -->
	</insert>

	<insert id="insertStatisticsMostUsedLicenseInfo" parameterType="oss.fosslight.domain.Project">
		INSERT INTO STATISTICS_MOSTUSED (
			PRJ_ID
			, COMPONENT_NAME
			, CREATED_DATE
			, DIV_NO
			, CHART_TYPE
			)
			SELECT PM.PRJ_ID
				 , OC.LICENSE_NAME AS COMPONENT_NAME
				 , PM.CREATED_DATE
				 , PM.DIVISION AS DIV_NO
				 , 'LICENSE' AS CHART_TYPE
			  FROM (SELECT T1.REFERENCE_ID
			  			 , T2.LICENSE_NAME
					  FROM (SELECT COMPONENT_ID
					   			 , REFERENCE_ID
					   			 , OSS_NAME
					   			 , OSS_VERSION
							  FROM OSS_COMPONENTS T1
							 WHERE REFERENCE_ID IN (SELECT PRJ_ID
												FROM PROJECT_MASTER
												WHERE IDENTIFICATION_STATUS = 'CONF'
												AND PRJ_ID = #{prjId}
												AND USE_YN = 'Y')
							   AND REFERENCE_DIV IN ('13','14')
							   AND OSS_NAME NOT IN ('', '-')
							   AND EXCLUDE_YN = 'N'
						  GROUP BY COMPONENT_ID, REFERENCE_ID, OSS_NAME, OSS_VERSION) T1
						     INNER JOIN OSS_COMPONENTS_LICENSE T2
								ON T1.COMPONENT_ID = T2.COMPONENT_ID
							   AND UPPER(T2.LICENSE_NAME) NOT IN ('', 'LGE PROPRIETARY LICENSE', 'OTHER PROPRIETARY LICENSE')
						  GROUP BY T1.REFERENCE_ID, T1.OSS_NAME, T1.OSS_VERSION, T2.LICENSE_NAME) OC
			     	 INNER JOIN PROJECT_MASTER PM
				    	ON OC.REFERENCE_ID = PM.PRJ_ID
				    	<!-- 
				 	 INNER JOIN T2_USERS T1
				    	ON PM.CREATOR = T1.USER_ID
				    	
				 	 INNER JOIN (SELECT CD_DTL_NO
				 	 				  , CD_DTL_NM
							   	   FROM T2_CODE_DTL
							   	  WHERE CD_NO = '200'
							    	AND USE_YN = 'Y') T2
						ON T1.DIVISION = T2.CD_DTL_NO
						 -->
	</insert>

	<delete id="deleteStatisticsMostUsedInfo" parameterType="oss.fosslight.domain.Project">
		DELETE FROM STATISTICS_MOSTUSED
		WHERE PRJ_ID = #{prjId}
	</delete>
	
	<select id="selectAdminCheckCnt" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="int">
		SELECT COUNT(1) AS CNT 
		  FROM OSS_COMPONENTS 
		 WHERE REFERENCE_ID = #{referenceId}
		   AND REFERENCE_DIV = '13' 
		   AND (
				 REF_COMPONENT_ID = #{componentId}
		    	 OR (
				  	  	(
				  	  		OSS_NAME IN (SELECT OSS_NAME FROM OSS_NICKNAME WHERE OSS_NICKNAME = #{ossName})
				  	  		OR OSS_NAME = #{ossName}
				  	  	)
						AND OSS_VERSION = #{ossVersion}
				 	)
		   	   )
		   AND ADMIN_CHECK_YN = 'Y'
	</select>
	
	<select id="selectPartnerRefPrjList" parameterType="oss.fosslight.domain.PartnerMaster" resultType="oss.fosslight.domain.Project">
		SELECT PM.PRJ_ID
			 , PM.PRJ_NAME
			 , PM.PRJ_VERSION
			 , PM.MODIFIED_DATE
		  FROM PROJECT_MASTER PM
		 INNER JOIN PROJECT_PARTNER_MAP PP
		    ON PM.PRJ_ID = PP.PRJ_ID
		 WHERE PP.PARTNER_ID = #{partnerId}
		 <if test="@oss.fosslight.util.StringUtil@notEquals('ROLE_ADMIN', loginUserRole)">
		   AND (
				PM.CREATOR = #{loginUserName} 
				OR EXISTS (
							SELECT 1
						  	  FROM PROJECT_WATCHER PW 
						 	 <!-- INNER JOIN T2_USERS USR ON USR.USE_YN = 'Y' AND USR.USER_ID = #{loginUserName} -->
						 	 WHERE PW.PRJ_ID = PM.PRJ_ID AND (PW.USER_ID = #{loginUserName} OR (PW.USER_ID = 'all' AND PW.DIVISION = (SELECT DIVISION FROM T2_USERS A2 WHERE A2.USER_ID = #{loginUserName}) ))
				)
			)
		 </if>
		ORDER BY PM.MODIFIED_DATE DESC LIMIT 100
	</select>
	
	<update id="updateCopyConfirmStatusProjectStatus" parameterType="oss.fosslight.domain.Project">
		UPDATE
			PROJECT_MASTER
		SET
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(identificationStatus)">
			IDENTIFICATION_STATUS = 'PROG'
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(verificationStatus)">
			VERIFICATION_STATUS = 'PROG'
		</if>	
		WHERE
			PRJ_ID = #{prjId}
	</update>
	
	<update id="updateConfirmCopyVerificationDestributionStatus" parameterType="oss.fosslight.domain.Project">
		UPDATE
			PROJECT_MASTER
		SET
			VERIFICATION_STATUS = #{verificationStatus}
			, DESTRIBUTION_STATUS = #{destributionStatus}
		WHERE
			PRJ_ID = #{prjId}
	</update>
	
	<update id="updateProjectDivision" parameterType="oss.fosslight.domain.Project">
		UPDATE
			PROJECT_MASTER
		SET
			DIVISION = #{division}
			, MODIFIER = #{loginUserName}
			, MODIFIED_DATE = now()
		WHERE
			PRJ_ID = #{prjId}
	</update>
	
	<delete id="deleteSecurityData" parameterType="oss.fosslight.domain.OssComponents">
		DELETE FROM NVD_DATA_SECURITY
		WHERE REFERENCE_ID = #{referenceId}
		AND OSS_NAME = #{ossName}
		AND OSS_VERSION = #{ossVersion}
		AND CVE_ID = #{cveId}
		AND	CAST(CVSS_SCORE AS DECIMAL(10, 1)) = CAST(#{cvssScore} AS DECIMAL(10,1))
	</delete>
	
	<insert id="insertSecurityData" parameterType="oss.fosslight.domain.OssComponents">
        INSERT INTO
            NVD_DATA_SECURITY
            (
            REFERENCE_ID
            , OSS_NAME
            , OSS_VERSION
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
			, CVE_ID
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cvssScore)">
			, CVSS_SCORE
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(publDate)">
			, PUBL_DATE
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(vulnerabilityResolution)">
			, VULNERABILITY_RESOLUTION
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(securityPatchLink)">
			, SECURITY_PATCH_LINK
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(securityComments)">
			, SECURITY_COMMENTS
		</if>
            )
            VALUES
            (
            #{referenceId}
            , #{ossName}
            , REPLACE(#{ossVersion}, '-', '')
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
			, #{cveId}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cvssScore)">
			, #{cvssScore}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(publDate)">
			, #{publDate}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(vulnerabilityResolution)">
			, #{vulnerabilityResolution}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(securityPatchLink)">
			, #{securityPatchLink}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(securityComments)">
			, #{securityComments}
		</if>
            ) ON DUPLICATE KEY UPDATE
           	VULNERABILITY_RESOLUTION	= #{vulnerabilityResolution}
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(securityComments)">
			, SECURITY_COMMENTS = #{securityComments}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(securityPatchLink)">
			, SECURITY_PATCH_LINK = #{securityPatchLink}
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(publDate)">
			, PUBL_DATE	= #{publDate}
		</if>
    </insert>
    
    <select id="getSecurityDataList" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponents">
        SELECT OSS_NAME
             , OSS_VERSION
             , CVE_ID
             , CVSS_SCORE
             , DATE_FORMAT(PUBL_DATE, '%Y-%m-%d') AS PUBL_DATE
             , VULNERABILITY_RESOLUTION
             , SECURITY_PATCH_LINK
             , SECURITY_COMMENTS
          FROM NVD_DATA_SECURITY
         WHERE REFERENCE_ID = #{referenceId}
           AND OSS_NAME = #{ossName}
           AND OSS_VERSION = #{ossVersion}
    </select>
    
    <update id="updateCveInfoForNotFixedOssInfo" parameterType="oss.fosslight.domain.OssMaster">
		UPDATE 
			NVD_DATA_SCORE_V3
		SET 
		<if test="@oss.fosslight.util.StringUtil@isEmpty(cveId)">
			CVE_ID = null
			, CVSS_SCORE = null
			, VULN_SUMMARY = null
		</if>
		<if test="!@oss.fosslight.util.StringUtil@isEmpty(cveId)">
			CVE_ID = #{cveId}
			, CVSS_SCORE = #{cvssScore}
			, VULN_SUMMARY = #{vulnSummary}
		</if>
		WHERE 
			PRODUCT = #{ossName}
		AND 
			VERSION = #{ossVersion}
	</update>
	
	<select id="getSecurityDataCntByProject" parameterType="oss.fosslight.domain.Project" resultType="int">
		SELECT COUNT(*)
		FROM (
			SELECT TBL.CVE_ID
			FROM (
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT REPLACE(OC.OSS_NAME, ' ', '_') AS OSS_NAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN 
				(
					SELECT NVD.PRODUCT, NVD.VERSION, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
									WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
									AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NAME = NVD.PRODUCT
				AND OC.OSS_VERSION = NVD.VERSION
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT REPLACE(OC.OSS_NAME, ' ', '_') AS OSS_NAME
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.PRODUCT, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
									WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
									AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NAME = NVD.PRODUCT
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT REPLACE(NICK.OSS_NICKNAME, ' ', '_') AS OSS_NICKNAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.PRODUCT, NVD.VERSION, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
								WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
								AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NICKNAME = NVD.PRODUCT
				AND OC.OSS_VERSION = NVD.VERSION
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT REPLACE(NICK.OSS_NICKNAME, ' ', '_') AS OSS_NICKNAME
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.PRODUCT, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
								WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
								AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NICKNAME = NVD.PRODUCT
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT OC.OSS_NAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.VENDORPRODUCT, NVD.VERSION, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
									WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
									AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NAME = NVD.VENDORPRODUCT
				AND OC.OSS_VERSION = NVD.VERSION
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM 
				(
					SELECT OC.OSS_NAME
					FROM OSS_COMPONENTS OC
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.VENDORPRODUCT, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
								WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
								AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NAME = NVD.VENDORPRODUCT
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT NICK.OSS_NICKNAME, OC.OSS_VERSION
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') != ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.VENDORPRODUCT, NVD.VERSION, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
									WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
									AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NICKNAME = NVD.VENDORPRODUCT
				AND OC.OSS_VERSION = NVD.VERSION
				LIMIT 1
			) TBL
			
			UNION
			
			SELECT TBL.*
			FROM
			(
				SELECT NVD.CVE_ID
				FROM
				(
					SELECT NICK.OSS_NICKNAME 
					FROM OSS_COMPONENTS OC
					INNER JOIN OSS_NICKNAME NICK
					ON OC.OSS_NAME = NICK.OSS_NAME
					WHERE OC.REFERENCE_ID = #{prjId}
					AND OC.REFERENCE_DIV = #{referenceDiv}
					AND OC.OSS_NAME != '-'
					AND OC.OSS_NAME IS NOT NULL
					AND OC.OSS_NAME != ''
					AND IFNULL(OC.OSS_VERSION, '') = ''
					AND IFNULL(OC.EXCLUDE_YN, 'N') != 'Y'
				) OC
				INNER JOIN
				(
					SELECT NVD.VENDORPRODUCT, NVD.CVE_ID
					FROM NVD_DATA_V3 NVD
					WHERE EXISTS (SELECT 1 FROM NVD_CVE_V3
									WHERE CVSS_SCORE <![CDATA[>=]]> 8.0
									AND CVE_ID = NVD.CVE_ID)
				) NVD
				ON OC.OSS_NICKNAME = NVD.VENDORPRODUCT
				LIMIT 1
			) TBL
		) TBL
	</select>
	
	<select id="selectOssComponentsSbomList" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponents">
		SELECT 
		 	T1.PRJ_ID, T1.PRJ_NAME, T1.PRJ_VERSION , T1.DISTRIBUTE_TARGET
			, T2.COMPONENT_ID, T2.OSS_ID, T2.OSS_NAME, T2.OSS_VERSION 
			, IFNULL(T2.DOWNLOAD_LOCATION, T4.DOWNLOAD_LOCATION) AS DOWNLOAD_LOCATION
			, IFNULL(T2.HOMEPAGE, T4.HOMEPAGE) AS HOMEPAGE
			, T2.OBLIGATION_TYPE, T4.ATTRIBUTION AS OSS_ATTRIBUTION
			, IFNULL(T3.LICENSE_ID, '') AS LICENSE_ID
			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', T5.LICENSE_TEXT) AS LICENSE_TEXT
			, REGEXP_REPLACE((CASE WHEN T2.OSS_NAME = '-' OR T2.ADMIN_CHECK_YN = 'Y' THEN T2.COPYRIGHT ELSE T4.COPYRIGHT END), '$\n', '') AS COPYRIGHT_TEXT
			, REGEXP_REPLACE((CASE WHEN T2.ADMIN_CHECK_YN = 'Y' THEN NULL ELSE IF(IFNULL(T3.LICENSE_ID, '') = '', '', T3.COPYRIGHT_TEXT) END), '$\n', '') AS OSS_COPYRIGHT
 			, IF(IFNULL(T3.LICENSE_ID, '') = '', IFNULL(T3.LICENSE_NAME, ''), IF(IFNULL(T5.SHORT_IDENTIFIER,'') = '', T5.LICENSE_NAME, T5.SHORT_IDENTIFIER)) AS LICENSE_NAME
 			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', T5.ATTRIBUTION) AS ATTRIBUTION
			, T2.ADMIN_CHECK_YN
			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', T5.LICENSE_TYPE) AS LICENSE_TYPE
		FROM PROJECT_MASTER T1 
			INNER JOIN OSS_COMPONENTS T2 ON T1.PRJ_ID = T2.REFERENCE_ID AND T2.REFERENCE_DIV = '13' AND T2.OSS_NAME != '-'
			INNER JOIN OSS_COMPONENTS_LICENSE T3 ON T2.COMPONENT_ID = T3.COMPONENT_ID
			 LEFT JOIN OSS_MASTER T4 ON T2.OSS_NAME = T4.OSS_NAME AND IFNULL(T2.OSS_VERSION, '') = IFNULL(T4.OSS_VERSION, '') AND T4.USE_YN = 'Y'
			 LEFT JOIN LICENSE_MASTER T5 ON T3.LICENSE_ID = T5.LICENSE_ID
		WHERE T1.PRJ_ID = #{referenceId}
		  AND IFNULL(T2.EXCLUDE_YN, 'N') = 'N'
		ORDER BY OSS_NAME, LICENSE_NAME
	</select>
	
	<select id="selectOssComponentsListClassAppend" parameterType="oss.fosslight.domain.ProjectIdentification" resultType="oss.fosslight.domain.OssComponents">
		SELECT 
		 	T1.PRJ_ID, T1.PRJ_NAME, T1.PRJ_VERSION , T1.DISTRIBUTE_TARGET
			, T2.COMPONENT_ID, T2.OSS_ID, T2.OSS_NAME, T2.OSS_VERSION, T2.DOWNLOAD_LOCATION, T2.HOMEPAGE, T2.OBLIGATION_TYPE
			, IFNULL(T5.LICENSE_ID, '') AS LICENSE_ID
			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', T5.LICENSE_TEXT) AS LICENSE_TEXT
			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', REGEXP_REPLACE(T3.COPYRIGHT_TEXT, '$\n', '')) AS COPYRIGHT_TEXT
			, IF(IFNULL(T3.LICENSE_ID, '') = '', IFNULL(T3.LICENSE_NAME, ''), IF(IFNULL(T5.SHORT_IDENTIFIER,'') = '', T5.LICENSE_NAME, T5.SHORT_IDENTIFIER)) AS LICENSE_NAME
			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', T5.ATTRIBUTION) AS ATTRIBUTION
			, T2.FILE_PATH
			, IF(IFNULL(T3.LICENSE_ID, '') = '', '', T5.LICENSE_TYPE) AS LICENSE_TYPE
		FROM PROJECT_MASTER T1 
			INNER JOIN OSS_COMPONENTS T2 ON T1.PRJ_ID = T2.REFERENCE_ID AND T2.REFERENCE_DIV = '13' AND T2.EXCLUDE_YN = 'N' AND T2.OSS_NAME = '-'
			INNER JOIN OSS_COMPONENTS_LICENSE T3 ON T2.COMPONENT_ID = T3.COMPONENT_ID
			 LEFT JOIN LICENSE_MASTER T5 ON T3.LICENSE_ID = T5.LICENSE_ID
		WHERE T1.PRJ_ID = #{referenceId}
		  AND IFNULL(T2.EXCLUDE_YN, 'N') = 'N'
		ORDER BY LICENSE_NAME
	</select>
	
	<select id="selectVulnerabilityResolutionSecurityList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.OssComponents">
		SELECT SEC.REFERENCE_ID
				, SEC.OSS_NAME
				, SEC.OSS_VERSION
				, SEC.CVE_ID
				, SEC.CVSS_SCORE
				, SEC.VULNERABILITY_RESOLUTION
		  FROM NVD_DATA_SECURITY SEC
		 WHERE SEC.REFERENCE_ID = #{prjId}
		   AND EXISTS (SELECT 1 FROM OSS_COMPONENTS
		   						WHERE REFERENCE_ID = #{prjId}
		   						AND REFERENCE_DIV = #{referenceDiv}
		   						AND OSS_NAME != ''
		   						AND OSS_NAME != '-'
		   						AND OSS_NAME IS NOT NULL
		   						AND IFNULL(EXCLUDE_YN, 'N') != 'Y'
		   						AND OSS_NAME = SEC.OSS_NAME
		   						AND OSS_VERSION = SEC.OSS_VERSION)
	</select>
	
	<select id="copySecurityDataForProjectCnt" parameterType="oss.fosslight.domain.Project" resultType="int">
		SELECT COUNT(*) FROM NVD_DATA_SECURITY WHERE REFERENCE_ID = #{copyPrjId}
	</select>
	
	<insert id="copySecurityDataForProject" parameterType="oss.fosslight.domain.Project">
		INSERT INTO NVD_DATA_SECURITY
			SELECT #{prjId}
					, T1.OSS_NAME
					, T1.OSS_VERSION
					, T1.CVE_ID
					, T1.CVSS_SCORE
					, T1.PUBL_DATE
					, T1.VULNERABILITY_RESOLUTION
					, T1.SECURITY_PATCH_LINK
					, T1.SECURITY_COMMENTS
			FROM NVD_DATA_SECURITY T1
			WHERE T1.REFERENCE_ID = #{copyPrjId}
	</insert>
	
	<select id="checkSelectDownloadFile" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.OssComponents">
		SELECT T2.OSS_ID
				, T2.OSS_NAME
				, T2.OSS_VERSION 
				, T3.LICENSE_ID
				, IF(IFNULL(T3.LICENSE_ID, '') = '', T3.LICENSE_NAME, IF(IFNULL(T5.SHORT_IDENTIFIER,'') = '', T5.LICENSE_NAME, T5.SHORT_IDENTIFIER)) AS LICENSE_NAME
		FROM PROJECT_MASTER T1 
			INNER JOIN OSS_COMPONENTS T2 ON T1.PRJ_ID = T2.REFERENCE_ID AND T2.REFERENCE_DIV = #{referenceDiv} AND T2.OSS_NAME != '-'
			INNER JOIN OSS_COMPONENTS_LICENSE T3 ON T2.COMPONENT_ID = T3.COMPONENT_ID
			 LEFT JOIN OSS_MASTER T4 ON T2.OSS_NAME = T4.OSS_NAME AND IFNULL(T2.OSS_VERSION, '') = IFNULL(T4.OSS_VERSION, '') AND T4.USE_YN = 'Y'
			 LEFT JOIN LICENSE_MASTER T5 ON T3.LICENSE_ID = T5.LICENSE_ID
		WHERE T1.PRJ_ID = #{prjId}
		  AND IFNULL(T2.EXCLUDE_YN, 'N') = 'N'
	</select>
	
	<select id="getDependenciesDataList" parameterType="oss.fosslight.domain.Project" resultType="oss.fosslight.domain.OssComponents">
		SELECT T2.OSS_ID
				, T2.OSS_NAME
				, T2.OSS_VERSION 
				, T2.DEPENDENCIES
		FROM PROJECT_MASTER T1 
			INNER JOIN OSS_COMPONENTS T2 ON T1.PRJ_ID = T2.REFERENCE_ID AND T2.REFERENCE_DIV = #{referenceDiv} AND T2.OSS_NAME != '-'
			 LEFT JOIN OSS_MASTER T3 ON T2.OSS_NAME = T3.OSS_NAME AND IFNULL(T2.OSS_VERSION, '') = IFNULL(T3.OSS_VERSION, '') AND T3.USE_YN = 'Y'
		WHERE T1.PRJ_ID = #{prjId}
		  AND IFNULL(T2.EXCLUDE_YN, 'N') = 'N'
		  AND T2.OSS_NAME != ''
		  AND IFNULL(T2.DEPENDENCIES, '') != ''
	</select>
</mapper>
