/*
 * Copyright (c) 2021 LG Electronics Inc.
 * SPDX-License-Identifier: AGPL-3.0-only
 */

package oss.fosslight.api.controller.v2;

import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import oss.fosslight.CoTopComponent;
import oss.fosslight.api.service.RestResponseService;
import oss.fosslight.common.CoCodeManager;
import oss.fosslight.common.CoConstDef;
import oss.fosslight.common.Url.APIV2;
import oss.fosslight.service.ApiVulnerabilityService;
import oss.fosslight.service.T2UserService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Api(tags = {"4. Vulnerability"})
@RequiredArgsConstructor
@RestController
@RequestMapping(value = "/api/v2")
public class ApiVulnerabilityV2Controller extends CoTopComponent {

    /**
     * The response service.
     */
    private final RestResponseService responseService;

    /**
     * The user service.
     */
    private final T2UserService userService;

    private final ApiVulnerabilityService apiVulnerabilityService;


    @ApiOperation(value = "Search Vulnerability Info", notes = "NVD Data 조회")
    @GetMapping(value = {APIV2.FOSSLIGHT_API_VULNERABILITY_DATA})
    public ResponseEntity<Map<String, Object>> getVulnerabilityData(
            @ApiParam(hidden=true) @RequestHeader String authorization,
            @ApiParam(value = "OSS name", required = false) @RequestParam(required = false) String ossName,
            @ApiParam(value = "OSS version", required = false) @RequestParam(required = false) String ossVersion,
            @ApiParam(value = "CVE_ID", required = false) @RequestParam(required = false) String cveId) {

        // 사용자 인증
        userService.checkApiUserAuth(authorization);
        Map<String, Object> resultMap = new HashMap<String, Object>();

        try {
            // ossName과 cveId 둘 다 입력하지 않을 경우 에러 처리
            if (isEmpty(ossName) && isEmpty(cveId)) {
                return responseService.errorResponse(HttpStatus.BAD_REQUEST, "Either ossName or cveId is required");
            }

            if (isEmpty(ossVersion)) { // ossVersion을 입력하지 않을 경우 전체 검색으로 처리함.
                ossVersion = "-";
            }

            List<Map<String, Object>> content = apiVulnerabilityService.selectNvdList(ossName, ossVersion, cveId);

            if (content.size() > 0) {
                resultMap.put("content", content);
            }

            return new ResponseEntity<>(resultMap, HttpStatus.OK);
        } catch (Exception e) {
            return responseService.errorResponse(HttpStatus.INTERNAL_SERVER_ERROR,
                    CoCodeManager.getCodeString(CoConstDef.CD_OPEN_API_MESSAGE, CoConstDef.CD_OPEN_API_UNKNOWN_ERROR_MESSAGE));
        }
    }

    @ApiOperation(value = "Search Vulnerability Max Score Info", notes = "NVD Max Score Data 조회")
    @GetMapping(value = {APIV2.FOSSLIGHT_API_VULNERABILITY_MAX_DATA})
    public ResponseEntity<Map<String, Object>> getVulnerabilityMaxData(
            @ApiParam(hidden=true) @RequestHeader String authorization,
            @ApiParam(value = "OSS name", required = true) @RequestParam(required = true) String ossName,
            @ApiParam(value = "OSS version", required = false) @RequestParam(required = false) String ossVersion) {

        // 사용자 인증
        userService.checkApiUserAuth(authorization);
        Map<String, Object> resultMap = new HashMap<String, Object>();

        try {
            if (isEmpty(ossVersion)) { // ossVersion을 입력하지 않을 경우 전체 검색으로 처리함.
                ossVersion = "-";
            }

            List<Map<String, Object>> content = apiVulnerabilityService.selectMaxScoreNvdInfo(ossName, ossVersion);

            if (content.size() > 0) {
                resultMap.put("content", content);
            }

            return new ResponseEntity<>(resultMap, HttpStatus.OK);
        } catch (Exception e) {
            return responseService.errorResponse(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
