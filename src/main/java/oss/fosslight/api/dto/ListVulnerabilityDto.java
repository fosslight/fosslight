package oss.fosslight.api.dto;

import io.swagger.annotations.Scope;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import oss.fosslight.domain.Vulnerability;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ListVulnerabilityDto {
    @Setter
    @Getter
    @Builder(toBuilder = true)
    public static class Request extends Paging {
        private String cveId;
        private Boolean cveIdExact;
        private String maxScoreGreaterThan;
        private String ossName;
        private Boolean ossNameExact;
        private String ossVersion;
        private Boolean ossVersionExact;
        private String vendor;
        private Boolean vendorExact;

        @Setter(AccessLevel.NONE)
        private List<String> ossNicknames;
        @Setter(AccessLevel.NONE)
        private String regexOssName;

        // TODO: check what this does
        private Boolean vulnerabilityCheckFlag;

        public void setMaxScore(String score) {
            this.maxScoreGreaterThan = score;
        }

        public void setOssName(String ossName) {
            this.ossName = ossName;
            this.regexOssName = ossName.replaceAll("[ _]", "[ _]");
        }

        public void setOssNicknames(List<String> ossNicknames) {
            var convertedNickname = ossNicknames.stream().map(nn -> {
                if (nn.contains(" ")) {
                    return nn.replaceAll(" ", "_");
                }
                if (nn.contains("_")) {
                    return nn.replaceAll("_", " ");
                }
                return null;
            }).filter(str -> str != null).collect(Collectors.toList());
            convertedNickname.addAll(ossNicknames);
            var nicknameVariants = convertedNickname
                    .stream()
                    .distinct()
                    .collect(Collectors.toList());

            this.ossNicknames = nicknameVariants;
        }

        public Vulnerability toVulnerability() {
            var vulnerability = new Vulnerability();
            vulnerability.setProduct(ossName);
            vulnerability.setCveId(cveId);
            vulnerability.setOssNameAllSearchFlag((ossNameExact != null && ossNameExact) ? "Y" : "N");
            vulnerability.setVendor(vendor);
            return vulnerability;
        }
    }

    @Setter
    @Getter
    @Builder(toBuilder = true)
    public static class Result {
        int totalCount;
        List<VulnerabilityDto> list;
    }
}
