/*
 * Copyright (c) 2021 LG Electronics Inc.
 * SPDX-License-Identifier: AGPL-3.0-only
 */

package oss.fosslight.service.impl;

import java.util.*;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import oss.fosslight.api.dto.GetVulnerabilityDetailsDto;
import oss.fosslight.api.dto.ListVulnerabilityDto;
import oss.fosslight.api.dto.Paging;
import oss.fosslight.api.dto.SortDirection;
import oss.fosslight.domain.Vulnerability;
import oss.fosslight.repository.ApiVulnerabilityMapper;
import oss.fosslight.repository.VulnerabilityMapper;
import oss.fosslight.service.ApiOssService;
import oss.fosslight.service.ApiVulnerabilityService;
import oss.fosslight.util.StringUtil;

import static oss.fosslight.common.CommonFunction.isEmpty;

@Service
public class ApiVulnerabilityServiceImpl implements ApiVulnerabilityService {
    /**
     * The api oss mapper.
     */
    @Autowired
    Environment env;
    @Autowired
    ApiVulnerabilityMapper apiVulnerabilityMapper;
    @Autowired
    VulnerabilityMapper vulnerabilityMapper;
    @Autowired
    ApiOssService apiOssService;

    public List<Map<String, Object>> selectNvdList(String product, String version, String id) {
        Map<String, Object> paramMap = new HashMap<String, Object>();
        String[] nicknameList = apiOssService.getOssNickNameListByOssName(product);

        paramMap.put("ossName", product);
        paramMap.put("ossVersion", version);
        paramMap.put("cveId", id);
        paramMap.put("ossNicknames", nicknameList);

        if (!StringUtil.isEmpty(product) && product.contains(" ")) {
            paramMap.put("underbarOssName", product.replaceAll(" ", "_"));
        }

        List<Map<String, Object>> nvdList = apiVulnerabilityMapper.selectNvdList(paramMap);
        List<Map<String, Object>> customNvdList = new ArrayList<>();
        
        if (!CollectionUtils.isEmpty(nvdList)) {
        	for (Map<String, Object> nvd : nvdList) {
        		Map<String, Object> customNvdMap = new LinkedHashMap<>();
    			Map<String, Object> ossInfo = new HashMap<>();
    			
    			customNvdMap.put("cveId", nvd.get("cveId"));
    			customNvdMap.put("cvssScore", nvd.get("cvssScore"));
    			customNvdMap.put("cveIdLink", nvd.get("cveIdLink"));
    			
    			ossInfo.put("ossName", nvd.get("ossName"));
        		String ossVersion = (String) nvd.get("ossVersion");
                if (ossVersion.contains(",")) {
                	String[] ossVersions = ossVersion.split("[,]");
                	ossInfo.put("ossVersion", ossVersions);
                } else {
                	ossInfo.put("ossVersion", new String[] {ossVersion});
                }
                customNvdMap.put("ossInfo", ossInfo);
                customNvdList.add(customNvdMap);
            }
        }
        return customNvdList;
    }

    public List<Map<String, Object>> selectMaxScoreNvdInfo(String product, String version) {
        Map<String, Object> paramMap = new HashMap<String, Object>();

        paramMap.put("ossName", product);
        paramMap.put("ossVersion", version);
        paramMap.put("host", env.getProperty("server.domain"));

        if (product.contains(" ")) {
            paramMap.put("underbarOssName", product.replaceAll(" ", "_"));
        }

        return apiVulnerabilityMapper.selectMaxScoreNvdInfo(paramMap);
    }

    public ListVulnerabilityDto.Result listVulnerabilities(ListVulnerabilityDto.Request request) {
        var nicknameList = apiOssService.getOssNickNameListByOssName(request.getOssName());
        request.setOssNicknames(Arrays.stream(nicknameList).collect(Collectors.toList()));

        var totalCount = apiVulnerabilityMapper.selectVulnerabilityTotalCount(request);
        var list = apiVulnerabilityMapper.selectVulnerabilityList(request);

        return ListVulnerabilityDto.Result.builder()
                .totalCount(totalCount)
                .list(list)
                .build();
    }

    public GetVulnerabilityDetailsDto.Result getVulnerabilityDetails(String id) {
        var vulnerability = apiVulnerabilityMapper.selectVulnerabilityById(id);
        var ossList = apiVulnerabilityMapper.selectOssByCveId(id);
        vulnerability.setOss(ossList);
        return GetVulnerabilityDetailsDto.Result.builder()
                .vulnerability(vulnerability)
                .build();
    }
}
